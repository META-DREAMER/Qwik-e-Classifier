// system_acl_iface_acl_kernel_interface_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 17.1 590

`timescale 1 ps / 1 ps
module system_acl_iface_acl_kernel_interface_mm_interconnect_1 (
		input  wire        clk_reset_clk_clk,                                         //                                       clk_reset_clk.clk
		input  wire        kernel_clk_out_clk_clk,                                    //                                  kernel_clk_out_clk.clk
		input  wire        address_span_extender_0_reset_reset_bridge_in_reset_reset, // address_span_extender_0_reset_reset_bridge_in_reset.reset
		input  wire        kernel_cntrl_reset_reset_bridge_in_reset_reset,            //            kernel_cntrl_reset_reset_bridge_in_reset.reset
		input  wire        sw_reset_clk_reset_reset_bridge_in_reset_reset,            //            sw_reset_clk_reset_reset_bridge_in_reset.reset
		input  wire [13:0] kernel_cntrl_m0_address,                                   //                                     kernel_cntrl_m0.address
		output wire        kernel_cntrl_m0_waitrequest,                               //                                                    .waitrequest
		input  wire [0:0]  kernel_cntrl_m0_burstcount,                                //                                                    .burstcount
		input  wire [3:0]  kernel_cntrl_m0_byteenable,                                //                                                    .byteenable
		input  wire        kernel_cntrl_m0_read,                                      //                                                    .read
		output wire [31:0] kernel_cntrl_m0_readdata,                                  //                                                    .readdata
		output wire        kernel_cntrl_m0_readdatavalid,                             //                                                    .readdatavalid
		input  wire        kernel_cntrl_m0_write,                                     //                                                    .write
		input  wire [31:0] kernel_cntrl_m0_writedata,                                 //                                                    .writedata
		input  wire        kernel_cntrl_m0_debugaccess,                               //                                                    .debugaccess
		output wire        address_span_extender_0_cntl_write,                        //                        address_span_extender_0_cntl.write
		output wire        address_span_extender_0_cntl_read,                         //                                                    .read
		input  wire [63:0] address_span_extender_0_cntl_readdata,                     //                                                    .readdata
		output wire [63:0] address_span_extender_0_cntl_writedata,                    //                                                    .writedata
		output wire [7:0]  address_span_extender_0_cntl_byteenable,                   //                                                    .byteenable
		output wire [9:0]  address_span_extender_0_windowed_slave_address,            //              address_span_extender_0_windowed_slave.address
		output wire        address_span_extender_0_windowed_slave_write,              //                                                    .write
		output wire        address_span_extender_0_windowed_slave_read,               //                                                    .read
		input  wire [31:0] address_span_extender_0_windowed_slave_readdata,           //                                                    .readdata
		output wire [31:0] address_span_extender_0_windowed_slave_writedata,          //                                                    .writedata
		output wire [0:0]  address_span_extender_0_windowed_slave_burstcount,         //                                                    .burstcount
		output wire [3:0]  address_span_extender_0_windowed_slave_byteenable,         //                                                    .byteenable
		input  wire        address_span_extender_0_windowed_slave_readdatavalid,      //                                                    .readdatavalid
		input  wire        address_span_extender_0_windowed_slave_waitrequest,        //                                                    .waitrequest
		output wire        irq_ena_0_s_write,                                         //                                         irq_ena_0_s.write
		output wire        irq_ena_0_s_read,                                          //                                                    .read
		input  wire [31:0] irq_ena_0_s_readdata,                                      //                                                    .readdata
		output wire [31:0] irq_ena_0_s_writedata,                                     //                                                    .writedata
		output wire [3:0]  irq_ena_0_s_byteenable,                                    //                                                    .byteenable
		input  wire        irq_ena_0_s_waitrequest,                                   //                                                    .waitrequest
		output wire        mem_org_mode_s_write,                                      //                                      mem_org_mode_s.write
		output wire        mem_org_mode_s_read,                                       //                                                    .read
		input  wire [31:0] mem_org_mode_s_readdata,                                   //                                                    .readdata
		output wire [31:0] mem_org_mode_s_writedata,                                  //                                                    .writedata
		input  wire        mem_org_mode_s_waitrequest,                                //                                                    .waitrequest
		output wire        sw_reset_s_write,                                          //                                          sw_reset_s.write
		output wire        sw_reset_s_read,                                           //                                                    .read
		input  wire [63:0] sw_reset_s_readdata,                                       //                                                    .readdata
		output wire [63:0] sw_reset_s_writedata,                                      //                                                    .writedata
		output wire [7:0]  sw_reset_s_byteenable,                                     //                                                    .byteenable
		input  wire        sw_reset_s_waitrequest,                                    //                                                    .waitrequest
		output wire [8:0]  sys_description_rom_s1_address,                            //                              sys_description_rom_s1.address
		output wire        sys_description_rom_s1_write,                              //                                                    .write
		input  wire [63:0] sys_description_rom_s1_readdata,                           //                                                    .readdata
		output wire [63:0] sys_description_rom_s1_writedata,                          //                                                    .writedata
		output wire [7:0]  sys_description_rom_s1_byteenable,                         //                                                    .byteenable
		output wire        sys_description_rom_s1_chipselect,                         //                                                    .chipselect
		output wire        sys_description_rom_s1_clken,                              //                                                    .clken
		output wire        sys_description_rom_s1_debugaccess,                        //                                                    .debugaccess
		output wire        version_id_0_s_read,                                       //                                      version_id_0_s.read
		input  wire [31:0] version_id_0_s_readdata                                    //                                                    .readdata
	);

	wire          kernel_cntrl_m0_translator_avalon_universal_master_0_waitrequest;        // kernel_cntrl_m0_agent:av_waitrequest -> kernel_cntrl_m0_translator:uav_waitrequest
	wire   [31:0] kernel_cntrl_m0_translator_avalon_universal_master_0_readdata;           // kernel_cntrl_m0_agent:av_readdata -> kernel_cntrl_m0_translator:uav_readdata
	wire          kernel_cntrl_m0_translator_avalon_universal_master_0_debugaccess;        // kernel_cntrl_m0_translator:uav_debugaccess -> kernel_cntrl_m0_agent:av_debugaccess
	wire   [13:0] kernel_cntrl_m0_translator_avalon_universal_master_0_address;            // kernel_cntrl_m0_translator:uav_address -> kernel_cntrl_m0_agent:av_address
	wire          kernel_cntrl_m0_translator_avalon_universal_master_0_read;               // kernel_cntrl_m0_translator:uav_read -> kernel_cntrl_m0_agent:av_read
	wire    [3:0] kernel_cntrl_m0_translator_avalon_universal_master_0_byteenable;         // kernel_cntrl_m0_translator:uav_byteenable -> kernel_cntrl_m0_agent:av_byteenable
	wire          kernel_cntrl_m0_translator_avalon_universal_master_0_readdatavalid;      // kernel_cntrl_m0_agent:av_readdatavalid -> kernel_cntrl_m0_translator:uav_readdatavalid
	wire          kernel_cntrl_m0_translator_avalon_universal_master_0_lock;               // kernel_cntrl_m0_translator:uav_lock -> kernel_cntrl_m0_agent:av_lock
	wire          kernel_cntrl_m0_translator_avalon_universal_master_0_write;              // kernel_cntrl_m0_translator:uav_write -> kernel_cntrl_m0_agent:av_write
	wire   [31:0] kernel_cntrl_m0_translator_avalon_universal_master_0_writedata;          // kernel_cntrl_m0_translator:uav_writedata -> kernel_cntrl_m0_agent:av_writedata
	wire    [2:0] kernel_cntrl_m0_translator_avalon_universal_master_0_burstcount;         // kernel_cntrl_m0_translator:uav_burstcount -> kernel_cntrl_m0_agent:av_burstcount
	wire   [31:0] address_span_extender_0_windowed_slave_agent_m0_readdata;                // address_span_extender_0_windowed_slave_translator:uav_readdata -> address_span_extender_0_windowed_slave_agent:m0_readdata
	wire          address_span_extender_0_windowed_slave_agent_m0_waitrequest;             // address_span_extender_0_windowed_slave_translator:uav_waitrequest -> address_span_extender_0_windowed_slave_agent:m0_waitrequest
	wire          address_span_extender_0_windowed_slave_agent_m0_debugaccess;             // address_span_extender_0_windowed_slave_agent:m0_debugaccess -> address_span_extender_0_windowed_slave_translator:uav_debugaccess
	wire   [13:0] address_span_extender_0_windowed_slave_agent_m0_address;                 // address_span_extender_0_windowed_slave_agent:m0_address -> address_span_extender_0_windowed_slave_translator:uav_address
	wire    [3:0] address_span_extender_0_windowed_slave_agent_m0_byteenable;              // address_span_extender_0_windowed_slave_agent:m0_byteenable -> address_span_extender_0_windowed_slave_translator:uav_byteenable
	wire          address_span_extender_0_windowed_slave_agent_m0_read;                    // address_span_extender_0_windowed_slave_agent:m0_read -> address_span_extender_0_windowed_slave_translator:uav_read
	wire          address_span_extender_0_windowed_slave_agent_m0_readdatavalid;           // address_span_extender_0_windowed_slave_translator:uav_readdatavalid -> address_span_extender_0_windowed_slave_agent:m0_readdatavalid
	wire          address_span_extender_0_windowed_slave_agent_m0_lock;                    // address_span_extender_0_windowed_slave_agent:m0_lock -> address_span_extender_0_windowed_slave_translator:uav_lock
	wire   [31:0] address_span_extender_0_windowed_slave_agent_m0_writedata;               // address_span_extender_0_windowed_slave_agent:m0_writedata -> address_span_extender_0_windowed_slave_translator:uav_writedata
	wire          address_span_extender_0_windowed_slave_agent_m0_write;                   // address_span_extender_0_windowed_slave_agent:m0_write -> address_span_extender_0_windowed_slave_translator:uav_write
	wire    [2:0] address_span_extender_0_windowed_slave_agent_m0_burstcount;              // address_span_extender_0_windowed_slave_agent:m0_burstcount -> address_span_extender_0_windowed_slave_translator:uav_burstcount
	wire          address_span_extender_0_windowed_slave_agent_rf_source_valid;            // address_span_extender_0_windowed_slave_agent:rf_source_valid -> address_span_extender_0_windowed_slave_agent_rsp_fifo:in_valid
	wire   [89:0] address_span_extender_0_windowed_slave_agent_rf_source_data;             // address_span_extender_0_windowed_slave_agent:rf_source_data -> address_span_extender_0_windowed_slave_agent_rsp_fifo:in_data
	wire          address_span_extender_0_windowed_slave_agent_rf_source_ready;            // address_span_extender_0_windowed_slave_agent_rsp_fifo:in_ready -> address_span_extender_0_windowed_slave_agent:rf_source_ready
	wire          address_span_extender_0_windowed_slave_agent_rf_source_startofpacket;    // address_span_extender_0_windowed_slave_agent:rf_source_startofpacket -> address_span_extender_0_windowed_slave_agent_rsp_fifo:in_startofpacket
	wire          address_span_extender_0_windowed_slave_agent_rf_source_endofpacket;      // address_span_extender_0_windowed_slave_agent:rf_source_endofpacket -> address_span_extender_0_windowed_slave_agent_rsp_fifo:in_endofpacket
	wire          address_span_extender_0_windowed_slave_agent_rsp_fifo_out_valid;         // address_span_extender_0_windowed_slave_agent_rsp_fifo:out_valid -> address_span_extender_0_windowed_slave_agent:rf_sink_valid
	wire   [89:0] address_span_extender_0_windowed_slave_agent_rsp_fifo_out_data;          // address_span_extender_0_windowed_slave_agent_rsp_fifo:out_data -> address_span_extender_0_windowed_slave_agent:rf_sink_data
	wire          address_span_extender_0_windowed_slave_agent_rsp_fifo_out_ready;         // address_span_extender_0_windowed_slave_agent:rf_sink_ready -> address_span_extender_0_windowed_slave_agent_rsp_fifo:out_ready
	wire          address_span_extender_0_windowed_slave_agent_rsp_fifo_out_startofpacket; // address_span_extender_0_windowed_slave_agent_rsp_fifo:out_startofpacket -> address_span_extender_0_windowed_slave_agent:rf_sink_startofpacket
	wire          address_span_extender_0_windowed_slave_agent_rsp_fifo_out_endofpacket;   // address_span_extender_0_windowed_slave_agent_rsp_fifo:out_endofpacket -> address_span_extender_0_windowed_slave_agent:rf_sink_endofpacket
	wire          address_span_extender_0_windowed_slave_agent_rdata_fifo_src_valid;       // address_span_extender_0_windowed_slave_agent:rdata_fifo_src_valid -> address_span_extender_0_windowed_slave_agent_rdata_fifo:in_valid
	wire   [33:0] address_span_extender_0_windowed_slave_agent_rdata_fifo_src_data;        // address_span_extender_0_windowed_slave_agent:rdata_fifo_src_data -> address_span_extender_0_windowed_slave_agent_rdata_fifo:in_data
	wire          address_span_extender_0_windowed_slave_agent_rdata_fifo_src_ready;       // address_span_extender_0_windowed_slave_agent_rdata_fifo:in_ready -> address_span_extender_0_windowed_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_valid;                                                       // cmd_mux:src_valid -> address_span_extender_0_windowed_slave_agent:cp_valid
	wire   [88:0] cmd_mux_src_data;                                                        // cmd_mux:src_data -> address_span_extender_0_windowed_slave_agent:cp_data
	wire          cmd_mux_src_ready;                                                       // address_span_extender_0_windowed_slave_agent:cp_ready -> cmd_mux:src_ready
	wire    [6:0] cmd_mux_src_channel;                                                     // cmd_mux:src_channel -> address_span_extender_0_windowed_slave_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                               // cmd_mux:src_startofpacket -> address_span_extender_0_windowed_slave_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                 // cmd_mux:src_endofpacket -> address_span_extender_0_windowed_slave_agent:cp_endofpacket
	wire   [63:0] address_span_extender_0_cntl_agent_m0_readdata;                          // address_span_extender_0_cntl_translator:uav_readdata -> address_span_extender_0_cntl_agent:m0_readdata
	wire          address_span_extender_0_cntl_agent_m0_waitrequest;                       // address_span_extender_0_cntl_translator:uav_waitrequest -> address_span_extender_0_cntl_agent:m0_waitrequest
	wire          address_span_extender_0_cntl_agent_m0_debugaccess;                       // address_span_extender_0_cntl_agent:m0_debugaccess -> address_span_extender_0_cntl_translator:uav_debugaccess
	wire   [13:0] address_span_extender_0_cntl_agent_m0_address;                           // address_span_extender_0_cntl_agent:m0_address -> address_span_extender_0_cntl_translator:uav_address
	wire    [7:0] address_span_extender_0_cntl_agent_m0_byteenable;                        // address_span_extender_0_cntl_agent:m0_byteenable -> address_span_extender_0_cntl_translator:uav_byteenable
	wire          address_span_extender_0_cntl_agent_m0_read;                              // address_span_extender_0_cntl_agent:m0_read -> address_span_extender_0_cntl_translator:uav_read
	wire          address_span_extender_0_cntl_agent_m0_readdatavalid;                     // address_span_extender_0_cntl_translator:uav_readdatavalid -> address_span_extender_0_cntl_agent:m0_readdatavalid
	wire          address_span_extender_0_cntl_agent_m0_lock;                              // address_span_extender_0_cntl_agent:m0_lock -> address_span_extender_0_cntl_translator:uav_lock
	wire   [63:0] address_span_extender_0_cntl_agent_m0_writedata;                         // address_span_extender_0_cntl_agent:m0_writedata -> address_span_extender_0_cntl_translator:uav_writedata
	wire          address_span_extender_0_cntl_agent_m0_write;                             // address_span_extender_0_cntl_agent:m0_write -> address_span_extender_0_cntl_translator:uav_write
	wire    [3:0] address_span_extender_0_cntl_agent_m0_burstcount;                        // address_span_extender_0_cntl_agent:m0_burstcount -> address_span_extender_0_cntl_translator:uav_burstcount
	wire          address_span_extender_0_cntl_agent_rf_source_valid;                      // address_span_extender_0_cntl_agent:rf_source_valid -> address_span_extender_0_cntl_agent_rsp_fifo:in_valid
	wire  [125:0] address_span_extender_0_cntl_agent_rf_source_data;                       // address_span_extender_0_cntl_agent:rf_source_data -> address_span_extender_0_cntl_agent_rsp_fifo:in_data
	wire          address_span_extender_0_cntl_agent_rf_source_ready;                      // address_span_extender_0_cntl_agent_rsp_fifo:in_ready -> address_span_extender_0_cntl_agent:rf_source_ready
	wire          address_span_extender_0_cntl_agent_rf_source_startofpacket;              // address_span_extender_0_cntl_agent:rf_source_startofpacket -> address_span_extender_0_cntl_agent_rsp_fifo:in_startofpacket
	wire          address_span_extender_0_cntl_agent_rf_source_endofpacket;                // address_span_extender_0_cntl_agent:rf_source_endofpacket -> address_span_extender_0_cntl_agent_rsp_fifo:in_endofpacket
	wire          address_span_extender_0_cntl_agent_rsp_fifo_out_valid;                   // address_span_extender_0_cntl_agent_rsp_fifo:out_valid -> address_span_extender_0_cntl_agent:rf_sink_valid
	wire  [125:0] address_span_extender_0_cntl_agent_rsp_fifo_out_data;                    // address_span_extender_0_cntl_agent_rsp_fifo:out_data -> address_span_extender_0_cntl_agent:rf_sink_data
	wire          address_span_extender_0_cntl_agent_rsp_fifo_out_ready;                   // address_span_extender_0_cntl_agent:rf_sink_ready -> address_span_extender_0_cntl_agent_rsp_fifo:out_ready
	wire          address_span_extender_0_cntl_agent_rsp_fifo_out_startofpacket;           // address_span_extender_0_cntl_agent_rsp_fifo:out_startofpacket -> address_span_extender_0_cntl_agent:rf_sink_startofpacket
	wire          address_span_extender_0_cntl_agent_rsp_fifo_out_endofpacket;             // address_span_extender_0_cntl_agent_rsp_fifo:out_endofpacket -> address_span_extender_0_cntl_agent:rf_sink_endofpacket
	wire          address_span_extender_0_cntl_agent_rdata_fifo_src_valid;                 // address_span_extender_0_cntl_agent:rdata_fifo_src_valid -> address_span_extender_0_cntl_agent_rdata_fifo:in_valid
	wire   [65:0] address_span_extender_0_cntl_agent_rdata_fifo_src_data;                  // address_span_extender_0_cntl_agent:rdata_fifo_src_data -> address_span_extender_0_cntl_agent_rdata_fifo:in_data
	wire          address_span_extender_0_cntl_agent_rdata_fifo_src_ready;                 // address_span_extender_0_cntl_agent_rdata_fifo:in_ready -> address_span_extender_0_cntl_agent:rdata_fifo_src_ready
	wire   [63:0] sys_description_rom_s1_agent_m0_readdata;                                // sys_description_rom_s1_translator:uav_readdata -> sys_description_rom_s1_agent:m0_readdata
	wire          sys_description_rom_s1_agent_m0_waitrequest;                             // sys_description_rom_s1_translator:uav_waitrequest -> sys_description_rom_s1_agent:m0_waitrequest
	wire          sys_description_rom_s1_agent_m0_debugaccess;                             // sys_description_rom_s1_agent:m0_debugaccess -> sys_description_rom_s1_translator:uav_debugaccess
	wire   [13:0] sys_description_rom_s1_agent_m0_address;                                 // sys_description_rom_s1_agent:m0_address -> sys_description_rom_s1_translator:uav_address
	wire    [7:0] sys_description_rom_s1_agent_m0_byteenable;                              // sys_description_rom_s1_agent:m0_byteenable -> sys_description_rom_s1_translator:uav_byteenable
	wire          sys_description_rom_s1_agent_m0_read;                                    // sys_description_rom_s1_agent:m0_read -> sys_description_rom_s1_translator:uav_read
	wire          sys_description_rom_s1_agent_m0_readdatavalid;                           // sys_description_rom_s1_translator:uav_readdatavalid -> sys_description_rom_s1_agent:m0_readdatavalid
	wire          sys_description_rom_s1_agent_m0_lock;                                    // sys_description_rom_s1_agent:m0_lock -> sys_description_rom_s1_translator:uav_lock
	wire   [63:0] sys_description_rom_s1_agent_m0_writedata;                               // sys_description_rom_s1_agent:m0_writedata -> sys_description_rom_s1_translator:uav_writedata
	wire          sys_description_rom_s1_agent_m0_write;                                   // sys_description_rom_s1_agent:m0_write -> sys_description_rom_s1_translator:uav_write
	wire    [3:0] sys_description_rom_s1_agent_m0_burstcount;                              // sys_description_rom_s1_agent:m0_burstcount -> sys_description_rom_s1_translator:uav_burstcount
	wire          sys_description_rom_s1_agent_rf_source_valid;                            // sys_description_rom_s1_agent:rf_source_valid -> sys_description_rom_s1_agent_rsp_fifo:in_valid
	wire  [125:0] sys_description_rom_s1_agent_rf_source_data;                             // sys_description_rom_s1_agent:rf_source_data -> sys_description_rom_s1_agent_rsp_fifo:in_data
	wire          sys_description_rom_s1_agent_rf_source_ready;                            // sys_description_rom_s1_agent_rsp_fifo:in_ready -> sys_description_rom_s1_agent:rf_source_ready
	wire          sys_description_rom_s1_agent_rf_source_startofpacket;                    // sys_description_rom_s1_agent:rf_source_startofpacket -> sys_description_rom_s1_agent_rsp_fifo:in_startofpacket
	wire          sys_description_rom_s1_agent_rf_source_endofpacket;                      // sys_description_rom_s1_agent:rf_source_endofpacket -> sys_description_rom_s1_agent_rsp_fifo:in_endofpacket
	wire          sys_description_rom_s1_agent_rsp_fifo_out_valid;                         // sys_description_rom_s1_agent_rsp_fifo:out_valid -> sys_description_rom_s1_agent:rf_sink_valid
	wire  [125:0] sys_description_rom_s1_agent_rsp_fifo_out_data;                          // sys_description_rom_s1_agent_rsp_fifo:out_data -> sys_description_rom_s1_agent:rf_sink_data
	wire          sys_description_rom_s1_agent_rsp_fifo_out_ready;                         // sys_description_rom_s1_agent:rf_sink_ready -> sys_description_rom_s1_agent_rsp_fifo:out_ready
	wire          sys_description_rom_s1_agent_rsp_fifo_out_startofpacket;                 // sys_description_rom_s1_agent_rsp_fifo:out_startofpacket -> sys_description_rom_s1_agent:rf_sink_startofpacket
	wire          sys_description_rom_s1_agent_rsp_fifo_out_endofpacket;                   // sys_description_rom_s1_agent_rsp_fifo:out_endofpacket -> sys_description_rom_s1_agent:rf_sink_endofpacket
	wire   [63:0] sw_reset_s_agent_m0_readdata;                                            // sw_reset_s_translator:uav_readdata -> sw_reset_s_agent:m0_readdata
	wire          sw_reset_s_agent_m0_waitrequest;                                         // sw_reset_s_translator:uav_waitrequest -> sw_reset_s_agent:m0_waitrequest
	wire          sw_reset_s_agent_m0_debugaccess;                                         // sw_reset_s_agent:m0_debugaccess -> sw_reset_s_translator:uav_debugaccess
	wire   [13:0] sw_reset_s_agent_m0_address;                                             // sw_reset_s_agent:m0_address -> sw_reset_s_translator:uav_address
	wire    [7:0] sw_reset_s_agent_m0_byteenable;                                          // sw_reset_s_agent:m0_byteenable -> sw_reset_s_translator:uav_byteenable
	wire          sw_reset_s_agent_m0_read;                                                // sw_reset_s_agent:m0_read -> sw_reset_s_translator:uav_read
	wire          sw_reset_s_agent_m0_readdatavalid;                                       // sw_reset_s_translator:uav_readdatavalid -> sw_reset_s_agent:m0_readdatavalid
	wire          sw_reset_s_agent_m0_lock;                                                // sw_reset_s_agent:m0_lock -> sw_reset_s_translator:uav_lock
	wire   [63:0] sw_reset_s_agent_m0_writedata;                                           // sw_reset_s_agent:m0_writedata -> sw_reset_s_translator:uav_writedata
	wire          sw_reset_s_agent_m0_write;                                               // sw_reset_s_agent:m0_write -> sw_reset_s_translator:uav_write
	wire    [3:0] sw_reset_s_agent_m0_burstcount;                                          // sw_reset_s_agent:m0_burstcount -> sw_reset_s_translator:uav_burstcount
	wire          sw_reset_s_agent_rf_source_valid;                                        // sw_reset_s_agent:rf_source_valid -> sw_reset_s_agent_rsp_fifo:in_valid
	wire  [125:0] sw_reset_s_agent_rf_source_data;                                         // sw_reset_s_agent:rf_source_data -> sw_reset_s_agent_rsp_fifo:in_data
	wire          sw_reset_s_agent_rf_source_ready;                                        // sw_reset_s_agent_rsp_fifo:in_ready -> sw_reset_s_agent:rf_source_ready
	wire          sw_reset_s_agent_rf_source_startofpacket;                                // sw_reset_s_agent:rf_source_startofpacket -> sw_reset_s_agent_rsp_fifo:in_startofpacket
	wire          sw_reset_s_agent_rf_source_endofpacket;                                  // sw_reset_s_agent:rf_source_endofpacket -> sw_reset_s_agent_rsp_fifo:in_endofpacket
	wire          sw_reset_s_agent_rsp_fifo_out_valid;                                     // sw_reset_s_agent_rsp_fifo:out_valid -> sw_reset_s_agent:rf_sink_valid
	wire  [125:0] sw_reset_s_agent_rsp_fifo_out_data;                                      // sw_reset_s_agent_rsp_fifo:out_data -> sw_reset_s_agent:rf_sink_data
	wire          sw_reset_s_agent_rsp_fifo_out_ready;                                     // sw_reset_s_agent:rf_sink_ready -> sw_reset_s_agent_rsp_fifo:out_ready
	wire          sw_reset_s_agent_rsp_fifo_out_startofpacket;                             // sw_reset_s_agent_rsp_fifo:out_startofpacket -> sw_reset_s_agent:rf_sink_startofpacket
	wire          sw_reset_s_agent_rsp_fifo_out_endofpacket;                               // sw_reset_s_agent_rsp_fifo:out_endofpacket -> sw_reset_s_agent:rf_sink_endofpacket
	wire   [31:0] mem_org_mode_s_agent_m0_readdata;                                        // mem_org_mode_s_translator:uav_readdata -> mem_org_mode_s_agent:m0_readdata
	wire          mem_org_mode_s_agent_m0_waitrequest;                                     // mem_org_mode_s_translator:uav_waitrequest -> mem_org_mode_s_agent:m0_waitrequest
	wire          mem_org_mode_s_agent_m0_debugaccess;                                     // mem_org_mode_s_agent:m0_debugaccess -> mem_org_mode_s_translator:uav_debugaccess
	wire   [13:0] mem_org_mode_s_agent_m0_address;                                         // mem_org_mode_s_agent:m0_address -> mem_org_mode_s_translator:uav_address
	wire    [3:0] mem_org_mode_s_agent_m0_byteenable;                                      // mem_org_mode_s_agent:m0_byteenable -> mem_org_mode_s_translator:uav_byteenable
	wire          mem_org_mode_s_agent_m0_read;                                            // mem_org_mode_s_agent:m0_read -> mem_org_mode_s_translator:uav_read
	wire          mem_org_mode_s_agent_m0_readdatavalid;                                   // mem_org_mode_s_translator:uav_readdatavalid -> mem_org_mode_s_agent:m0_readdatavalid
	wire          mem_org_mode_s_agent_m0_lock;                                            // mem_org_mode_s_agent:m0_lock -> mem_org_mode_s_translator:uav_lock
	wire   [31:0] mem_org_mode_s_agent_m0_writedata;                                       // mem_org_mode_s_agent:m0_writedata -> mem_org_mode_s_translator:uav_writedata
	wire          mem_org_mode_s_agent_m0_write;                                           // mem_org_mode_s_agent:m0_write -> mem_org_mode_s_translator:uav_write
	wire    [2:0] mem_org_mode_s_agent_m0_burstcount;                                      // mem_org_mode_s_agent:m0_burstcount -> mem_org_mode_s_translator:uav_burstcount
	wire          mem_org_mode_s_agent_rf_source_valid;                                    // mem_org_mode_s_agent:rf_source_valid -> mem_org_mode_s_agent_rsp_fifo:in_valid
	wire   [89:0] mem_org_mode_s_agent_rf_source_data;                                     // mem_org_mode_s_agent:rf_source_data -> mem_org_mode_s_agent_rsp_fifo:in_data
	wire          mem_org_mode_s_agent_rf_source_ready;                                    // mem_org_mode_s_agent_rsp_fifo:in_ready -> mem_org_mode_s_agent:rf_source_ready
	wire          mem_org_mode_s_agent_rf_source_startofpacket;                            // mem_org_mode_s_agent:rf_source_startofpacket -> mem_org_mode_s_agent_rsp_fifo:in_startofpacket
	wire          mem_org_mode_s_agent_rf_source_endofpacket;                              // mem_org_mode_s_agent:rf_source_endofpacket -> mem_org_mode_s_agent_rsp_fifo:in_endofpacket
	wire          mem_org_mode_s_agent_rsp_fifo_out_valid;                                 // mem_org_mode_s_agent_rsp_fifo:out_valid -> mem_org_mode_s_agent:rf_sink_valid
	wire   [89:0] mem_org_mode_s_agent_rsp_fifo_out_data;                                  // mem_org_mode_s_agent_rsp_fifo:out_data -> mem_org_mode_s_agent:rf_sink_data
	wire          mem_org_mode_s_agent_rsp_fifo_out_ready;                                 // mem_org_mode_s_agent:rf_sink_ready -> mem_org_mode_s_agent_rsp_fifo:out_ready
	wire          mem_org_mode_s_agent_rsp_fifo_out_startofpacket;                         // mem_org_mode_s_agent_rsp_fifo:out_startofpacket -> mem_org_mode_s_agent:rf_sink_startofpacket
	wire          mem_org_mode_s_agent_rsp_fifo_out_endofpacket;                           // mem_org_mode_s_agent_rsp_fifo:out_endofpacket -> mem_org_mode_s_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                   // cmd_mux_004:src_valid -> mem_org_mode_s_agent:cp_valid
	wire   [88:0] cmd_mux_004_src_data;                                                    // cmd_mux_004:src_data -> mem_org_mode_s_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                   // mem_org_mode_s_agent:cp_ready -> cmd_mux_004:src_ready
	wire    [6:0] cmd_mux_004_src_channel;                                                 // cmd_mux_004:src_channel -> mem_org_mode_s_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                           // cmd_mux_004:src_startofpacket -> mem_org_mode_s_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                             // cmd_mux_004:src_endofpacket -> mem_org_mode_s_agent:cp_endofpacket
	wire   [31:0] version_id_0_s_agent_m0_readdata;                                        // version_id_0_s_translator:uav_readdata -> version_id_0_s_agent:m0_readdata
	wire          version_id_0_s_agent_m0_waitrequest;                                     // version_id_0_s_translator:uav_waitrequest -> version_id_0_s_agent:m0_waitrequest
	wire          version_id_0_s_agent_m0_debugaccess;                                     // version_id_0_s_agent:m0_debugaccess -> version_id_0_s_translator:uav_debugaccess
	wire   [13:0] version_id_0_s_agent_m0_address;                                         // version_id_0_s_agent:m0_address -> version_id_0_s_translator:uav_address
	wire    [3:0] version_id_0_s_agent_m0_byteenable;                                      // version_id_0_s_agent:m0_byteenable -> version_id_0_s_translator:uav_byteenable
	wire          version_id_0_s_agent_m0_read;                                            // version_id_0_s_agent:m0_read -> version_id_0_s_translator:uav_read
	wire          version_id_0_s_agent_m0_readdatavalid;                                   // version_id_0_s_translator:uav_readdatavalid -> version_id_0_s_agent:m0_readdatavalid
	wire          version_id_0_s_agent_m0_lock;                                            // version_id_0_s_agent:m0_lock -> version_id_0_s_translator:uav_lock
	wire   [31:0] version_id_0_s_agent_m0_writedata;                                       // version_id_0_s_agent:m0_writedata -> version_id_0_s_translator:uav_writedata
	wire          version_id_0_s_agent_m0_write;                                           // version_id_0_s_agent:m0_write -> version_id_0_s_translator:uav_write
	wire    [2:0] version_id_0_s_agent_m0_burstcount;                                      // version_id_0_s_agent:m0_burstcount -> version_id_0_s_translator:uav_burstcount
	wire          version_id_0_s_agent_rf_source_valid;                                    // version_id_0_s_agent:rf_source_valid -> version_id_0_s_agent_rsp_fifo:in_valid
	wire   [89:0] version_id_0_s_agent_rf_source_data;                                     // version_id_0_s_agent:rf_source_data -> version_id_0_s_agent_rsp_fifo:in_data
	wire          version_id_0_s_agent_rf_source_ready;                                    // version_id_0_s_agent_rsp_fifo:in_ready -> version_id_0_s_agent:rf_source_ready
	wire          version_id_0_s_agent_rf_source_startofpacket;                            // version_id_0_s_agent:rf_source_startofpacket -> version_id_0_s_agent_rsp_fifo:in_startofpacket
	wire          version_id_0_s_agent_rf_source_endofpacket;                              // version_id_0_s_agent:rf_source_endofpacket -> version_id_0_s_agent_rsp_fifo:in_endofpacket
	wire          version_id_0_s_agent_rsp_fifo_out_valid;                                 // version_id_0_s_agent_rsp_fifo:out_valid -> version_id_0_s_agent:rf_sink_valid
	wire   [89:0] version_id_0_s_agent_rsp_fifo_out_data;                                  // version_id_0_s_agent_rsp_fifo:out_data -> version_id_0_s_agent:rf_sink_data
	wire          version_id_0_s_agent_rsp_fifo_out_ready;                                 // version_id_0_s_agent:rf_sink_ready -> version_id_0_s_agent_rsp_fifo:out_ready
	wire          version_id_0_s_agent_rsp_fifo_out_startofpacket;                         // version_id_0_s_agent_rsp_fifo:out_startofpacket -> version_id_0_s_agent:rf_sink_startofpacket
	wire          version_id_0_s_agent_rsp_fifo_out_endofpacket;                           // version_id_0_s_agent_rsp_fifo:out_endofpacket -> version_id_0_s_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                   // cmd_mux_005:src_valid -> version_id_0_s_agent:cp_valid
	wire   [88:0] cmd_mux_005_src_data;                                                    // cmd_mux_005:src_data -> version_id_0_s_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                   // version_id_0_s_agent:cp_ready -> cmd_mux_005:src_ready
	wire    [6:0] cmd_mux_005_src_channel;                                                 // cmd_mux_005:src_channel -> version_id_0_s_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                           // cmd_mux_005:src_startofpacket -> version_id_0_s_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                             // cmd_mux_005:src_endofpacket -> version_id_0_s_agent:cp_endofpacket
	wire   [31:0] irq_ena_0_s_agent_m0_readdata;                                           // irq_ena_0_s_translator:uav_readdata -> irq_ena_0_s_agent:m0_readdata
	wire          irq_ena_0_s_agent_m0_waitrequest;                                        // irq_ena_0_s_translator:uav_waitrequest -> irq_ena_0_s_agent:m0_waitrequest
	wire          irq_ena_0_s_agent_m0_debugaccess;                                        // irq_ena_0_s_agent:m0_debugaccess -> irq_ena_0_s_translator:uav_debugaccess
	wire   [13:0] irq_ena_0_s_agent_m0_address;                                            // irq_ena_0_s_agent:m0_address -> irq_ena_0_s_translator:uav_address
	wire    [3:0] irq_ena_0_s_agent_m0_byteenable;                                         // irq_ena_0_s_agent:m0_byteenable -> irq_ena_0_s_translator:uav_byteenable
	wire          irq_ena_0_s_agent_m0_read;                                               // irq_ena_0_s_agent:m0_read -> irq_ena_0_s_translator:uav_read
	wire          irq_ena_0_s_agent_m0_readdatavalid;                                      // irq_ena_0_s_translator:uav_readdatavalid -> irq_ena_0_s_agent:m0_readdatavalid
	wire          irq_ena_0_s_agent_m0_lock;                                               // irq_ena_0_s_agent:m0_lock -> irq_ena_0_s_translator:uav_lock
	wire   [31:0] irq_ena_0_s_agent_m0_writedata;                                          // irq_ena_0_s_agent:m0_writedata -> irq_ena_0_s_translator:uav_writedata
	wire          irq_ena_0_s_agent_m0_write;                                              // irq_ena_0_s_agent:m0_write -> irq_ena_0_s_translator:uav_write
	wire    [2:0] irq_ena_0_s_agent_m0_burstcount;                                         // irq_ena_0_s_agent:m0_burstcount -> irq_ena_0_s_translator:uav_burstcount
	wire          irq_ena_0_s_agent_rf_source_valid;                                       // irq_ena_0_s_agent:rf_source_valid -> irq_ena_0_s_agent_rsp_fifo:in_valid
	wire   [89:0] irq_ena_0_s_agent_rf_source_data;                                        // irq_ena_0_s_agent:rf_source_data -> irq_ena_0_s_agent_rsp_fifo:in_data
	wire          irq_ena_0_s_agent_rf_source_ready;                                       // irq_ena_0_s_agent_rsp_fifo:in_ready -> irq_ena_0_s_agent:rf_source_ready
	wire          irq_ena_0_s_agent_rf_source_startofpacket;                               // irq_ena_0_s_agent:rf_source_startofpacket -> irq_ena_0_s_agent_rsp_fifo:in_startofpacket
	wire          irq_ena_0_s_agent_rf_source_endofpacket;                                 // irq_ena_0_s_agent:rf_source_endofpacket -> irq_ena_0_s_agent_rsp_fifo:in_endofpacket
	wire          irq_ena_0_s_agent_rsp_fifo_out_valid;                                    // irq_ena_0_s_agent_rsp_fifo:out_valid -> irq_ena_0_s_agent:rf_sink_valid
	wire   [89:0] irq_ena_0_s_agent_rsp_fifo_out_data;                                     // irq_ena_0_s_agent_rsp_fifo:out_data -> irq_ena_0_s_agent:rf_sink_data
	wire          irq_ena_0_s_agent_rsp_fifo_out_ready;                                    // irq_ena_0_s_agent:rf_sink_ready -> irq_ena_0_s_agent_rsp_fifo:out_ready
	wire          irq_ena_0_s_agent_rsp_fifo_out_startofpacket;                            // irq_ena_0_s_agent_rsp_fifo:out_startofpacket -> irq_ena_0_s_agent:rf_sink_startofpacket
	wire          irq_ena_0_s_agent_rsp_fifo_out_endofpacket;                              // irq_ena_0_s_agent_rsp_fifo:out_endofpacket -> irq_ena_0_s_agent:rf_sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                   // cmd_mux_006:src_valid -> irq_ena_0_s_agent:cp_valid
	wire   [88:0] cmd_mux_006_src_data;                                                    // cmd_mux_006:src_data -> irq_ena_0_s_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                   // irq_ena_0_s_agent:cp_ready -> cmd_mux_006:src_ready
	wire    [6:0] cmd_mux_006_src_channel;                                                 // cmd_mux_006:src_channel -> irq_ena_0_s_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                           // cmd_mux_006:src_startofpacket -> irq_ena_0_s_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                             // cmd_mux_006:src_endofpacket -> irq_ena_0_s_agent:cp_endofpacket
	wire          kernel_cntrl_m0_agent_cp_valid;                                          // kernel_cntrl_m0_agent:cp_valid -> router:sink_valid
	wire   [88:0] kernel_cntrl_m0_agent_cp_data;                                           // kernel_cntrl_m0_agent:cp_data -> router:sink_data
	wire          kernel_cntrl_m0_agent_cp_ready;                                          // router:sink_ready -> kernel_cntrl_m0_agent:cp_ready
	wire          kernel_cntrl_m0_agent_cp_startofpacket;                                  // kernel_cntrl_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          kernel_cntrl_m0_agent_cp_endofpacket;                                    // kernel_cntrl_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          address_span_extender_0_windowed_slave_agent_rp_valid;                   // address_span_extender_0_windowed_slave_agent:rp_valid -> router_001:sink_valid
	wire   [88:0] address_span_extender_0_windowed_slave_agent_rp_data;                    // address_span_extender_0_windowed_slave_agent:rp_data -> router_001:sink_data
	wire          address_span_extender_0_windowed_slave_agent_rp_ready;                   // router_001:sink_ready -> address_span_extender_0_windowed_slave_agent:rp_ready
	wire          address_span_extender_0_windowed_slave_agent_rp_startofpacket;           // address_span_extender_0_windowed_slave_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          address_span_extender_0_windowed_slave_agent_rp_endofpacket;             // address_span_extender_0_windowed_slave_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                    // router_001:src_valid -> rsp_demux:sink_valid
	wire   [88:0] router_001_src_data;                                                     // router_001:src_data -> rsp_demux:sink_data
	wire          router_001_src_ready;                                                    // rsp_demux:sink_ready -> router_001:src_ready
	wire    [6:0] router_001_src_channel;                                                  // router_001:src_channel -> rsp_demux:sink_channel
	wire          router_001_src_startofpacket;                                            // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_001_src_endofpacket;                                              // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          address_span_extender_0_cntl_agent_rp_valid;                             // address_span_extender_0_cntl_agent:rp_valid -> router_002:sink_valid
	wire  [124:0] address_span_extender_0_cntl_agent_rp_data;                              // address_span_extender_0_cntl_agent:rp_data -> router_002:sink_data
	wire          address_span_extender_0_cntl_agent_rp_ready;                             // router_002:sink_ready -> address_span_extender_0_cntl_agent:rp_ready
	wire          address_span_extender_0_cntl_agent_rp_startofpacket;                     // address_span_extender_0_cntl_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          address_span_extender_0_cntl_agent_rp_endofpacket;                       // address_span_extender_0_cntl_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          sys_description_rom_s1_agent_rp_valid;                                   // sys_description_rom_s1_agent:rp_valid -> router_003:sink_valid
	wire  [124:0] sys_description_rom_s1_agent_rp_data;                                    // sys_description_rom_s1_agent:rp_data -> router_003:sink_data
	wire          sys_description_rom_s1_agent_rp_ready;                                   // router_003:sink_ready -> sys_description_rom_s1_agent:rp_ready
	wire          sys_description_rom_s1_agent_rp_startofpacket;                           // sys_description_rom_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          sys_description_rom_s1_agent_rp_endofpacket;                             // sys_description_rom_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          sw_reset_s_agent_rp_valid;                                               // sw_reset_s_agent:rp_valid -> router_004:sink_valid
	wire  [124:0] sw_reset_s_agent_rp_data;                                                // sw_reset_s_agent:rp_data -> router_004:sink_data
	wire          sw_reset_s_agent_rp_ready;                                               // router_004:sink_ready -> sw_reset_s_agent:rp_ready
	wire          sw_reset_s_agent_rp_startofpacket;                                       // sw_reset_s_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          sw_reset_s_agent_rp_endofpacket;                                         // sw_reset_s_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          mem_org_mode_s_agent_rp_valid;                                           // mem_org_mode_s_agent:rp_valid -> router_005:sink_valid
	wire   [88:0] mem_org_mode_s_agent_rp_data;                                            // mem_org_mode_s_agent:rp_data -> router_005:sink_data
	wire          mem_org_mode_s_agent_rp_ready;                                           // router_005:sink_ready -> mem_org_mode_s_agent:rp_ready
	wire          mem_org_mode_s_agent_rp_startofpacket;                                   // mem_org_mode_s_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          mem_org_mode_s_agent_rp_endofpacket;                                     // mem_org_mode_s_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                    // router_005:src_valid -> rsp_demux_004:sink_valid
	wire   [88:0] router_005_src_data;                                                     // router_005:src_data -> rsp_demux_004:sink_data
	wire          router_005_src_ready;                                                    // rsp_demux_004:sink_ready -> router_005:src_ready
	wire    [6:0] router_005_src_channel;                                                  // router_005:src_channel -> rsp_demux_004:sink_channel
	wire          router_005_src_startofpacket;                                            // router_005:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_005_src_endofpacket;                                              // router_005:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          version_id_0_s_agent_rp_valid;                                           // version_id_0_s_agent:rp_valid -> router_006:sink_valid
	wire   [88:0] version_id_0_s_agent_rp_data;                                            // version_id_0_s_agent:rp_data -> router_006:sink_data
	wire          version_id_0_s_agent_rp_ready;                                           // router_006:sink_ready -> version_id_0_s_agent:rp_ready
	wire          version_id_0_s_agent_rp_startofpacket;                                   // version_id_0_s_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          version_id_0_s_agent_rp_endofpacket;                                     // version_id_0_s_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                    // router_006:src_valid -> rsp_demux_005:sink_valid
	wire   [88:0] router_006_src_data;                                                     // router_006:src_data -> rsp_demux_005:sink_data
	wire          router_006_src_ready;                                                    // rsp_demux_005:sink_ready -> router_006:src_ready
	wire    [6:0] router_006_src_channel;                                                  // router_006:src_channel -> rsp_demux_005:sink_channel
	wire          router_006_src_startofpacket;                                            // router_006:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_006_src_endofpacket;                                              // router_006:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          irq_ena_0_s_agent_rp_valid;                                              // irq_ena_0_s_agent:rp_valid -> router_007:sink_valid
	wire   [88:0] irq_ena_0_s_agent_rp_data;                                               // irq_ena_0_s_agent:rp_data -> router_007:sink_data
	wire          irq_ena_0_s_agent_rp_ready;                                              // router_007:sink_ready -> irq_ena_0_s_agent:rp_ready
	wire          irq_ena_0_s_agent_rp_startofpacket;                                      // irq_ena_0_s_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          irq_ena_0_s_agent_rp_endofpacket;                                        // irq_ena_0_s_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                    // router_007:src_valid -> rsp_demux_006:sink_valid
	wire   [88:0] router_007_src_data;                                                     // router_007:src_data -> rsp_demux_006:sink_data
	wire          router_007_src_ready;                                                    // rsp_demux_006:sink_ready -> router_007:src_ready
	wire    [6:0] router_007_src_channel;                                                  // router_007:src_channel -> rsp_demux_006:sink_channel
	wire          router_007_src_startofpacket;                                            // router_007:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_007_src_endofpacket;                                              // router_007:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          router_src_valid;                                                        // router:src_valid -> kernel_cntrl_m0_limiter:cmd_sink_valid
	wire   [88:0] router_src_data;                                                         // router:src_data -> kernel_cntrl_m0_limiter:cmd_sink_data
	wire          router_src_ready;                                                        // kernel_cntrl_m0_limiter:cmd_sink_ready -> router:src_ready
	wire    [6:0] router_src_channel;                                                      // router:src_channel -> kernel_cntrl_m0_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                // router:src_startofpacket -> kernel_cntrl_m0_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                  // router:src_endofpacket -> kernel_cntrl_m0_limiter:cmd_sink_endofpacket
	wire   [88:0] kernel_cntrl_m0_limiter_cmd_src_data;                                    // kernel_cntrl_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          kernel_cntrl_m0_limiter_cmd_src_ready;                                   // cmd_demux:sink_ready -> kernel_cntrl_m0_limiter:cmd_src_ready
	wire    [6:0] kernel_cntrl_m0_limiter_cmd_src_channel;                                 // kernel_cntrl_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          kernel_cntrl_m0_limiter_cmd_src_startofpacket;                           // kernel_cntrl_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          kernel_cntrl_m0_limiter_cmd_src_endofpacket;                             // kernel_cntrl_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                       // rsp_mux:src_valid -> kernel_cntrl_m0_limiter:rsp_sink_valid
	wire   [88:0] rsp_mux_src_data;                                                        // rsp_mux:src_data -> kernel_cntrl_m0_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                       // kernel_cntrl_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [6:0] rsp_mux_src_channel;                                                     // rsp_mux:src_channel -> kernel_cntrl_m0_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                               // rsp_mux:src_startofpacket -> kernel_cntrl_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                 // rsp_mux:src_endofpacket -> kernel_cntrl_m0_limiter:rsp_sink_endofpacket
	wire          kernel_cntrl_m0_limiter_rsp_src_valid;                                   // kernel_cntrl_m0_limiter:rsp_src_valid -> kernel_cntrl_m0_agent:rp_valid
	wire   [88:0] kernel_cntrl_m0_limiter_rsp_src_data;                                    // kernel_cntrl_m0_limiter:rsp_src_data -> kernel_cntrl_m0_agent:rp_data
	wire          kernel_cntrl_m0_limiter_rsp_src_ready;                                   // kernel_cntrl_m0_agent:rp_ready -> kernel_cntrl_m0_limiter:rsp_src_ready
	wire    [6:0] kernel_cntrl_m0_limiter_rsp_src_channel;                                 // kernel_cntrl_m0_limiter:rsp_src_channel -> kernel_cntrl_m0_agent:rp_channel
	wire          kernel_cntrl_m0_limiter_rsp_src_startofpacket;                           // kernel_cntrl_m0_limiter:rsp_src_startofpacket -> kernel_cntrl_m0_agent:rp_startofpacket
	wire          kernel_cntrl_m0_limiter_rsp_src_endofpacket;                             // kernel_cntrl_m0_limiter:rsp_src_endofpacket -> kernel_cntrl_m0_agent:rp_endofpacket
	wire          cmd_demux_src2_valid;                                                    // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire   [88:0] cmd_demux_src2_data;                                                     // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                    // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [6:0] cmd_demux_src2_channel;                                                  // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                            // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                              // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                    // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire   [88:0] cmd_demux_src3_data;                                                     // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                    // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire    [6:0] cmd_demux_src3_channel;                                                  // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                            // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                              // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                    // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire   [88:0] cmd_demux_src4_data;                                                     // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                    // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire    [6:0] cmd_demux_src4_channel;                                                  // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                            // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                              // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                    // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire   [88:0] cmd_demux_src5_data;                                                     // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                    // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire    [6:0] cmd_demux_src5_channel;                                                  // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                            // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                              // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                    // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire   [88:0] cmd_demux_src6_data;                                                     // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                    // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire    [6:0] cmd_demux_src6_channel;                                                  // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                            // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                              // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          rsp_demux_002_src0_valid;                                                // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire   [88:0] rsp_demux_002_src0_data;                                                 // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [6:0] rsp_demux_002_src0_channel;                                              // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                        // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                          // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire   [88:0] rsp_demux_003_src0_data;                                                 // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire    [6:0] rsp_demux_003_src0_channel;                                              // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                        // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                          // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire   [88:0] rsp_demux_004_src0_data;                                                 // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire    [6:0] rsp_demux_004_src0_channel;                                              // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                        // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                          // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire   [88:0] rsp_demux_005_src0_data;                                                 // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire    [6:0] rsp_demux_005_src0_channel;                                              // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                        // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                          // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire   [88:0] rsp_demux_006_src0_data;                                                 // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire    [6:0] rsp_demux_006_src0_channel;                                              // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                        // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                          // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          cmd_mux_001_src_valid;                                                   // cmd_mux_001:src_valid -> address_span_extender_0_cntl_cmd_width_adapter:in_valid
	wire   [88:0] cmd_mux_001_src_data;                                                    // cmd_mux_001:src_data -> address_span_extender_0_cntl_cmd_width_adapter:in_data
	wire          cmd_mux_001_src_ready;                                                   // address_span_extender_0_cntl_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire    [6:0] cmd_mux_001_src_channel;                                                 // cmd_mux_001:src_channel -> address_span_extender_0_cntl_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_startofpacket;                                           // cmd_mux_001:src_startofpacket -> address_span_extender_0_cntl_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                             // cmd_mux_001:src_endofpacket -> address_span_extender_0_cntl_cmd_width_adapter:in_endofpacket
	wire          address_span_extender_0_cntl_cmd_width_adapter_src_valid;                // address_span_extender_0_cntl_cmd_width_adapter:out_valid -> address_span_extender_0_cntl_agent:cp_valid
	wire  [124:0] address_span_extender_0_cntl_cmd_width_adapter_src_data;                 // address_span_extender_0_cntl_cmd_width_adapter:out_data -> address_span_extender_0_cntl_agent:cp_data
	wire          address_span_extender_0_cntl_cmd_width_adapter_src_ready;                // address_span_extender_0_cntl_agent:cp_ready -> address_span_extender_0_cntl_cmd_width_adapter:out_ready
	wire    [6:0] address_span_extender_0_cntl_cmd_width_adapter_src_channel;              // address_span_extender_0_cntl_cmd_width_adapter:out_channel -> address_span_extender_0_cntl_agent:cp_channel
	wire          address_span_extender_0_cntl_cmd_width_adapter_src_startofpacket;        // address_span_extender_0_cntl_cmd_width_adapter:out_startofpacket -> address_span_extender_0_cntl_agent:cp_startofpacket
	wire          address_span_extender_0_cntl_cmd_width_adapter_src_endofpacket;          // address_span_extender_0_cntl_cmd_width_adapter:out_endofpacket -> address_span_extender_0_cntl_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                                   // cmd_mux_002:src_valid -> sys_description_rom_s1_cmd_width_adapter:in_valid
	wire   [88:0] cmd_mux_002_src_data;                                                    // cmd_mux_002:src_data -> sys_description_rom_s1_cmd_width_adapter:in_data
	wire          cmd_mux_002_src_ready;                                                   // sys_description_rom_s1_cmd_width_adapter:in_ready -> cmd_mux_002:src_ready
	wire    [6:0] cmd_mux_002_src_channel;                                                 // cmd_mux_002:src_channel -> sys_description_rom_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_002_src_startofpacket;                                           // cmd_mux_002:src_startofpacket -> sys_description_rom_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                             // cmd_mux_002:src_endofpacket -> sys_description_rom_s1_cmd_width_adapter:in_endofpacket
	wire          sys_description_rom_s1_cmd_width_adapter_src_valid;                      // sys_description_rom_s1_cmd_width_adapter:out_valid -> sys_description_rom_s1_agent:cp_valid
	wire  [124:0] sys_description_rom_s1_cmd_width_adapter_src_data;                       // sys_description_rom_s1_cmd_width_adapter:out_data -> sys_description_rom_s1_agent:cp_data
	wire          sys_description_rom_s1_cmd_width_adapter_src_ready;                      // sys_description_rom_s1_agent:cp_ready -> sys_description_rom_s1_cmd_width_adapter:out_ready
	wire    [6:0] sys_description_rom_s1_cmd_width_adapter_src_channel;                    // sys_description_rom_s1_cmd_width_adapter:out_channel -> sys_description_rom_s1_agent:cp_channel
	wire          sys_description_rom_s1_cmd_width_adapter_src_startofpacket;              // sys_description_rom_s1_cmd_width_adapter:out_startofpacket -> sys_description_rom_s1_agent:cp_startofpacket
	wire          sys_description_rom_s1_cmd_width_adapter_src_endofpacket;                // sys_description_rom_s1_cmd_width_adapter:out_endofpacket -> sys_description_rom_s1_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                   // cmd_mux_003:src_valid -> sw_reset_s_cmd_width_adapter:in_valid
	wire   [88:0] cmd_mux_003_src_data;                                                    // cmd_mux_003:src_data -> sw_reset_s_cmd_width_adapter:in_data
	wire          cmd_mux_003_src_ready;                                                   // sw_reset_s_cmd_width_adapter:in_ready -> cmd_mux_003:src_ready
	wire    [6:0] cmd_mux_003_src_channel;                                                 // cmd_mux_003:src_channel -> sw_reset_s_cmd_width_adapter:in_channel
	wire          cmd_mux_003_src_startofpacket;                                           // cmd_mux_003:src_startofpacket -> sw_reset_s_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                             // cmd_mux_003:src_endofpacket -> sw_reset_s_cmd_width_adapter:in_endofpacket
	wire          sw_reset_s_cmd_width_adapter_src_valid;                                  // sw_reset_s_cmd_width_adapter:out_valid -> sw_reset_s_agent:cp_valid
	wire  [124:0] sw_reset_s_cmd_width_adapter_src_data;                                   // sw_reset_s_cmd_width_adapter:out_data -> sw_reset_s_agent:cp_data
	wire          sw_reset_s_cmd_width_adapter_src_ready;                                  // sw_reset_s_agent:cp_ready -> sw_reset_s_cmd_width_adapter:out_ready
	wire    [6:0] sw_reset_s_cmd_width_adapter_src_channel;                                // sw_reset_s_cmd_width_adapter:out_channel -> sw_reset_s_agent:cp_channel
	wire          sw_reset_s_cmd_width_adapter_src_startofpacket;                          // sw_reset_s_cmd_width_adapter:out_startofpacket -> sw_reset_s_agent:cp_startofpacket
	wire          sw_reset_s_cmd_width_adapter_src_endofpacket;                            // sw_reset_s_cmd_width_adapter:out_endofpacket -> sw_reset_s_agent:cp_endofpacket
	wire          router_002_src_valid;                                                    // router_002:src_valid -> address_span_extender_0_cntl_rsp_width_adapter:in_valid
	wire  [124:0] router_002_src_data;                                                     // router_002:src_data -> address_span_extender_0_cntl_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                                    // address_span_extender_0_cntl_rsp_width_adapter:in_ready -> router_002:src_ready
	wire    [6:0] router_002_src_channel;                                                  // router_002:src_channel -> address_span_extender_0_cntl_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                            // router_002:src_startofpacket -> address_span_extender_0_cntl_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                              // router_002:src_endofpacket -> address_span_extender_0_cntl_rsp_width_adapter:in_endofpacket
	wire          address_span_extender_0_cntl_rsp_width_adapter_src_valid;                // address_span_extender_0_cntl_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire   [88:0] address_span_extender_0_cntl_rsp_width_adapter_src_data;                 // address_span_extender_0_cntl_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          address_span_extender_0_cntl_rsp_width_adapter_src_ready;                // rsp_demux_001:sink_ready -> address_span_extender_0_cntl_rsp_width_adapter:out_ready
	wire    [6:0] address_span_extender_0_cntl_rsp_width_adapter_src_channel;              // address_span_extender_0_cntl_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          address_span_extender_0_cntl_rsp_width_adapter_src_startofpacket;        // address_span_extender_0_cntl_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          address_span_extender_0_cntl_rsp_width_adapter_src_endofpacket;          // address_span_extender_0_cntl_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_003_src_valid;                                                    // router_003:src_valid -> sys_description_rom_s1_rsp_width_adapter:in_valid
	wire  [124:0] router_003_src_data;                                                     // router_003:src_data -> sys_description_rom_s1_rsp_width_adapter:in_data
	wire          router_003_src_ready;                                                    // sys_description_rom_s1_rsp_width_adapter:in_ready -> router_003:src_ready
	wire    [6:0] router_003_src_channel;                                                  // router_003:src_channel -> sys_description_rom_s1_rsp_width_adapter:in_channel
	wire          router_003_src_startofpacket;                                            // router_003:src_startofpacket -> sys_description_rom_s1_rsp_width_adapter:in_startofpacket
	wire          router_003_src_endofpacket;                                              // router_003:src_endofpacket -> sys_description_rom_s1_rsp_width_adapter:in_endofpacket
	wire          sys_description_rom_s1_rsp_width_adapter_src_valid;                      // sys_description_rom_s1_rsp_width_adapter:out_valid -> rsp_demux_002:sink_valid
	wire   [88:0] sys_description_rom_s1_rsp_width_adapter_src_data;                       // sys_description_rom_s1_rsp_width_adapter:out_data -> rsp_demux_002:sink_data
	wire          sys_description_rom_s1_rsp_width_adapter_src_ready;                      // rsp_demux_002:sink_ready -> sys_description_rom_s1_rsp_width_adapter:out_ready
	wire    [6:0] sys_description_rom_s1_rsp_width_adapter_src_channel;                    // sys_description_rom_s1_rsp_width_adapter:out_channel -> rsp_demux_002:sink_channel
	wire          sys_description_rom_s1_rsp_width_adapter_src_startofpacket;              // sys_description_rom_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          sys_description_rom_s1_rsp_width_adapter_src_endofpacket;                // sys_description_rom_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_004_src_valid;                                                    // router_004:src_valid -> sw_reset_s_rsp_width_adapter:in_valid
	wire  [124:0] router_004_src_data;                                                     // router_004:src_data -> sw_reset_s_rsp_width_adapter:in_data
	wire          router_004_src_ready;                                                    // sw_reset_s_rsp_width_adapter:in_ready -> router_004:src_ready
	wire    [6:0] router_004_src_channel;                                                  // router_004:src_channel -> sw_reset_s_rsp_width_adapter:in_channel
	wire          router_004_src_startofpacket;                                            // router_004:src_startofpacket -> sw_reset_s_rsp_width_adapter:in_startofpacket
	wire          router_004_src_endofpacket;                                              // router_004:src_endofpacket -> sw_reset_s_rsp_width_adapter:in_endofpacket
	wire          sw_reset_s_rsp_width_adapter_src_valid;                                  // sw_reset_s_rsp_width_adapter:out_valid -> rsp_demux_003:sink_valid
	wire   [88:0] sw_reset_s_rsp_width_adapter_src_data;                                   // sw_reset_s_rsp_width_adapter:out_data -> rsp_demux_003:sink_data
	wire          sw_reset_s_rsp_width_adapter_src_ready;                                  // rsp_demux_003:sink_ready -> sw_reset_s_rsp_width_adapter:out_ready
	wire    [6:0] sw_reset_s_rsp_width_adapter_src_channel;                                // sw_reset_s_rsp_width_adapter:out_channel -> rsp_demux_003:sink_channel
	wire          sw_reset_s_rsp_width_adapter_src_startofpacket;                          // sw_reset_s_rsp_width_adapter:out_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          sw_reset_s_rsp_width_adapter_src_endofpacket;                            // sw_reset_s_rsp_width_adapter:out_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                    // cmd_demux:src0_valid -> crosser:in_valid
	wire   [88:0] cmd_demux_src0_data;                                                     // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                                    // crosser:in_ready -> cmd_demux:src0_ready
	wire    [6:0] cmd_demux_src0_channel;                                                  // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                                            // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                              // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                       // crosser:out_valid -> cmd_mux:sink0_valid
	wire   [88:0] crosser_out_data;                                                        // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                                       // cmd_mux:sink0_ready -> crosser:out_ready
	wire    [6:0] crosser_out_channel;                                                     // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                               // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                 // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                    // cmd_demux:src1_valid -> crosser_001:in_valid
	wire   [88:0] cmd_demux_src1_data;                                                     // cmd_demux:src1_data -> crosser_001:in_data
	wire          cmd_demux_src1_ready;                                                    // crosser_001:in_ready -> cmd_demux:src1_ready
	wire    [6:0] cmd_demux_src1_channel;                                                  // cmd_demux:src1_channel -> crosser_001:in_channel
	wire          cmd_demux_src1_startofpacket;                                            // cmd_demux:src1_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                              // cmd_demux:src1_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                   // crosser_001:out_valid -> cmd_mux_001:sink0_valid
	wire   [88:0] crosser_001_out_data;                                                    // crosser_001:out_data -> cmd_mux_001:sink0_data
	wire          crosser_001_out_ready;                                                   // cmd_mux_001:sink0_ready -> crosser_001:out_ready
	wire    [6:0] crosser_001_out_channel;                                                 // crosser_001:out_channel -> cmd_mux_001:sink0_channel
	wire          crosser_001_out_startofpacket;                                           // crosser_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                             // crosser_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                    // rsp_demux:src0_valid -> crosser_002:in_valid
	wire   [88:0] rsp_demux_src0_data;                                                     // rsp_demux:src0_data -> crosser_002:in_data
	wire          rsp_demux_src0_ready;                                                    // crosser_002:in_ready -> rsp_demux:src0_ready
	wire    [6:0] rsp_demux_src0_channel;                                                  // rsp_demux:src0_channel -> crosser_002:in_channel
	wire          rsp_demux_src0_startofpacket;                                            // rsp_demux:src0_startofpacket -> crosser_002:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                              // rsp_demux:src0_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                   // crosser_002:out_valid -> rsp_mux:sink0_valid
	wire   [88:0] crosser_002_out_data;                                                    // crosser_002:out_data -> rsp_mux:sink0_data
	wire          crosser_002_out_ready;                                                   // rsp_mux:sink0_ready -> crosser_002:out_ready
	wire    [6:0] crosser_002_out_channel;                                                 // crosser_002:out_channel -> rsp_mux:sink0_channel
	wire          crosser_002_out_startofpacket;                                           // crosser_002:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_002_out_endofpacket;                                             // crosser_002:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                // rsp_demux_001:src0_valid -> crosser_003:in_valid
	wire   [88:0] rsp_demux_001_src0_data;                                                 // rsp_demux_001:src0_data -> crosser_003:in_data
	wire          rsp_demux_001_src0_ready;                                                // crosser_003:in_ready -> rsp_demux_001:src0_ready
	wire    [6:0] rsp_demux_001_src0_channel;                                              // rsp_demux_001:src0_channel -> crosser_003:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                        // rsp_demux_001:src0_startofpacket -> crosser_003:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                          // rsp_demux_001:src0_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                   // crosser_003:out_valid -> rsp_mux:sink1_valid
	wire   [88:0] crosser_003_out_data;                                                    // crosser_003:out_data -> rsp_mux:sink1_data
	wire          crosser_003_out_ready;                                                   // rsp_mux:sink1_ready -> crosser_003:out_ready
	wire    [6:0] crosser_003_out_channel;                                                 // crosser_003:out_channel -> rsp_mux:sink1_channel
	wire          crosser_003_out_startofpacket;                                           // crosser_003:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          crosser_003_out_endofpacket;                                             // crosser_003:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire    [6:0] kernel_cntrl_m0_limiter_cmd_valid_data;                                  // kernel_cntrl_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire          address_span_extender_0_windowed_slave_agent_rdata_fifo_out_valid;       // address_span_extender_0_windowed_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] address_span_extender_0_windowed_slave_agent_rdata_fifo_out_data;        // address_span_extender_0_windowed_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          address_span_extender_0_windowed_slave_agent_rdata_fifo_out_ready;       // avalon_st_adapter:in_0_ready -> address_span_extender_0_windowed_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                           // avalon_st_adapter:out_0_valid -> address_span_extender_0_windowed_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                            // avalon_st_adapter:out_0_data -> address_span_extender_0_windowed_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                           // address_span_extender_0_windowed_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                           // avalon_st_adapter:out_0_error -> address_span_extender_0_windowed_slave_agent:rdata_fifo_sink_error
	wire          address_span_extender_0_cntl_agent_rdata_fifo_out_valid;                 // address_span_extender_0_cntl_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [65:0] address_span_extender_0_cntl_agent_rdata_fifo_out_data;                  // address_span_extender_0_cntl_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          address_span_extender_0_cntl_agent_rdata_fifo_out_ready;                 // avalon_st_adapter_001:in_0_ready -> address_span_extender_0_cntl_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                       // avalon_st_adapter_001:out_0_valid -> address_span_extender_0_cntl_agent:rdata_fifo_sink_valid
	wire   [65:0] avalon_st_adapter_001_out_0_data;                                        // avalon_st_adapter_001:out_0_data -> address_span_extender_0_cntl_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                       // address_span_extender_0_cntl_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                       // avalon_st_adapter_001:out_0_error -> address_span_extender_0_cntl_agent:rdata_fifo_sink_error
	wire          sys_description_rom_s1_agent_rdata_fifo_src_valid;                       // sys_description_rom_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [65:0] sys_description_rom_s1_agent_rdata_fifo_src_data;                        // sys_description_rom_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          sys_description_rom_s1_agent_rdata_fifo_src_ready;                       // avalon_st_adapter_002:in_0_ready -> sys_description_rom_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                       // avalon_st_adapter_002:out_0_valid -> sys_description_rom_s1_agent:rdata_fifo_sink_valid
	wire   [65:0] avalon_st_adapter_002_out_0_data;                                        // avalon_st_adapter_002:out_0_data -> sys_description_rom_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                       // sys_description_rom_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                       // avalon_st_adapter_002:out_0_error -> sys_description_rom_s1_agent:rdata_fifo_sink_error
	wire          sw_reset_s_agent_rdata_fifo_src_valid;                                   // sw_reset_s_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [65:0] sw_reset_s_agent_rdata_fifo_src_data;                                    // sw_reset_s_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          sw_reset_s_agent_rdata_fifo_src_ready;                                   // avalon_st_adapter_003:in_0_ready -> sw_reset_s_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                       // avalon_st_adapter_003:out_0_valid -> sw_reset_s_agent:rdata_fifo_sink_valid
	wire   [65:0] avalon_st_adapter_003_out_0_data;                                        // avalon_st_adapter_003:out_0_data -> sw_reset_s_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                       // sw_reset_s_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                       // avalon_st_adapter_003:out_0_error -> sw_reset_s_agent:rdata_fifo_sink_error
	wire          mem_org_mode_s_agent_rdata_fifo_src_valid;                               // mem_org_mode_s_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] mem_org_mode_s_agent_rdata_fifo_src_data;                                // mem_org_mode_s_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          mem_org_mode_s_agent_rdata_fifo_src_ready;                               // avalon_st_adapter_004:in_0_ready -> mem_org_mode_s_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                       // avalon_st_adapter_004:out_0_valid -> mem_org_mode_s_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                        // avalon_st_adapter_004:out_0_data -> mem_org_mode_s_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                       // mem_org_mode_s_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                       // avalon_st_adapter_004:out_0_error -> mem_org_mode_s_agent:rdata_fifo_sink_error
	wire          version_id_0_s_agent_rdata_fifo_src_valid;                               // version_id_0_s_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] version_id_0_s_agent_rdata_fifo_src_data;                                // version_id_0_s_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          version_id_0_s_agent_rdata_fifo_src_ready;                               // avalon_st_adapter_005:in_0_ready -> version_id_0_s_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                       // avalon_st_adapter_005:out_0_valid -> version_id_0_s_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                        // avalon_st_adapter_005:out_0_data -> version_id_0_s_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                       // version_id_0_s_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                       // avalon_st_adapter_005:out_0_error -> version_id_0_s_agent:rdata_fifo_sink_error
	wire          irq_ena_0_s_agent_rdata_fifo_src_valid;                                  // irq_ena_0_s_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] irq_ena_0_s_agent_rdata_fifo_src_data;                                   // irq_ena_0_s_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          irq_ena_0_s_agent_rdata_fifo_src_ready;                                  // avalon_st_adapter_006:in_0_ready -> irq_ena_0_s_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                       // avalon_st_adapter_006:out_0_valid -> irq_ena_0_s_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                        // avalon_st_adapter_006:out_0_data -> irq_ena_0_s_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                       // irq_ena_0_s_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                       // avalon_st_adapter_006:out_0_error -> irq_ena_0_s_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (14),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (14),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) kernel_cntrl_m0_translator (
		.clk                    (clk_reset_clk_clk),                                                  //                       clk.clk
		.reset                  (kernel_cntrl_reset_reset_bridge_in_reset_reset),                     //                     reset.reset
		.uav_address            (kernel_cntrl_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (kernel_cntrl_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (kernel_cntrl_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (kernel_cntrl_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (kernel_cntrl_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (kernel_cntrl_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (kernel_cntrl_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (kernel_cntrl_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (kernel_cntrl_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (kernel_cntrl_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (kernel_cntrl_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (kernel_cntrl_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (kernel_cntrl_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (kernel_cntrl_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (kernel_cntrl_m0_byteenable),                                         //                          .byteenable
		.av_read                (kernel_cntrl_m0_read),                                               //                          .read
		.av_readdata            (kernel_cntrl_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (kernel_cntrl_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (kernel_cntrl_m0_write),                                              //                          .write
		.av_writedata           (kernel_cntrl_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (kernel_cntrl_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                               //               (terminated)
		.av_lock                (1'b0),                                                               //               (terminated)
		.uav_clken              (),                                                                   //               (terminated)
		.av_clken               (1'b1),                                                               //               (terminated)
		.uav_response           (2'b00),                                                              //               (terminated)
		.av_response            (),                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                    //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) address_span_extender_0_windowed_slave_translator (
		.clk                    (kernel_clk_out_clk_clk),                                        //                      clk.clk
		.reset                  (address_span_extender_0_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (address_span_extender_0_windowed_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (address_span_extender_0_windowed_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (address_span_extender_0_windowed_slave_agent_m0_read),          //                         .read
		.uav_write              (address_span_extender_0_windowed_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (address_span_extender_0_windowed_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (address_span_extender_0_windowed_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (address_span_extender_0_windowed_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (address_span_extender_0_windowed_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (address_span_extender_0_windowed_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (address_span_extender_0_windowed_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (address_span_extender_0_windowed_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (address_span_extender_0_windowed_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (address_span_extender_0_windowed_slave_write),                  //                         .write
		.av_read                (address_span_extender_0_windowed_slave_read),                   //                         .read
		.av_readdata            (address_span_extender_0_windowed_slave_readdata),               //                         .readdata
		.av_writedata           (address_span_extender_0_windowed_slave_writedata),              //                         .writedata
		.av_burstcount          (address_span_extender_0_windowed_slave_burstcount),             //                         .burstcount
		.av_byteenable          (address_span_extender_0_windowed_slave_byteenable),             //                         .byteenable
		.av_readdatavalid       (address_span_extender_0_windowed_slave_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (address_span_extender_0_windowed_slave_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                              //              (terminated)
		.av_beginbursttransfer  (),                                                              //              (terminated)
		.av_writebyteenable     (),                                                              //              (terminated)
		.av_lock                (),                                                              //              (terminated)
		.av_chipselect          (),                                                              //              (terminated)
		.av_clken               (),                                                              //              (terminated)
		.uav_clken              (1'b0),                                                          //              (terminated)
		.av_debugaccess         (),                                                              //              (terminated)
		.av_outputenable        (),                                                              //              (terminated)
		.uav_response           (),                                                              //              (terminated)
		.av_response            (2'b00),                                                         //              (terminated)
		.uav_writeresponsevalid (),                                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) address_span_extender_0_cntl_translator (
		.clk                    (kernel_clk_out_clk_clk),                                    //                      clk.clk
		.reset                  (address_span_extender_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (address_span_extender_0_cntl_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (address_span_extender_0_cntl_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (address_span_extender_0_cntl_agent_m0_read),                //                         .read
		.uav_write              (address_span_extender_0_cntl_agent_m0_write),               //                         .write
		.uav_waitrequest        (address_span_extender_0_cntl_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (address_span_extender_0_cntl_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (address_span_extender_0_cntl_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (address_span_extender_0_cntl_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (address_span_extender_0_cntl_agent_m0_writedata),           //                         .writedata
		.uav_lock               (address_span_extender_0_cntl_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (address_span_extender_0_cntl_agent_m0_debugaccess),         //                         .debugaccess
		.av_write               (address_span_extender_0_cntl_write),                        //      avalon_anti_slave_0.write
		.av_read                (address_span_extender_0_cntl_read),                         //                         .read
		.av_readdata            (address_span_extender_0_cntl_readdata),                     //                         .readdata
		.av_writedata           (address_span_extender_0_cntl_writedata),                    //                         .writedata
		.av_byteenable          (address_span_extender_0_cntl_byteenable),                   //                         .byteenable
		.av_address             (),                                                          //              (terminated)
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_burstcount          (),                                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                                      //              (terminated)
		.av_waitrequest         (1'b0),                                                      //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.av_chipselect          (),                                                          //              (terminated)
		.av_clken               (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_debugaccess         (),                                                          //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (2),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sys_description_rom_s1_translator (
		.clk                    (clk_reset_clk_clk),                              //                      clk.clk
		.reset                  (kernel_cntrl_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sys_description_rom_s1_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (sys_description_rom_s1_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (sys_description_rom_s1_agent_m0_read),           //                         .read
		.uav_write              (sys_description_rom_s1_agent_m0_write),          //                         .write
		.uav_waitrequest        (sys_description_rom_s1_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (sys_description_rom_s1_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (sys_description_rom_s1_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (sys_description_rom_s1_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (sys_description_rom_s1_agent_m0_writedata),      //                         .writedata
		.uav_lock               (sys_description_rom_s1_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (sys_description_rom_s1_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (sys_description_rom_s1_address),                 //      avalon_anti_slave_0.address
		.av_write               (sys_description_rom_s1_write),                   //                         .write
		.av_readdata            (sys_description_rom_s1_readdata),                //                         .readdata
		.av_writedata           (sys_description_rom_s1_writedata),               //                         .writedata
		.av_byteenable          (sys_description_rom_s1_byteenable),              //                         .byteenable
		.av_chipselect          (sys_description_rom_s1_chipselect),              //                         .chipselect
		.av_clken               (sys_description_rom_s1_clken),                   //                         .clken
		.av_debugaccess         (sys_description_rom_s1_debugaccess),             //                         .debugaccess
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sw_reset_s_translator (
		.clk                    (clk_reset_clk_clk),                              //                      clk.clk
		.reset                  (sw_reset_clk_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sw_reset_s_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (sw_reset_s_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (sw_reset_s_agent_m0_read),                       //                         .read
		.uav_write              (sw_reset_s_agent_m0_write),                      //                         .write
		.uav_waitrequest        (sw_reset_s_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (sw_reset_s_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (sw_reset_s_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (sw_reset_s_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (sw_reset_s_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (sw_reset_s_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (sw_reset_s_agent_m0_debugaccess),                //                         .debugaccess
		.av_write               (sw_reset_s_write),                               //      avalon_anti_slave_0.write
		.av_read                (sw_reset_s_read),                                //                         .read
		.av_readdata            (sw_reset_s_readdata),                            //                         .readdata
		.av_writedata           (sw_reset_s_writedata),                           //                         .writedata
		.av_byteenable          (sw_reset_s_byteenable),                          //                         .byteenable
		.av_waitrequest         (sw_reset_s_waitrequest),                         //                         .waitrequest
		.av_address             (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mem_org_mode_s_translator (
		.clk                    (clk_reset_clk_clk),                              //                      clk.clk
		.reset                  (kernel_cntrl_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (mem_org_mode_s_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (mem_org_mode_s_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (mem_org_mode_s_agent_m0_read),                   //                         .read
		.uav_write              (mem_org_mode_s_agent_m0_write),                  //                         .write
		.uav_waitrequest        (mem_org_mode_s_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (mem_org_mode_s_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (mem_org_mode_s_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (mem_org_mode_s_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (mem_org_mode_s_agent_m0_writedata),              //                         .writedata
		.uav_lock               (mem_org_mode_s_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (mem_org_mode_s_agent_m0_debugaccess),            //                         .debugaccess
		.av_write               (mem_org_mode_s_write),                           //      avalon_anti_slave_0.write
		.av_read                (mem_org_mode_s_read),                            //                         .read
		.av_readdata            (mem_org_mode_s_readdata),                        //                         .readdata
		.av_writedata           (mem_org_mode_s_writedata),                       //                         .writedata
		.av_waitrequest         (mem_org_mode_s_waitrequest),                     //                         .waitrequest
		.av_address             (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) version_id_0_s_translator (
		.clk                    (clk_reset_clk_clk),                              //                      clk.clk
		.reset                  (kernel_cntrl_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (version_id_0_s_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (version_id_0_s_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (version_id_0_s_agent_m0_read),                   //                         .read
		.uav_write              (version_id_0_s_agent_m0_write),                  //                         .write
		.uav_waitrequest        (version_id_0_s_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (version_id_0_s_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (version_id_0_s_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (version_id_0_s_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (version_id_0_s_agent_m0_writedata),              //                         .writedata
		.uav_lock               (version_id_0_s_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (version_id_0_s_agent_m0_debugaccess),            //                         .debugaccess
		.av_read                (version_id_0_s_read),                            //      avalon_anti_slave_0.read
		.av_readdata            (version_id_0_s_readdata),                        //                         .readdata
		.av_address             (),                                               //              (terminated)
		.av_write               (),                                               //              (terminated)
		.av_writedata           (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) irq_ena_0_s_translator (
		.clk                    (clk_reset_clk_clk),                              //                      clk.clk
		.reset                  (kernel_cntrl_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (irq_ena_0_s_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (irq_ena_0_s_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (irq_ena_0_s_agent_m0_read),                      //                         .read
		.uav_write              (irq_ena_0_s_agent_m0_write),                     //                         .write
		.uav_waitrequest        (irq_ena_0_s_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (irq_ena_0_s_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (irq_ena_0_s_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (irq_ena_0_s_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (irq_ena_0_s_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (irq_ena_0_s_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (irq_ena_0_s_agent_m0_debugaccess),               //                         .debugaccess
		.av_write               (irq_ena_0_s_write),                              //      avalon_anti_slave_0.write
		.av_read                (irq_ena_0_s_read),                               //                         .read
		.av_readdata            (irq_ena_0_s_readdata),                           //                         .readdata
		.av_writedata           (irq_ena_0_s_writedata),                          //                         .writedata
		.av_byteenable          (irq_ena_0_s_byteenable),                         //                         .byteenable
		.av_waitrequest         (irq_ena_0_s_waitrequest),                        //                         .waitrequest
		.av_address             (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (88),
		.PKT_ORI_BURST_SIZE_L      (86),
		.PKT_RESPONSE_STATUS_H     (85),
		.PKT_RESPONSE_STATUS_L     (84),
		.PKT_QOS_H                 (69),
		.PKT_QOS_L                 (69),
		.PKT_DATA_SIDEBAND_H       (67),
		.PKT_DATA_SIDEBAND_L       (67),
		.PKT_ADDR_SIDEBAND_H       (66),
		.PKT_ADDR_SIDEBAND_L       (66),
		.PKT_BURST_TYPE_H          (65),
		.PKT_BURST_TYPE_L          (64),
		.PKT_CACHE_H               (83),
		.PKT_CACHE_L               (80),
		.PKT_THREAD_ID_H           (76),
		.PKT_THREAD_ID_L           (76),
		.PKT_BURST_SIZE_H          (63),
		.PKT_BURST_SIZE_L          (61),
		.PKT_TRANS_EXCLUSIVE       (55),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (68),
		.PKT_PROTECTION_H          (79),
		.PKT_PROTECTION_L          (77),
		.PKT_BURSTWRAP_H           (60),
		.PKT_BURSTWRAP_L           (60),
		.PKT_BYTE_CNT_H            (59),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (70),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (73),
		.ST_DATA_W                 (89),
		.ST_CHANNEL_W              (7),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) kernel_cntrl_m0_agent (
		.clk                   (clk_reset_clk_clk),                                                  //       clk.clk
		.reset                 (kernel_cntrl_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.av_address            (kernel_cntrl_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (kernel_cntrl_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (kernel_cntrl_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (kernel_cntrl_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (kernel_cntrl_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (kernel_cntrl_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (kernel_cntrl_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (kernel_cntrl_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (kernel_cntrl_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (kernel_cntrl_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (kernel_cntrl_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (kernel_cntrl_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (kernel_cntrl_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (kernel_cntrl_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (kernel_cntrl_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (kernel_cntrl_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (kernel_cntrl_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (kernel_cntrl_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (kernel_cntrl_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (kernel_cntrl_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (kernel_cntrl_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (kernel_cntrl_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (88),
		.PKT_ORI_BURST_SIZE_L      (86),
		.PKT_RESPONSE_STATUS_H     (85),
		.PKT_RESPONSE_STATUS_L     (84),
		.PKT_BURST_SIZE_H          (63),
		.PKT_BURST_SIZE_L          (61),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (68),
		.PKT_PROTECTION_H          (79),
		.PKT_PROTECTION_L          (77),
		.PKT_BURSTWRAP_H           (60),
		.PKT_BURSTWRAP_L           (60),
		.PKT_BYTE_CNT_H            (59),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (70),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (73),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (89),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) address_span_extender_0_windowed_slave_agent (
		.clk                     (kernel_clk_out_clk_clk),                                                  //             clk.clk
		.reset                   (address_span_extender_0_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (address_span_extender_0_windowed_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (address_span_extender_0_windowed_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (address_span_extender_0_windowed_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (address_span_extender_0_windowed_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (address_span_extender_0_windowed_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (address_span_extender_0_windowed_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (address_span_extender_0_windowed_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (address_span_extender_0_windowed_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (address_span_extender_0_windowed_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (address_span_extender_0_windowed_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (address_span_extender_0_windowed_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (address_span_extender_0_windowed_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (address_span_extender_0_windowed_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (address_span_extender_0_windowed_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (address_span_extender_0_windowed_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (address_span_extender_0_windowed_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                                       //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                                       //                .valid
		.cp_data                 (cmd_mux_src_data),                                                        //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                                 //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                                     //                .channel
		.rf_sink_ready           (address_span_extender_0_windowed_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (address_span_extender_0_windowed_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (address_span_extender_0_windowed_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (address_span_extender_0_windowed_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (address_span_extender_0_windowed_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (address_span_extender_0_windowed_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (address_span_extender_0_windowed_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (address_span_extender_0_windowed_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (address_span_extender_0_windowed_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (address_span_extender_0_windowed_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                           //                .error
		.rdata_fifo_src_ready    (address_span_extender_0_windowed_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (address_span_extender_0_windowed_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (address_span_extender_0_windowed_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (90),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) address_span_extender_0_windowed_slave_agent_rsp_fifo (
		.clk               (kernel_clk_out_clk_clk),                                                  //       clk.clk
		.reset             (address_span_extender_0_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (address_span_extender_0_windowed_slave_agent_rf_source_data),             //        in.data
		.in_valid          (address_span_extender_0_windowed_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (address_span_extender_0_windowed_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (address_span_extender_0_windowed_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (address_span_extender_0_windowed_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (address_span_extender_0_windowed_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (address_span_extender_0_windowed_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (address_span_extender_0_windowed_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (address_span_extender_0_windowed_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (address_span_extender_0_windowed_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated)
		.csr_read          (1'b0),                                                                    // (terminated)
		.csr_write         (1'b0),                                                                    // (terminated)
		.csr_readdata      (),                                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated)
		.almost_full_data  (),                                                                        // (terminated)
		.almost_empty_data (),                                                                        // (terminated)
		.in_empty          (1'b0),                                                                    // (terminated)
		.out_empty         (),                                                                        // (terminated)
		.in_error          (1'b0),                                                                    // (terminated)
		.out_error         (),                                                                        // (terminated)
		.in_channel        (1'b0),                                                                    // (terminated)
		.out_channel       ()                                                                         // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) address_span_extender_0_windowed_slave_agent_rdata_fifo (
		.clk               (kernel_clk_out_clk_clk),                                            //       clk.clk
		.reset             (address_span_extender_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (address_span_extender_0_windowed_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (address_span_extender_0_windowed_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (address_span_extender_0_windowed_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (address_span_extender_0_windowed_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (address_span_extender_0_windowed_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (address_span_extender_0_windowed_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_startofpacket  (1'b0),                                                              // (terminated)
		.in_endofpacket    (1'b0),                                                              // (terminated)
		.out_startofpacket (),                                                                  // (terminated)
		.out_endofpacket   (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (99),
		.PKT_BURST_SIZE_L          (97),
		.PKT_TRANS_LOCK            (90),
		.PKT_BEGIN_BURST           (104),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (96),
		.PKT_BURSTWRAP_L           (96),
		.PKT_BYTE_CNT_H            (95),
		.PKT_BYTE_CNT_L            (92),
		.PKT_ADDR_H                (85),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (86),
		.PKT_TRANS_POSTED          (87),
		.PKT_TRANS_WRITE           (88),
		.PKT_TRANS_READ            (89),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (108),
		.PKT_SRC_ID_L              (106),
		.PKT_DEST_ID_H             (111),
		.PKT_DEST_ID_L             (109),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) address_span_extender_0_cntl_agent (
		.clk                     (kernel_clk_out_clk_clk),                                           //             clk.clk
		.reset                   (address_span_extender_0_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (address_span_extender_0_cntl_agent_m0_address),                    //              m0.address
		.m0_burstcount           (address_span_extender_0_cntl_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (address_span_extender_0_cntl_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (address_span_extender_0_cntl_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (address_span_extender_0_cntl_agent_m0_lock),                       //                .lock
		.m0_readdata             (address_span_extender_0_cntl_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (address_span_extender_0_cntl_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (address_span_extender_0_cntl_agent_m0_read),                       //                .read
		.m0_waitrequest          (address_span_extender_0_cntl_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (address_span_extender_0_cntl_agent_m0_writedata),                  //                .writedata
		.m0_write                (address_span_extender_0_cntl_agent_m0_write),                      //                .write
		.rp_endofpacket          (address_span_extender_0_cntl_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (address_span_extender_0_cntl_agent_rp_ready),                      //                .ready
		.rp_valid                (address_span_extender_0_cntl_agent_rp_valid),                      //                .valid
		.rp_data                 (address_span_extender_0_cntl_agent_rp_data),                       //                .data
		.rp_startofpacket        (address_span_extender_0_cntl_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (address_span_extender_0_cntl_cmd_width_adapter_src_ready),         //              cp.ready
		.cp_valid                (address_span_extender_0_cntl_cmd_width_adapter_src_valid),         //                .valid
		.cp_data                 (address_span_extender_0_cntl_cmd_width_adapter_src_data),          //                .data
		.cp_startofpacket        (address_span_extender_0_cntl_cmd_width_adapter_src_startofpacket), //                .startofpacket
		.cp_endofpacket          (address_span_extender_0_cntl_cmd_width_adapter_src_endofpacket),   //                .endofpacket
		.cp_channel              (address_span_extender_0_cntl_cmd_width_adapter_src_channel),       //                .channel
		.rf_sink_ready           (address_span_extender_0_cntl_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (address_span_extender_0_cntl_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (address_span_extender_0_cntl_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (address_span_extender_0_cntl_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (address_span_extender_0_cntl_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (address_span_extender_0_cntl_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (address_span_extender_0_cntl_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (address_span_extender_0_cntl_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (address_span_extender_0_cntl_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (address_span_extender_0_cntl_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (address_span_extender_0_cntl_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (address_span_extender_0_cntl_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (address_span_extender_0_cntl_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) address_span_extender_0_cntl_agent_rsp_fifo (
		.clk               (kernel_clk_out_clk_clk),                                        //       clk.clk
		.reset             (address_span_extender_0_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (address_span_extender_0_cntl_agent_rf_source_data),             //        in.data
		.in_valid          (address_span_extender_0_cntl_agent_rf_source_valid),            //          .valid
		.in_ready          (address_span_extender_0_cntl_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (address_span_extender_0_cntl_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (address_span_extender_0_cntl_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (address_span_extender_0_cntl_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (address_span_extender_0_cntl_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (address_span_extender_0_cntl_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (address_span_extender_0_cntl_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (address_span_extender_0_cntl_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (66),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) address_span_extender_0_cntl_agent_rdata_fifo (
		.clk               (kernel_clk_out_clk_clk),                                    //       clk.clk
		.reset             (address_span_extender_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (address_span_extender_0_cntl_agent_rdata_fifo_src_data),    //        in.data
		.in_valid          (address_span_extender_0_cntl_agent_rdata_fifo_src_valid),   //          .valid
		.in_ready          (address_span_extender_0_cntl_agent_rdata_fifo_src_ready),   //          .ready
		.out_data          (address_span_extender_0_cntl_agent_rdata_fifo_out_data),    //       out.data
		.out_valid         (address_span_extender_0_cntl_agent_rdata_fifo_out_valid),   //          .valid
		.out_ready         (address_span_extender_0_cntl_agent_rdata_fifo_out_ready),   //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (99),
		.PKT_BURST_SIZE_L          (97),
		.PKT_TRANS_LOCK            (90),
		.PKT_BEGIN_BURST           (104),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (96),
		.PKT_BURSTWRAP_L           (96),
		.PKT_BYTE_CNT_H            (95),
		.PKT_BYTE_CNT_L            (92),
		.PKT_ADDR_H                (85),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (86),
		.PKT_TRANS_POSTED          (87),
		.PKT_TRANS_WRITE           (88),
		.PKT_TRANS_READ            (89),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (108),
		.PKT_SRC_ID_L              (106),
		.PKT_DEST_ID_H             (111),
		.PKT_DEST_ID_L             (109),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sys_description_rom_s1_agent (
		.clk                     (clk_reset_clk_clk),                                          //             clk.clk
		.reset                   (kernel_cntrl_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (sys_description_rom_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sys_description_rom_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sys_description_rom_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sys_description_rom_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sys_description_rom_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (sys_description_rom_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sys_description_rom_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sys_description_rom_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (sys_description_rom_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sys_description_rom_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (sys_description_rom_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (sys_description_rom_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sys_description_rom_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (sys_description_rom_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (sys_description_rom_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (sys_description_rom_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sys_description_rom_s1_cmd_width_adapter_src_ready),         //              cp.ready
		.cp_valid                (sys_description_rom_s1_cmd_width_adapter_src_valid),         //                .valid
		.cp_data                 (sys_description_rom_s1_cmd_width_adapter_src_data),          //                .data
		.cp_startofpacket        (sys_description_rom_s1_cmd_width_adapter_src_startofpacket), //                .startofpacket
		.cp_endofpacket          (sys_description_rom_s1_cmd_width_adapter_src_endofpacket),   //                .endofpacket
		.cp_channel              (sys_description_rom_s1_cmd_width_adapter_src_channel),       //                .channel
		.rf_sink_ready           (sys_description_rom_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sys_description_rom_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sys_description_rom_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sys_description_rom_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sys_description_rom_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sys_description_rom_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sys_description_rom_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sys_description_rom_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sys_description_rom_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sys_description_rom_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (sys_description_rom_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sys_description_rom_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sys_description_rom_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sys_description_rom_s1_agent_rsp_fifo (
		.clk               (clk_reset_clk_clk),                                       //       clk.clk
		.reset             (kernel_cntrl_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (sys_description_rom_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sys_description_rom_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sys_description_rom_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sys_description_rom_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sys_description_rom_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sys_description_rom_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sys_description_rom_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sys_description_rom_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sys_description_rom_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sys_description_rom_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (99),
		.PKT_BURST_SIZE_L          (97),
		.PKT_TRANS_LOCK            (90),
		.PKT_BEGIN_BURST           (104),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (96),
		.PKT_BURSTWRAP_L           (96),
		.PKT_BYTE_CNT_H            (95),
		.PKT_BYTE_CNT_L            (92),
		.PKT_ADDR_H                (85),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (86),
		.PKT_TRANS_POSTED          (87),
		.PKT_TRANS_WRITE           (88),
		.PKT_TRANS_READ            (89),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (108),
		.PKT_SRC_ID_L              (106),
		.PKT_DEST_ID_H             (111),
		.PKT_DEST_ID_L             (109),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sw_reset_s_agent (
		.clk                     (clk_reset_clk_clk),                              //             clk.clk
		.reset                   (sw_reset_clk_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sw_reset_s_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sw_reset_s_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sw_reset_s_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sw_reset_s_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sw_reset_s_agent_m0_lock),                       //                .lock
		.m0_readdata             (sw_reset_s_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sw_reset_s_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sw_reset_s_agent_m0_read),                       //                .read
		.m0_waitrequest          (sw_reset_s_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sw_reset_s_agent_m0_writedata),                  //                .writedata
		.m0_write                (sw_reset_s_agent_m0_write),                      //                .write
		.rp_endofpacket          (sw_reset_s_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sw_reset_s_agent_rp_ready),                      //                .ready
		.rp_valid                (sw_reset_s_agent_rp_valid),                      //                .valid
		.rp_data                 (sw_reset_s_agent_rp_data),                       //                .data
		.rp_startofpacket        (sw_reset_s_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sw_reset_s_cmd_width_adapter_src_ready),         //              cp.ready
		.cp_valid                (sw_reset_s_cmd_width_adapter_src_valid),         //                .valid
		.cp_data                 (sw_reset_s_cmd_width_adapter_src_data),          //                .data
		.cp_startofpacket        (sw_reset_s_cmd_width_adapter_src_startofpacket), //                .startofpacket
		.cp_endofpacket          (sw_reset_s_cmd_width_adapter_src_endofpacket),   //                .endofpacket
		.cp_channel              (sw_reset_s_cmd_width_adapter_src_channel),       //                .channel
		.rf_sink_ready           (sw_reset_s_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sw_reset_s_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sw_reset_s_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sw_reset_s_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sw_reset_s_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sw_reset_s_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sw_reset_s_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sw_reset_s_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sw_reset_s_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sw_reset_s_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),              //                .error
		.rdata_fifo_src_ready    (sw_reset_s_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sw_reset_s_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sw_reset_s_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sw_reset_s_agent_rsp_fifo (
		.clk               (clk_reset_clk_clk),                              //       clk.clk
		.reset             (sw_reset_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sw_reset_s_agent_rf_source_data),                //        in.data
		.in_valid          (sw_reset_s_agent_rf_source_valid),               //          .valid
		.in_ready          (sw_reset_s_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (sw_reset_s_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (sw_reset_s_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (sw_reset_s_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (sw_reset_s_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (sw_reset_s_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (sw_reset_s_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (sw_reset_s_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (88),
		.PKT_ORI_BURST_SIZE_L      (86),
		.PKT_RESPONSE_STATUS_H     (85),
		.PKT_RESPONSE_STATUS_L     (84),
		.PKT_BURST_SIZE_H          (63),
		.PKT_BURST_SIZE_L          (61),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (68),
		.PKT_PROTECTION_H          (79),
		.PKT_PROTECTION_L          (77),
		.PKT_BURSTWRAP_H           (60),
		.PKT_BURSTWRAP_L           (60),
		.PKT_BYTE_CNT_H            (59),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (70),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (73),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (89),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mem_org_mode_s_agent (
		.clk                     (clk_reset_clk_clk),                               //             clk.clk
		.reset                   (kernel_cntrl_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (mem_org_mode_s_agent_m0_address),                 //              m0.address
		.m0_burstcount           (mem_org_mode_s_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (mem_org_mode_s_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (mem_org_mode_s_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (mem_org_mode_s_agent_m0_lock),                    //                .lock
		.m0_readdata             (mem_org_mode_s_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (mem_org_mode_s_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (mem_org_mode_s_agent_m0_read),                    //                .read
		.m0_waitrequest          (mem_org_mode_s_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (mem_org_mode_s_agent_m0_writedata),               //                .writedata
		.m0_write                (mem_org_mode_s_agent_m0_write),                   //                .write
		.rp_endofpacket          (mem_org_mode_s_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (mem_org_mode_s_agent_rp_ready),                   //                .ready
		.rp_valid                (mem_org_mode_s_agent_rp_valid),                   //                .valid
		.rp_data                 (mem_org_mode_s_agent_rp_data),                    //                .data
		.rp_startofpacket        (mem_org_mode_s_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_004_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                         //                .channel
		.rf_sink_ready           (mem_org_mode_s_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (mem_org_mode_s_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (mem_org_mode_s_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (mem_org_mode_s_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (mem_org_mode_s_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (mem_org_mode_s_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (mem_org_mode_s_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (mem_org_mode_s_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (mem_org_mode_s_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (mem_org_mode_s_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),               //                .error
		.rdata_fifo_src_ready    (mem_org_mode_s_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mem_org_mode_s_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (mem_org_mode_s_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (90),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mem_org_mode_s_agent_rsp_fifo (
		.clk               (clk_reset_clk_clk),                               //       clk.clk
		.reset             (kernel_cntrl_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (mem_org_mode_s_agent_rf_source_data),             //        in.data
		.in_valid          (mem_org_mode_s_agent_rf_source_valid),            //          .valid
		.in_ready          (mem_org_mode_s_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mem_org_mode_s_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mem_org_mode_s_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mem_org_mode_s_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mem_org_mode_s_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mem_org_mode_s_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mem_org_mode_s_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mem_org_mode_s_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (88),
		.PKT_ORI_BURST_SIZE_L      (86),
		.PKT_RESPONSE_STATUS_H     (85),
		.PKT_RESPONSE_STATUS_L     (84),
		.PKT_BURST_SIZE_H          (63),
		.PKT_BURST_SIZE_L          (61),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (68),
		.PKT_PROTECTION_H          (79),
		.PKT_PROTECTION_L          (77),
		.PKT_BURSTWRAP_H           (60),
		.PKT_BURSTWRAP_L           (60),
		.PKT_BYTE_CNT_H            (59),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (70),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (73),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (89),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) version_id_0_s_agent (
		.clk                     (clk_reset_clk_clk),                               //             clk.clk
		.reset                   (kernel_cntrl_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (version_id_0_s_agent_m0_address),                 //              m0.address
		.m0_burstcount           (version_id_0_s_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (version_id_0_s_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (version_id_0_s_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (version_id_0_s_agent_m0_lock),                    //                .lock
		.m0_readdata             (version_id_0_s_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (version_id_0_s_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (version_id_0_s_agent_m0_read),                    //                .read
		.m0_waitrequest          (version_id_0_s_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (version_id_0_s_agent_m0_writedata),               //                .writedata
		.m0_write                (version_id_0_s_agent_m0_write),                   //                .write
		.rp_endofpacket          (version_id_0_s_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (version_id_0_s_agent_rp_ready),                   //                .ready
		.rp_valid                (version_id_0_s_agent_rp_valid),                   //                .valid
		.rp_data                 (version_id_0_s_agent_rp_data),                    //                .data
		.rp_startofpacket        (version_id_0_s_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_005_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                         //                .channel
		.rf_sink_ready           (version_id_0_s_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (version_id_0_s_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (version_id_0_s_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (version_id_0_s_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (version_id_0_s_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (version_id_0_s_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (version_id_0_s_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (version_id_0_s_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (version_id_0_s_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (version_id_0_s_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),               //                .error
		.rdata_fifo_src_ready    (version_id_0_s_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (version_id_0_s_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (version_id_0_s_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (90),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) version_id_0_s_agent_rsp_fifo (
		.clk               (clk_reset_clk_clk),                               //       clk.clk
		.reset             (kernel_cntrl_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (version_id_0_s_agent_rf_source_data),             //        in.data
		.in_valid          (version_id_0_s_agent_rf_source_valid),            //          .valid
		.in_ready          (version_id_0_s_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (version_id_0_s_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (version_id_0_s_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (version_id_0_s_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (version_id_0_s_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (version_id_0_s_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (version_id_0_s_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (version_id_0_s_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (88),
		.PKT_ORI_BURST_SIZE_L      (86),
		.PKT_RESPONSE_STATUS_H     (85),
		.PKT_RESPONSE_STATUS_L     (84),
		.PKT_BURST_SIZE_H          (63),
		.PKT_BURST_SIZE_L          (61),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (68),
		.PKT_PROTECTION_H          (79),
		.PKT_PROTECTION_L          (77),
		.PKT_BURSTWRAP_H           (60),
		.PKT_BURSTWRAP_L           (60),
		.PKT_BYTE_CNT_H            (59),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (70),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (73),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (89),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) irq_ena_0_s_agent (
		.clk                     (clk_reset_clk_clk),                              //             clk.clk
		.reset                   (kernel_cntrl_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (irq_ena_0_s_agent_m0_address),                   //              m0.address
		.m0_burstcount           (irq_ena_0_s_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (irq_ena_0_s_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (irq_ena_0_s_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (irq_ena_0_s_agent_m0_lock),                      //                .lock
		.m0_readdata             (irq_ena_0_s_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (irq_ena_0_s_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (irq_ena_0_s_agent_m0_read),                      //                .read
		.m0_waitrequest          (irq_ena_0_s_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (irq_ena_0_s_agent_m0_writedata),                 //                .writedata
		.m0_write                (irq_ena_0_s_agent_m0_write),                     //                .write
		.rp_endofpacket          (irq_ena_0_s_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (irq_ena_0_s_agent_rp_ready),                     //                .ready
		.rp_valid                (irq_ena_0_s_agent_rp_valid),                     //                .valid
		.rp_data                 (irq_ena_0_s_agent_rp_data),                      //                .data
		.rp_startofpacket        (irq_ena_0_s_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_006_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                        //                .channel
		.rf_sink_ready           (irq_ena_0_s_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (irq_ena_0_s_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (irq_ena_0_s_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (irq_ena_0_s_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (irq_ena_0_s_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (irq_ena_0_s_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (irq_ena_0_s_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (irq_ena_0_s_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (irq_ena_0_s_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (irq_ena_0_s_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),              //                .error
		.rdata_fifo_src_ready    (irq_ena_0_s_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (irq_ena_0_s_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (irq_ena_0_s_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (90),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) irq_ena_0_s_agent_rsp_fifo (
		.clk               (clk_reset_clk_clk),                              //       clk.clk
		.reset             (kernel_cntrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (irq_ena_0_s_agent_rf_source_data),               //        in.data
		.in_valid          (irq_ena_0_s_agent_rf_source_valid),              //          .valid
		.in_ready          (irq_ena_0_s_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (irq_ena_0_s_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (irq_ena_0_s_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (irq_ena_0_s_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (irq_ena_0_s_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (irq_ena_0_s_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (irq_ena_0_s_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (irq_ena_0_s_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	system_acl_iface_acl_kernel_interface_mm_interconnect_1_router router (
		.sink_ready         (kernel_cntrl_m0_agent_cp_ready),                 //      sink.ready
		.sink_valid         (kernel_cntrl_m0_agent_cp_valid),                 //          .valid
		.sink_data          (kernel_cntrl_m0_agent_cp_data),                  //          .data
		.sink_startofpacket (kernel_cntrl_m0_agent_cp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (kernel_cntrl_m0_agent_cp_endofpacket),           //          .endofpacket
		.clk                (clk_reset_clk_clk),                              //       clk.clk
		.reset              (kernel_cntrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                               //       src.ready
		.src_valid          (router_src_valid),                               //          .valid
		.src_data           (router_src_data),                                //          .data
		.src_channel        (router_src_channel),                             //          .channel
		.src_startofpacket  (router_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                          //          .endofpacket
	);

	system_acl_iface_acl_kernel_interface_mm_interconnect_1_router_001 router_001 (
		.sink_ready         (address_span_extender_0_windowed_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (address_span_extender_0_windowed_slave_agent_rp_valid),         //          .valid
		.sink_data          (address_span_extender_0_windowed_slave_agent_rp_data),          //          .data
		.sink_startofpacket (address_span_extender_0_windowed_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (address_span_extender_0_windowed_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (kernel_clk_out_clk_clk),                                        //       clk.clk
		.reset              (address_span_extender_0_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_001_src_ready),                                          //       src.ready
		.src_valid          (router_001_src_valid),                                          //          .valid
		.src_data           (router_001_src_data),                                           //          .data
		.src_channel        (router_001_src_channel),                                        //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                     //          .endofpacket
	);

	system_acl_iface_acl_kernel_interface_mm_interconnect_1_router_002 router_002 (
		.sink_ready         (address_span_extender_0_cntl_agent_rp_ready),               //      sink.ready
		.sink_valid         (address_span_extender_0_cntl_agent_rp_valid),               //          .valid
		.sink_data          (address_span_extender_0_cntl_agent_rp_data),                //          .data
		.sink_startofpacket (address_span_extender_0_cntl_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (address_span_extender_0_cntl_agent_rp_endofpacket),         //          .endofpacket
		.clk                (kernel_clk_out_clk_clk),                                    //       clk.clk
		.reset              (address_span_extender_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                      //       src.ready
		.src_valid          (router_002_src_valid),                                      //          .valid
		.src_data           (router_002_src_data),                                       //          .data
		.src_channel        (router_002_src_channel),                                    //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                 //          .endofpacket
	);

	system_acl_iface_acl_kernel_interface_mm_interconnect_1_router_002 router_003 (
		.sink_ready         (sys_description_rom_s1_agent_rp_ready),          //      sink.ready
		.sink_valid         (sys_description_rom_s1_agent_rp_valid),          //          .valid
		.sink_data          (sys_description_rom_s1_agent_rp_data),           //          .data
		.sink_startofpacket (sys_description_rom_s1_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (sys_description_rom_s1_agent_rp_endofpacket),    //          .endofpacket
		.clk                (clk_reset_clk_clk),                              //       clk.clk
		.reset              (kernel_cntrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                           //       src.ready
		.src_valid          (router_003_src_valid),                           //          .valid
		.src_data           (router_003_src_data),                            //          .data
		.src_channel        (router_003_src_channel),                         //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                      //          .endofpacket
	);

	system_acl_iface_acl_kernel_interface_mm_interconnect_1_router_002 router_004 (
		.sink_ready         (sw_reset_s_agent_rp_ready),                      //      sink.ready
		.sink_valid         (sw_reset_s_agent_rp_valid),                      //          .valid
		.sink_data          (sw_reset_s_agent_rp_data),                       //          .data
		.sink_startofpacket (sw_reset_s_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (sw_reset_s_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_reset_clk_clk),                              //       clk.clk
		.reset              (sw_reset_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                           //       src.ready
		.src_valid          (router_004_src_valid),                           //          .valid
		.src_data           (router_004_src_data),                            //          .data
		.src_channel        (router_004_src_channel),                         //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                      //          .endofpacket
	);

	system_acl_iface_acl_kernel_interface_mm_interconnect_1_router_001 router_005 (
		.sink_ready         (mem_org_mode_s_agent_rp_ready),                  //      sink.ready
		.sink_valid         (mem_org_mode_s_agent_rp_valid),                  //          .valid
		.sink_data          (mem_org_mode_s_agent_rp_data),                   //          .data
		.sink_startofpacket (mem_org_mode_s_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (mem_org_mode_s_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_reset_clk_clk),                              //       clk.clk
		.reset              (kernel_cntrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                           //       src.ready
		.src_valid          (router_005_src_valid),                           //          .valid
		.src_data           (router_005_src_data),                            //          .data
		.src_channel        (router_005_src_channel),                         //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                      //          .endofpacket
	);

	system_acl_iface_acl_kernel_interface_mm_interconnect_1_router_001 router_006 (
		.sink_ready         (version_id_0_s_agent_rp_ready),                  //      sink.ready
		.sink_valid         (version_id_0_s_agent_rp_valid),                  //          .valid
		.sink_data          (version_id_0_s_agent_rp_data),                   //          .data
		.sink_startofpacket (version_id_0_s_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (version_id_0_s_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_reset_clk_clk),                              //       clk.clk
		.reset              (kernel_cntrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                           //       src.ready
		.src_valid          (router_006_src_valid),                           //          .valid
		.src_data           (router_006_src_data),                            //          .data
		.src_channel        (router_006_src_channel),                         //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                      //          .endofpacket
	);

	system_acl_iface_acl_kernel_interface_mm_interconnect_1_router_001 router_007 (
		.sink_ready         (irq_ena_0_s_agent_rp_ready),                     //      sink.ready
		.sink_valid         (irq_ena_0_s_agent_rp_valid),                     //          .valid
		.sink_data          (irq_ena_0_s_agent_rp_data),                      //          .data
		.sink_startofpacket (irq_ena_0_s_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (irq_ena_0_s_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clk_reset_clk_clk),                              //       clk.clk
		.reset              (kernel_cntrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                           //       src.ready
		.src_valid          (router_007_src_valid),                           //          .valid
		.src_data           (router_007_src_data),                            //          .data
		.src_channel        (router_007_src_channel),                         //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                      //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (73),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (70),
		.PKT_BYTE_CNT_H            (59),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.MAX_OUTSTANDING_RESPONSES (5),
		.PIPELINED                 (0),
		.ST_DATA_W                 (89),
		.ST_CHANNEL_W              (7),
		.VALID_WIDTH               (7),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) kernel_cntrl_m0_limiter (
		.clk                    (clk_reset_clk_clk),                              //       clk.clk
		.reset                  (kernel_cntrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                               //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                               //          .valid
		.cmd_sink_data          (router_src_data),                                //          .data
		.cmd_sink_channel       (router_src_channel),                             //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                       //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                         //          .endofpacket
		.cmd_src_ready          (kernel_cntrl_m0_limiter_cmd_src_ready),          //   cmd_src.ready
		.cmd_src_data           (kernel_cntrl_m0_limiter_cmd_src_data),           //          .data
		.cmd_src_channel        (kernel_cntrl_m0_limiter_cmd_src_channel),        //          .channel
		.cmd_src_startofpacket  (kernel_cntrl_m0_limiter_cmd_src_startofpacket),  //          .startofpacket
		.cmd_src_endofpacket    (kernel_cntrl_m0_limiter_cmd_src_endofpacket),    //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                              //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                              //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                            //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                               //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                      //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                        //          .endofpacket
		.rsp_src_ready          (kernel_cntrl_m0_limiter_rsp_src_ready),          //   rsp_src.ready
		.rsp_src_valid          (kernel_cntrl_m0_limiter_rsp_src_valid),          //          .valid
		.rsp_src_data           (kernel_cntrl_m0_limiter_rsp_src_data),           //          .data
		.rsp_src_channel        (kernel_cntrl_m0_limiter_rsp_src_channel),        //          .channel
		.rsp_src_startofpacket  (kernel_cntrl_m0_limiter_rsp_src_startofpacket),  //          .startofpacket
		.rsp_src_endofpacket    (kernel_cntrl_m0_limiter_rsp_src_endofpacket),    //          .endofpacket
		.cmd_src_valid          (kernel_cntrl_m0_limiter_cmd_valid_data)          // cmd_valid.data
	);

	system_acl_iface_acl_kernel_interface_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                (clk_reset_clk_clk),                              //        clk.clk
		.reset              (kernel_cntrl_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (kernel_cntrl_m0_limiter_cmd_src_ready),          //       sink.ready
		.sink_channel       (kernel_cntrl_m0_limiter_cmd_src_channel),        //           .channel
		.sink_data          (kernel_cntrl_m0_limiter_cmd_src_data),           //           .data
		.sink_startofpacket (kernel_cntrl_m0_limiter_cmd_src_startofpacket),  //           .startofpacket
		.sink_endofpacket   (kernel_cntrl_m0_limiter_cmd_src_endofpacket),    //           .endofpacket
		.sink_valid         (kernel_cntrl_m0_limiter_cmd_valid_data),         // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                           //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                           //           .valid
		.src0_data          (cmd_demux_src0_data),                            //           .data
		.src0_channel       (cmd_demux_src0_channel),                         //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                   //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                     //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                           //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                           //           .valid
		.src1_data          (cmd_demux_src1_data),                            //           .data
		.src1_channel       (cmd_demux_src1_channel),                         //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                   //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                     //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                           //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                           //           .valid
		.src2_data          (cmd_demux_src2_data),                            //           .data
		.src2_channel       (cmd_demux_src2_channel),                         //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                   //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                     //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                           //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                           //           .valid
		.src3_data          (cmd_demux_src3_data),                            //           .data
		.src3_channel       (cmd_demux_src3_channel),                         //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                   //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                     //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                           //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                           //           .valid
		.src4_data          (cmd_demux_src4_data),                            //           .data
		.src4_channel       (cmd_demux_src4_channel),                         //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                   //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                     //           .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                           //       src5.ready
		.src5_valid         (cmd_demux_src5_valid),                           //           .valid
		.src5_data          (cmd_demux_src5_data),                            //           .data
		.src5_channel       (cmd_demux_src5_channel),                         //           .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                   //           .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket),                     //           .endofpacket
		.src6_ready         (cmd_demux_src6_ready),                           //       src6.ready
		.src6_valid         (cmd_demux_src6_valid),                           //           .valid
		.src6_data          (cmd_demux_src6_data),                            //           .data
		.src6_channel       (cmd_demux_src6_channel),                         //           .channel
		.src6_startofpacket (cmd_demux_src6_startofpacket),                   //           .startofpacket
		.src6_endofpacket   (cmd_demux_src6_endofpacket)                      //           .endofpacket
	);

	system_acl_iface_acl_kernel_interface_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (kernel_clk_out_clk_clk),                                    //       clk.clk
		.reset               (address_span_extender_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                         //       src.ready
		.src_valid           (cmd_mux_src_valid),                                         //          .valid
		.src_data            (cmd_mux_src_data),                                          //          .data
		.src_channel         (cmd_mux_src_channel),                                       //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                   //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                         //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                         //          .valid
		.sink0_channel       (crosser_out_channel),                                       //          .channel
		.sink0_data          (crosser_out_data),                                          //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                                    //          .endofpacket
	);

	system_acl_iface_acl_kernel_interface_mm_interconnect_1_cmd_mux cmd_mux_001 (
		.clk                 (kernel_clk_out_clk_clk),                                    //       clk.clk
		.reset               (address_span_extender_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                     //          .valid
		.src_data            (cmd_mux_001_src_data),                                      //          .data
		.src_channel         (cmd_mux_001_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                                     //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                                     //          .valid
		.sink0_channel       (crosser_001_out_channel),                                   //          .channel
		.sink0_data          (crosser_001_out_data),                                      //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                             //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                                //          .endofpacket
	);

	system_acl_iface_acl_kernel_interface_mm_interconnect_1_cmd_mux cmd_mux_002 (
		.clk                 (clk_reset_clk_clk),                              //       clk.clk
		.reset               (kernel_cntrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                          //          .valid
		.src_data            (cmd_mux_002_src_data),                           //          .data
		.src_channel         (cmd_mux_002_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                         //          .channel
		.sink0_data          (cmd_demux_src2_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                      //          .endofpacket
	);

	system_acl_iface_acl_kernel_interface_mm_interconnect_1_cmd_mux cmd_mux_003 (
		.clk                 (clk_reset_clk_clk),                              //       clk.clk
		.reset               (sw_reset_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                          //          .valid
		.src_data            (cmd_mux_003_src_data),                           //          .data
		.src_channel         (cmd_mux_003_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                         //          .channel
		.sink0_data          (cmd_demux_src3_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                      //          .endofpacket
	);

	system_acl_iface_acl_kernel_interface_mm_interconnect_1_cmd_mux cmd_mux_004 (
		.clk                 (clk_reset_clk_clk),                              //       clk.clk
		.reset               (kernel_cntrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                          //          .valid
		.src_data            (cmd_mux_004_src_data),                           //          .data
		.src_channel         (cmd_mux_004_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                         //          .channel
		.sink0_data          (cmd_demux_src4_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                      //          .endofpacket
	);

	system_acl_iface_acl_kernel_interface_mm_interconnect_1_cmd_mux cmd_mux_005 (
		.clk                 (clk_reset_clk_clk),                              //       clk.clk
		.reset               (kernel_cntrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                          //          .valid
		.src_data            (cmd_mux_005_src_data),                           //          .data
		.src_channel         (cmd_mux_005_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                         //          .channel
		.sink0_data          (cmd_demux_src5_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                      //          .endofpacket
	);

	system_acl_iface_acl_kernel_interface_mm_interconnect_1_cmd_mux cmd_mux_006 (
		.clk                 (clk_reset_clk_clk),                              //       clk.clk
		.reset               (kernel_cntrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                          //          .valid
		.src_data            (cmd_mux_006_src_data),                           //          .data
		.src_channel         (cmd_mux_006_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                         //          .channel
		.sink0_data          (cmd_demux_src6_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                      //          .endofpacket
	);

	system_acl_iface_acl_kernel_interface_mm_interconnect_1_rsp_demux rsp_demux (
		.clk                (kernel_clk_out_clk_clk),                                    //       clk.clk
		.reset              (address_span_extender_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                      //      sink.ready
		.sink_channel       (router_001_src_channel),                                    //          .channel
		.sink_data          (router_001_src_data),                                       //          .data
		.sink_startofpacket (router_001_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_001_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                      //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                      //          .valid
		.src0_data          (rsp_demux_src0_data),                                       //          .data
		.src0_channel       (rsp_demux_src0_channel),                                    //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                 //          .endofpacket
	);

	system_acl_iface_acl_kernel_interface_mm_interconnect_1_rsp_demux rsp_demux_001 (
		.clk                (kernel_clk_out_clk_clk),                                           //       clk.clk
		.reset              (address_span_extender_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.sink_ready         (address_span_extender_0_cntl_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (address_span_extender_0_cntl_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (address_span_extender_0_cntl_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (address_span_extender_0_cntl_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (address_span_extender_0_cntl_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (address_span_extender_0_cntl_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                         //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                         //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                          //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                       //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                    //          .endofpacket
	);

	system_acl_iface_acl_kernel_interface_mm_interconnect_1_rsp_demux_002 rsp_demux_002 (
		.clk                (clk_reset_clk_clk),                                          //       clk.clk
		.reset              (kernel_cntrl_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.sink_ready         (sys_description_rom_s1_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sys_description_rom_s1_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sys_description_rom_s1_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sys_description_rom_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sys_description_rom_s1_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sys_description_rom_s1_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                              //          .endofpacket
	);

	system_acl_iface_acl_kernel_interface_mm_interconnect_1_rsp_demux_002 rsp_demux_003 (
		.clk                (clk_reset_clk_clk),                              //       clk.clk
		.reset              (sw_reset_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (sw_reset_s_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sw_reset_s_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sw_reset_s_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sw_reset_s_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sw_reset_s_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sw_reset_s_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_003_src0_data),                        //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                  //          .endofpacket
	);

	system_acl_iface_acl_kernel_interface_mm_interconnect_1_rsp_demux_002 rsp_demux_004 (
		.clk                (clk_reset_clk_clk),                              //       clk.clk
		.reset              (kernel_cntrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                           //      sink.ready
		.sink_channel       (router_005_src_channel),                         //          .channel
		.sink_data          (router_005_src_data),                            //          .data
		.sink_startofpacket (router_005_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_005_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_004_src0_data),                        //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                  //          .endofpacket
	);

	system_acl_iface_acl_kernel_interface_mm_interconnect_1_rsp_demux_002 rsp_demux_005 (
		.clk                (clk_reset_clk_clk),                              //       clk.clk
		.reset              (kernel_cntrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                           //      sink.ready
		.sink_channel       (router_006_src_channel),                         //          .channel
		.sink_data          (router_006_src_data),                            //          .data
		.sink_startofpacket (router_006_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_006_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_005_src0_data),                        //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                  //          .endofpacket
	);

	system_acl_iface_acl_kernel_interface_mm_interconnect_1_rsp_demux_002 rsp_demux_006 (
		.clk                (clk_reset_clk_clk),                              //       clk.clk
		.reset              (kernel_cntrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                           //      sink.ready
		.sink_channel       (router_007_src_channel),                         //          .channel
		.sink_data          (router_007_src_data),                            //          .data
		.sink_startofpacket (router_007_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_007_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_006_src0_data),                        //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                  //          .endofpacket
	);

	system_acl_iface_acl_kernel_interface_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                 (clk_reset_clk_clk),                              //       clk.clk
		.reset               (kernel_cntrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                              //       src.ready
		.src_valid           (rsp_mux_src_valid),                              //          .valid
		.src_data            (rsp_mux_src_data),                               //          .data
		.src_channel         (rsp_mux_src_channel),                            //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                          //     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                          //          .valid
		.sink0_channel       (crosser_002_out_channel),                        //          .channel
		.sink0_data          (crosser_002_out_data),                           //          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket),                    //          .endofpacket
		.sink1_ready         (crosser_003_out_ready),                          //     sink1.ready
		.sink1_valid         (crosser_003_out_valid),                          //          .valid
		.sink1_channel       (crosser_003_out_channel),                        //          .channel
		.sink1_data          (crosser_003_out_data),                           //          .data
		.sink1_startofpacket (crosser_003_out_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (crosser_003_out_endofpacket),                    //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                       //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                       //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                     //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                        //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                 //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                       //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                       //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                     //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                        //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),               //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),                 //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                       //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                       //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                     //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                        //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),               //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),                 //          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),                       //     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),                       //          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),                     //          .channel
		.sink5_data          (rsp_demux_005_src0_data),                        //          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),               //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket),                 //          .endofpacket
		.sink6_ready         (rsp_demux_006_src0_ready),                       //     sink6.ready
		.sink6_valid         (rsp_demux_006_src0_valid),                       //          .valid
		.sink6_channel       (rsp_demux_006_src0_channel),                     //          .channel
		.sink6_data          (rsp_demux_006_src0_data),                        //          .data
		.sink6_startofpacket (rsp_demux_006_src0_startofpacket),               //          .startofpacket
		.sink6_endofpacket   (rsp_demux_006_src0_endofpacket)                  //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (59),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (60),
		.IN_PKT_BURSTWRAP_L            (60),
		.IN_PKT_BURST_SIZE_H           (63),
		.IN_PKT_BURST_SIZE_L           (61),
		.IN_PKT_RESPONSE_STATUS_H      (85),
		.IN_PKT_RESPONSE_STATUS_L      (84),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (65),
		.IN_PKT_BURST_TYPE_L           (64),
		.IN_PKT_ORI_BURST_SIZE_L       (86),
		.IN_PKT_ORI_BURST_SIZE_H       (88),
		.IN_ST_DATA_W                  (89),
		.OUT_PKT_ADDR_H                (85),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (95),
		.OUT_PKT_BYTE_CNT_L            (92),
		.OUT_PKT_TRANS_COMPRESSED_READ (86),
		.OUT_PKT_BURST_SIZE_H          (99),
		.OUT_PKT_BURST_SIZE_L          (97),
		.OUT_PKT_RESPONSE_STATUS_H     (121),
		.OUT_PKT_RESPONSE_STATUS_L     (120),
		.OUT_PKT_TRANS_EXCLUSIVE       (91),
		.OUT_PKT_BURST_TYPE_H          (101),
		.OUT_PKT_BURST_TYPE_L          (100),
		.OUT_PKT_ORI_BURST_SIZE_L      (122),
		.OUT_PKT_ORI_BURST_SIZE_H      (124),
		.OUT_ST_DATA_W                 (125),
		.ST_CHANNEL_W                  (7),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) address_span_extender_0_cntl_cmd_width_adapter (
		.clk                  (kernel_clk_out_clk_clk),                                           //       clk.clk
		.reset                (address_span_extender_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                                            //      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                                          //          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                                      //          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                                            //          .ready
		.in_data              (cmd_mux_001_src_data),                                             //          .data
		.out_endofpacket      (address_span_extender_0_cntl_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (address_span_extender_0_cntl_cmd_width_adapter_src_data),          //          .data
		.out_channel          (address_span_extender_0_cntl_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (address_span_extender_0_cntl_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (address_span_extender_0_cntl_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (address_span_extender_0_cntl_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (59),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (60),
		.IN_PKT_BURSTWRAP_L            (60),
		.IN_PKT_BURST_SIZE_H           (63),
		.IN_PKT_BURST_SIZE_L           (61),
		.IN_PKT_RESPONSE_STATUS_H      (85),
		.IN_PKT_RESPONSE_STATUS_L      (84),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (65),
		.IN_PKT_BURST_TYPE_L           (64),
		.IN_PKT_ORI_BURST_SIZE_L       (86),
		.IN_PKT_ORI_BURST_SIZE_H       (88),
		.IN_ST_DATA_W                  (89),
		.OUT_PKT_ADDR_H                (85),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (95),
		.OUT_PKT_BYTE_CNT_L            (92),
		.OUT_PKT_TRANS_COMPRESSED_READ (86),
		.OUT_PKT_BURST_SIZE_H          (99),
		.OUT_PKT_BURST_SIZE_L          (97),
		.OUT_PKT_RESPONSE_STATUS_H     (121),
		.OUT_PKT_RESPONSE_STATUS_L     (120),
		.OUT_PKT_TRANS_EXCLUSIVE       (91),
		.OUT_PKT_BURST_TYPE_H          (101),
		.OUT_PKT_BURST_TYPE_L          (100),
		.OUT_PKT_ORI_BURST_SIZE_L      (122),
		.OUT_PKT_ORI_BURST_SIZE_H      (124),
		.OUT_ST_DATA_W                 (125),
		.ST_CHANNEL_W                  (7),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sys_description_rom_s1_cmd_width_adapter (
		.clk                  (clk_reset_clk_clk),                                          //       clk.clk
		.reset                (kernel_cntrl_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_valid             (cmd_mux_002_src_valid),                                      //      sink.valid
		.in_channel           (cmd_mux_002_src_channel),                                    //          .channel
		.in_startofpacket     (cmd_mux_002_src_startofpacket),                              //          .startofpacket
		.in_endofpacket       (cmd_mux_002_src_endofpacket),                                //          .endofpacket
		.in_ready             (cmd_mux_002_src_ready),                                      //          .ready
		.in_data              (cmd_mux_002_src_data),                                       //          .data
		.out_endofpacket      (sys_description_rom_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sys_description_rom_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sys_description_rom_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sys_description_rom_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sys_description_rom_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sys_description_rom_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (59),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (60),
		.IN_PKT_BURSTWRAP_L            (60),
		.IN_PKT_BURST_SIZE_H           (63),
		.IN_PKT_BURST_SIZE_L           (61),
		.IN_PKT_RESPONSE_STATUS_H      (85),
		.IN_PKT_RESPONSE_STATUS_L      (84),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (65),
		.IN_PKT_BURST_TYPE_L           (64),
		.IN_PKT_ORI_BURST_SIZE_L       (86),
		.IN_PKT_ORI_BURST_SIZE_H       (88),
		.IN_ST_DATA_W                  (89),
		.OUT_PKT_ADDR_H                (85),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (95),
		.OUT_PKT_BYTE_CNT_L            (92),
		.OUT_PKT_TRANS_COMPRESSED_READ (86),
		.OUT_PKT_BURST_SIZE_H          (99),
		.OUT_PKT_BURST_SIZE_L          (97),
		.OUT_PKT_RESPONSE_STATUS_H     (121),
		.OUT_PKT_RESPONSE_STATUS_L     (120),
		.OUT_PKT_TRANS_EXCLUSIVE       (91),
		.OUT_PKT_BURST_TYPE_H          (101),
		.OUT_PKT_BURST_TYPE_L          (100),
		.OUT_PKT_ORI_BURST_SIZE_L      (122),
		.OUT_PKT_ORI_BURST_SIZE_H      (124),
		.OUT_ST_DATA_W                 (125),
		.ST_CHANNEL_W                  (7),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sw_reset_s_cmd_width_adapter (
		.clk                  (clk_reset_clk_clk),                              //       clk.clk
		.reset                (sw_reset_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_003_src_valid),                          //      sink.valid
		.in_channel           (cmd_mux_003_src_channel),                        //          .channel
		.in_startofpacket     (cmd_mux_003_src_startofpacket),                  //          .startofpacket
		.in_endofpacket       (cmd_mux_003_src_endofpacket),                    //          .endofpacket
		.in_ready             (cmd_mux_003_src_ready),                          //          .ready
		.in_data              (cmd_mux_003_src_data),                           //          .data
		.out_endofpacket      (sw_reset_s_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sw_reset_s_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sw_reset_s_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sw_reset_s_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sw_reset_s_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sw_reset_s_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (85),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (95),
		.IN_PKT_BYTE_CNT_L             (92),
		.IN_PKT_TRANS_COMPRESSED_READ  (86),
		.IN_PKT_TRANS_WRITE            (88),
		.IN_PKT_BURSTWRAP_H            (96),
		.IN_PKT_BURSTWRAP_L            (96),
		.IN_PKT_BURST_SIZE_H           (99),
		.IN_PKT_BURST_SIZE_L           (97),
		.IN_PKT_RESPONSE_STATUS_H      (121),
		.IN_PKT_RESPONSE_STATUS_L      (120),
		.IN_PKT_TRANS_EXCLUSIVE        (91),
		.IN_PKT_BURST_TYPE_H           (101),
		.IN_PKT_BURST_TYPE_L           (100),
		.IN_PKT_ORI_BURST_SIZE_L       (122),
		.IN_PKT_ORI_BURST_SIZE_H       (124),
		.IN_ST_DATA_W                  (125),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (59),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (63),
		.OUT_PKT_BURST_SIZE_L          (61),
		.OUT_PKT_RESPONSE_STATUS_H     (85),
		.OUT_PKT_RESPONSE_STATUS_L     (84),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (65),
		.OUT_PKT_BURST_TYPE_L          (64),
		.OUT_PKT_ORI_BURST_SIZE_L      (86),
		.OUT_PKT_ORI_BURST_SIZE_H      (88),
		.OUT_ST_DATA_W                 (89),
		.ST_CHANNEL_W                  (7),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) address_span_extender_0_cntl_rsp_width_adapter (
		.clk                  (kernel_clk_out_clk_clk),                                           //       clk.clk
		.reset                (address_span_extender_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_valid             (router_002_src_valid),                                             //      sink.valid
		.in_channel           (router_002_src_channel),                                           //          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                       //          .endofpacket
		.in_ready             (router_002_src_ready),                                             //          .ready
		.in_data              (router_002_src_data),                                              //          .data
		.out_endofpacket      (address_span_extender_0_cntl_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (address_span_extender_0_cntl_rsp_width_adapter_src_data),          //          .data
		.out_channel          (address_span_extender_0_cntl_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (address_span_extender_0_cntl_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (address_span_extender_0_cntl_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (address_span_extender_0_cntl_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (85),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (95),
		.IN_PKT_BYTE_CNT_L             (92),
		.IN_PKT_TRANS_COMPRESSED_READ  (86),
		.IN_PKT_TRANS_WRITE            (88),
		.IN_PKT_BURSTWRAP_H            (96),
		.IN_PKT_BURSTWRAP_L            (96),
		.IN_PKT_BURST_SIZE_H           (99),
		.IN_PKT_BURST_SIZE_L           (97),
		.IN_PKT_RESPONSE_STATUS_H      (121),
		.IN_PKT_RESPONSE_STATUS_L      (120),
		.IN_PKT_TRANS_EXCLUSIVE        (91),
		.IN_PKT_BURST_TYPE_H           (101),
		.IN_PKT_BURST_TYPE_L           (100),
		.IN_PKT_ORI_BURST_SIZE_L       (122),
		.IN_PKT_ORI_BURST_SIZE_H       (124),
		.IN_ST_DATA_W                  (125),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (59),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (63),
		.OUT_PKT_BURST_SIZE_L          (61),
		.OUT_PKT_RESPONSE_STATUS_H     (85),
		.OUT_PKT_RESPONSE_STATUS_L     (84),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (65),
		.OUT_PKT_BURST_TYPE_L          (64),
		.OUT_PKT_ORI_BURST_SIZE_L      (86),
		.OUT_PKT_ORI_BURST_SIZE_H      (88),
		.OUT_ST_DATA_W                 (89),
		.ST_CHANNEL_W                  (7),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sys_description_rom_s1_rsp_width_adapter (
		.clk                  (clk_reset_clk_clk),                                          //       clk.clk
		.reset                (kernel_cntrl_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_valid             (router_003_src_valid),                                       //      sink.valid
		.in_channel           (router_003_src_channel),                                     //          .channel
		.in_startofpacket     (router_003_src_startofpacket),                               //          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                                 //          .endofpacket
		.in_ready             (router_003_src_ready),                                       //          .ready
		.in_data              (router_003_src_data),                                        //          .data
		.out_endofpacket      (sys_description_rom_s1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sys_description_rom_s1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sys_description_rom_s1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sys_description_rom_s1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sys_description_rom_s1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sys_description_rom_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (85),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (95),
		.IN_PKT_BYTE_CNT_L             (92),
		.IN_PKT_TRANS_COMPRESSED_READ  (86),
		.IN_PKT_TRANS_WRITE            (88),
		.IN_PKT_BURSTWRAP_H            (96),
		.IN_PKT_BURSTWRAP_L            (96),
		.IN_PKT_BURST_SIZE_H           (99),
		.IN_PKT_BURST_SIZE_L           (97),
		.IN_PKT_RESPONSE_STATUS_H      (121),
		.IN_PKT_RESPONSE_STATUS_L      (120),
		.IN_PKT_TRANS_EXCLUSIVE        (91),
		.IN_PKT_BURST_TYPE_H           (101),
		.IN_PKT_BURST_TYPE_L           (100),
		.IN_PKT_ORI_BURST_SIZE_L       (122),
		.IN_PKT_ORI_BURST_SIZE_H       (124),
		.IN_ST_DATA_W                  (125),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (59),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (63),
		.OUT_PKT_BURST_SIZE_L          (61),
		.OUT_PKT_RESPONSE_STATUS_H     (85),
		.OUT_PKT_RESPONSE_STATUS_L     (84),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (65),
		.OUT_PKT_BURST_TYPE_L          (64),
		.OUT_PKT_ORI_BURST_SIZE_L      (86),
		.OUT_PKT_ORI_BURST_SIZE_H      (88),
		.OUT_ST_DATA_W                 (89),
		.ST_CHANNEL_W                  (7),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sw_reset_s_rsp_width_adapter (
		.clk                  (clk_reset_clk_clk),                              //       clk.clk
		.reset                (sw_reset_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_004_src_valid),                           //      sink.valid
		.in_channel           (router_004_src_channel),                         //          .channel
		.in_startofpacket     (router_004_src_startofpacket),                   //          .startofpacket
		.in_endofpacket       (router_004_src_endofpacket),                     //          .endofpacket
		.in_ready             (router_004_src_ready),                           //          .ready
		.in_data              (router_004_src_data),                            //          .data
		.out_endofpacket      (sw_reset_s_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sw_reset_s_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sw_reset_s_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sw_reset_s_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sw_reset_s_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sw_reset_s_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (89),
		.BITS_PER_SYMBOL     (89),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_reset_clk_clk),                                         //        in_clk.clk
		.in_reset          (kernel_cntrl_reset_reset_bridge_in_reset_reset),            //  in_clk_reset.reset
		.out_clk           (kernel_clk_out_clk_clk),                                    //       out_clk.clk
		.out_reset         (address_span_extender_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                      //            in.ready
		.in_valid          (cmd_demux_src0_valid),                                      //              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                              //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                    //              .channel
		.in_data           (cmd_demux_src0_data),                                       //              .data
		.out_ready         (crosser_out_ready),                                         //           out.ready
		.out_valid         (crosser_out_valid),                                         //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                 //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                   //              .endofpacket
		.out_channel       (crosser_out_channel),                                       //              .channel
		.out_data          (crosser_out_data),                                          //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (89),
		.BITS_PER_SYMBOL     (89),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_reset_clk_clk),                                         //        in_clk.clk
		.in_reset          (kernel_cntrl_reset_reset_bridge_in_reset_reset),            //  in_clk_reset.reset
		.out_clk           (kernel_clk_out_clk_clk),                                    //       out_clk.clk
		.out_reset         (address_span_extender_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src1_ready),                                      //            in.ready
		.in_valid          (cmd_demux_src1_valid),                                      //              .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                              //              .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                                //              .endofpacket
		.in_channel        (cmd_demux_src1_channel),                                    //              .channel
		.in_data           (cmd_demux_src1_data),                                       //              .data
		.out_ready         (crosser_001_out_ready),                                     //           out.ready
		.out_valid         (crosser_001_out_valid),                                     //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                   //              .channel
		.out_data          (crosser_001_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (89),
		.BITS_PER_SYMBOL     (89),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (kernel_clk_out_clk_clk),                                    //        in_clk.clk
		.in_reset          (address_span_extender_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_reset_clk_clk),                                         //       out_clk.clk
		.out_reset         (kernel_cntrl_reset_reset_bridge_in_reset_reset),            // out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                      //            in.ready
		.in_valid          (rsp_demux_src0_valid),                                      //              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                              //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                    //              .channel
		.in_data           (rsp_demux_src0_data),                                       //              .data
		.out_ready         (crosser_002_out_ready),                                     //           out.ready
		.out_valid         (crosser_002_out_valid),                                     //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                   //              .channel
		.out_data          (crosser_002_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (89),
		.BITS_PER_SYMBOL     (89),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (kernel_clk_out_clk_clk),                                    //        in_clk.clk
		.in_reset          (address_span_extender_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_reset_clk_clk),                                         //       out_clk.clk
		.out_reset         (kernel_cntrl_reset_reset_bridge_in_reset_reset),            // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                                  //            in.ready
		.in_valid          (rsp_demux_001_src0_valid),                                  //              .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                          //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                            //              .endofpacket
		.in_channel        (rsp_demux_001_src0_channel),                                //              .channel
		.in_data           (rsp_demux_001_src0_data),                                   //              .data
		.out_ready         (crosser_003_out_ready),                                     //           out.ready
		.out_valid         (crosser_003_out_valid),                                     //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                   //              .channel
		.out_data          (crosser_003_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	system_acl_iface_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (kernel_clk_out_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (address_span_extender_0_reset_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (address_span_extender_0_windowed_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (address_span_extender_0_windowed_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (address_span_extender_0_windowed_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                     //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                     //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                      //         .error
	);

	system_acl_iface_acl_kernel_interface_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (66),
		.inUsePackets    (0),
		.inDataWidth     (66),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (66),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (kernel_clk_out_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (address_span_extender_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (address_span_extender_0_cntl_agent_rdata_fifo_out_data),    //     in_0.data
		.in_0_valid     (address_span_extender_0_cntl_agent_rdata_fifo_out_valid),   //         .valid
		.in_0_ready     (address_span_extender_0_cntl_agent_rdata_fifo_out_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                          //         .error
	);

	system_acl_iface_acl_kernel_interface_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (66),
		.inUsePackets    (0),
		.inDataWidth     (66),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (66),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_reset_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (kernel_cntrl_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (sys_description_rom_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sys_description_rom_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sys_description_rom_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                  //         .error
	);

	system_acl_iface_acl_kernel_interface_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (66),
		.inUsePackets    (0),
		.inDataWidth     (66),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (66),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_reset_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (sw_reset_clk_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sw_reset_s_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (sw_reset_s_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (sw_reset_s_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)               //         .error
	);

	system_acl_iface_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_reset_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (kernel_cntrl_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (mem_org_mode_s_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (mem_org_mode_s_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (mem_org_mode_s_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)               //         .error
	);

	system_acl_iface_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_reset_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (kernel_cntrl_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (version_id_0_s_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (version_id_0_s_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (version_id_0_s_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)               //         .error
	);

	system_acl_iface_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_reset_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (kernel_cntrl_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (irq_ena_0_s_agent_rdata_fifo_src_data),          //     in_0.data
		.in_0_valid     (irq_ena_0_s_agent_rdata_fifo_src_valid),         //         .valid
		.in_0_ready     (irq_ena_0_s_agent_rdata_fifo_src_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)               //         .error
	);

endmodule
