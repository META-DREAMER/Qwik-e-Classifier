// system_acl_iface_mm_interconnect_3.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 17.1 590

`timescale 1 ps / 1 ps
module system_acl_iface_mm_interconnect_3 (
		input  wire        clock_bridge_0_out_clk_clk,                                     //                                   clock_bridge_0_out_clk.clk
		input  wire        config_clk_out_clk_clk,                                         //                                       config_clk_out_clk.clk
		input  wire        alt_vip_vfr_hdmi_clock_reset_reset_reset_bridge_in_reset_reset, // alt_vip_vfr_hdmi_clock_reset_reset_reset_bridge_in_reset.reset
		input  wire        pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset,         //         pipe_stage_host_ctrl_reset_reset_bridge_in_reset.reset
		input  wire [17:0] pipe_stage_host_ctrl_m0_address,                                //                                  pipe_stage_host_ctrl_m0.address
		output wire        pipe_stage_host_ctrl_m0_waitrequest,                            //                                                         .waitrequest
		input  wire [0:0]  pipe_stage_host_ctrl_m0_burstcount,                             //                                                         .burstcount
		input  wire [3:0]  pipe_stage_host_ctrl_m0_byteenable,                             //                                                         .byteenable
		input  wire        pipe_stage_host_ctrl_m0_read,                                   //                                                         .read
		output wire [31:0] pipe_stage_host_ctrl_m0_readdata,                               //                                                         .readdata
		output wire        pipe_stage_host_ctrl_m0_readdatavalid,                          //                                                         .readdatavalid
		input  wire        pipe_stage_host_ctrl_m0_write,                                  //                                                         .write
		input  wire [31:0] pipe_stage_host_ctrl_m0_writedata,                              //                                                         .writedata
		input  wire        pipe_stage_host_ctrl_m0_debugaccess,                            //                                                         .debugaccess
		output wire [13:0] acl_kernel_interface_ctrl_address,                              //                                acl_kernel_interface_ctrl.address
		output wire        acl_kernel_interface_ctrl_write,                                //                                                         .write
		output wire        acl_kernel_interface_ctrl_read,                                 //                                                         .read
		input  wire [31:0] acl_kernel_interface_ctrl_readdata,                             //                                                         .readdata
		output wire [31:0] acl_kernel_interface_ctrl_writedata,                            //                                                         .writedata
		output wire [0:0]  acl_kernel_interface_ctrl_burstcount,                           //                                                         .burstcount
		output wire [3:0]  acl_kernel_interface_ctrl_byteenable,                           //                                                         .byteenable
		input  wire        acl_kernel_interface_ctrl_readdatavalid,                        //                                                         .readdatavalid
		input  wire        acl_kernel_interface_ctrl_waitrequest,                          //                                                         .waitrequest
		output wire        acl_kernel_interface_ctrl_debugaccess,                          //                                                         .debugaccess
		output wire [4:0]  alt_vip_vfr_hdmi_avalon_slave_address,                          //                            alt_vip_vfr_hdmi_avalon_slave.address
		output wire        alt_vip_vfr_hdmi_avalon_slave_write,                            //                                                         .write
		output wire        alt_vip_vfr_hdmi_avalon_slave_read,                             //                                                         .read
		input  wire [31:0] alt_vip_vfr_hdmi_avalon_slave_readdata,                         //                                                         .readdata
		output wire [31:0] alt_vip_vfr_hdmi_avalon_slave_writedata,                        //                                                         .writedata
		output wire [1:0]  button_pio_s1_address,                                          //                                            button_pio_s1.address
		output wire        button_pio_s1_write,                                            //                                                         .write
		input  wire [31:0] button_pio_s1_readdata,                                         //                                                         .readdata
		output wire [31:0] button_pio_s1_writedata,                                        //                                                         .writedata
		output wire        button_pio_s1_chipselect,                                       //                                                         .chipselect
		output wire [1:0]  dipsw_pio_s1_address,                                           //                                             dipsw_pio_s1.address
		output wire        dipsw_pio_s1_write,                                             //                                                         .write
		input  wire [31:0] dipsw_pio_s1_readdata,                                          //                                                         .readdata
		output wire [31:0] dipsw_pio_s1_writedata,                                         //                                                         .writedata
		output wire        dipsw_pio_s1_chipselect,                                        //                                                         .chipselect
		output wire [1:0]  led_pio_s1_address,                                             //                                               led_pio_s1.address
		output wire        led_pio_s1_write,                                               //                                                         .write
		input  wire [31:0] led_pio_s1_readdata,                                            //                                                         .readdata
		output wire [31:0] led_pio_s1_writedata,                                           //                                                         .writedata
		output wire        led_pio_s1_chipselect,                                          //                                                         .chipselect
		output wire        version_id_s_read,                                              //                                             version_id_s.read
		input  wire [31:0] version_id_s_readdata                                           //                                                         .readdata
	);

	wire         pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_waitrequest;   // pipe_stage_host_ctrl_m0_agent:av_waitrequest -> pipe_stage_host_ctrl_m0_translator:uav_waitrequest
	wire  [31:0] pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_readdata;      // pipe_stage_host_ctrl_m0_agent:av_readdata -> pipe_stage_host_ctrl_m0_translator:uav_readdata
	wire         pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_debugaccess;   // pipe_stage_host_ctrl_m0_translator:uav_debugaccess -> pipe_stage_host_ctrl_m0_agent:av_debugaccess
	wire  [17:0] pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_address;       // pipe_stage_host_ctrl_m0_translator:uav_address -> pipe_stage_host_ctrl_m0_agent:av_address
	wire         pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_read;          // pipe_stage_host_ctrl_m0_translator:uav_read -> pipe_stage_host_ctrl_m0_agent:av_read
	wire   [3:0] pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_byteenable;    // pipe_stage_host_ctrl_m0_translator:uav_byteenable -> pipe_stage_host_ctrl_m0_agent:av_byteenable
	wire         pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_readdatavalid; // pipe_stage_host_ctrl_m0_agent:av_readdatavalid -> pipe_stage_host_ctrl_m0_translator:uav_readdatavalid
	wire         pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_lock;          // pipe_stage_host_ctrl_m0_translator:uav_lock -> pipe_stage_host_ctrl_m0_agent:av_lock
	wire         pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_write;         // pipe_stage_host_ctrl_m0_translator:uav_write -> pipe_stage_host_ctrl_m0_agent:av_write
	wire  [31:0] pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_writedata;     // pipe_stage_host_ctrl_m0_translator:uav_writedata -> pipe_stage_host_ctrl_m0_agent:av_writedata
	wire   [2:0] pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_burstcount;    // pipe_stage_host_ctrl_m0_translator:uav_burstcount -> pipe_stage_host_ctrl_m0_agent:av_burstcount
	wire  [31:0] alt_vip_vfr_hdmi_avalon_slave_agent_m0_readdata;                            // alt_vip_vfr_hdmi_avalon_slave_translator:uav_readdata -> alt_vip_vfr_hdmi_avalon_slave_agent:m0_readdata
	wire         alt_vip_vfr_hdmi_avalon_slave_agent_m0_waitrequest;                         // alt_vip_vfr_hdmi_avalon_slave_translator:uav_waitrequest -> alt_vip_vfr_hdmi_avalon_slave_agent:m0_waitrequest
	wire         alt_vip_vfr_hdmi_avalon_slave_agent_m0_debugaccess;                         // alt_vip_vfr_hdmi_avalon_slave_agent:m0_debugaccess -> alt_vip_vfr_hdmi_avalon_slave_translator:uav_debugaccess
	wire  [17:0] alt_vip_vfr_hdmi_avalon_slave_agent_m0_address;                             // alt_vip_vfr_hdmi_avalon_slave_agent:m0_address -> alt_vip_vfr_hdmi_avalon_slave_translator:uav_address
	wire   [3:0] alt_vip_vfr_hdmi_avalon_slave_agent_m0_byteenable;                          // alt_vip_vfr_hdmi_avalon_slave_agent:m0_byteenable -> alt_vip_vfr_hdmi_avalon_slave_translator:uav_byteenable
	wire         alt_vip_vfr_hdmi_avalon_slave_agent_m0_read;                                // alt_vip_vfr_hdmi_avalon_slave_agent:m0_read -> alt_vip_vfr_hdmi_avalon_slave_translator:uav_read
	wire         alt_vip_vfr_hdmi_avalon_slave_agent_m0_readdatavalid;                       // alt_vip_vfr_hdmi_avalon_slave_translator:uav_readdatavalid -> alt_vip_vfr_hdmi_avalon_slave_agent:m0_readdatavalid
	wire         alt_vip_vfr_hdmi_avalon_slave_agent_m0_lock;                                // alt_vip_vfr_hdmi_avalon_slave_agent:m0_lock -> alt_vip_vfr_hdmi_avalon_slave_translator:uav_lock
	wire  [31:0] alt_vip_vfr_hdmi_avalon_slave_agent_m0_writedata;                           // alt_vip_vfr_hdmi_avalon_slave_agent:m0_writedata -> alt_vip_vfr_hdmi_avalon_slave_translator:uav_writedata
	wire         alt_vip_vfr_hdmi_avalon_slave_agent_m0_write;                               // alt_vip_vfr_hdmi_avalon_slave_agent:m0_write -> alt_vip_vfr_hdmi_avalon_slave_translator:uav_write
	wire   [2:0] alt_vip_vfr_hdmi_avalon_slave_agent_m0_burstcount;                          // alt_vip_vfr_hdmi_avalon_slave_agent:m0_burstcount -> alt_vip_vfr_hdmi_avalon_slave_translator:uav_burstcount
	wire         alt_vip_vfr_hdmi_avalon_slave_agent_rf_source_valid;                        // alt_vip_vfr_hdmi_avalon_slave_agent:rf_source_valid -> alt_vip_vfr_hdmi_avalon_slave_agent_rsp_fifo:in_valid
	wire  [92:0] alt_vip_vfr_hdmi_avalon_slave_agent_rf_source_data;                         // alt_vip_vfr_hdmi_avalon_slave_agent:rf_source_data -> alt_vip_vfr_hdmi_avalon_slave_agent_rsp_fifo:in_data
	wire         alt_vip_vfr_hdmi_avalon_slave_agent_rf_source_ready;                        // alt_vip_vfr_hdmi_avalon_slave_agent_rsp_fifo:in_ready -> alt_vip_vfr_hdmi_avalon_slave_agent:rf_source_ready
	wire         alt_vip_vfr_hdmi_avalon_slave_agent_rf_source_startofpacket;                // alt_vip_vfr_hdmi_avalon_slave_agent:rf_source_startofpacket -> alt_vip_vfr_hdmi_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire         alt_vip_vfr_hdmi_avalon_slave_agent_rf_source_endofpacket;                  // alt_vip_vfr_hdmi_avalon_slave_agent:rf_source_endofpacket -> alt_vip_vfr_hdmi_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire         alt_vip_vfr_hdmi_avalon_slave_agent_rsp_fifo_out_valid;                     // alt_vip_vfr_hdmi_avalon_slave_agent_rsp_fifo:out_valid -> alt_vip_vfr_hdmi_avalon_slave_agent:rf_sink_valid
	wire  [92:0] alt_vip_vfr_hdmi_avalon_slave_agent_rsp_fifo_out_data;                      // alt_vip_vfr_hdmi_avalon_slave_agent_rsp_fifo:out_data -> alt_vip_vfr_hdmi_avalon_slave_agent:rf_sink_data
	wire         alt_vip_vfr_hdmi_avalon_slave_agent_rsp_fifo_out_ready;                     // alt_vip_vfr_hdmi_avalon_slave_agent:rf_sink_ready -> alt_vip_vfr_hdmi_avalon_slave_agent_rsp_fifo:out_ready
	wire         alt_vip_vfr_hdmi_avalon_slave_agent_rsp_fifo_out_startofpacket;             // alt_vip_vfr_hdmi_avalon_slave_agent_rsp_fifo:out_startofpacket -> alt_vip_vfr_hdmi_avalon_slave_agent:rf_sink_startofpacket
	wire         alt_vip_vfr_hdmi_avalon_slave_agent_rsp_fifo_out_endofpacket;               // alt_vip_vfr_hdmi_avalon_slave_agent_rsp_fifo:out_endofpacket -> alt_vip_vfr_hdmi_avalon_slave_agent:rf_sink_endofpacket
	wire         alt_vip_vfr_hdmi_avalon_slave_agent_rdata_fifo_src_valid;                   // alt_vip_vfr_hdmi_avalon_slave_agent:rdata_fifo_src_valid -> alt_vip_vfr_hdmi_avalon_slave_agent_rdata_fifo:in_valid
	wire  [33:0] alt_vip_vfr_hdmi_avalon_slave_agent_rdata_fifo_src_data;                    // alt_vip_vfr_hdmi_avalon_slave_agent:rdata_fifo_src_data -> alt_vip_vfr_hdmi_avalon_slave_agent_rdata_fifo:in_data
	wire         alt_vip_vfr_hdmi_avalon_slave_agent_rdata_fifo_src_ready;                   // alt_vip_vfr_hdmi_avalon_slave_agent_rdata_fifo:in_ready -> alt_vip_vfr_hdmi_avalon_slave_agent:rdata_fifo_src_ready
	wire         cmd_mux_src_valid;                                                          // cmd_mux:src_valid -> alt_vip_vfr_hdmi_avalon_slave_agent:cp_valid
	wire  [91:0] cmd_mux_src_data;                                                           // cmd_mux:src_data -> alt_vip_vfr_hdmi_avalon_slave_agent:cp_data
	wire         cmd_mux_src_ready;                                                          // alt_vip_vfr_hdmi_avalon_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [5:0] cmd_mux_src_channel;                                                        // cmd_mux:src_channel -> alt_vip_vfr_hdmi_avalon_slave_agent:cp_channel
	wire         cmd_mux_src_startofpacket;                                                  // cmd_mux:src_startofpacket -> alt_vip_vfr_hdmi_avalon_slave_agent:cp_startofpacket
	wire         cmd_mux_src_endofpacket;                                                    // cmd_mux:src_endofpacket -> alt_vip_vfr_hdmi_avalon_slave_agent:cp_endofpacket
	wire  [31:0] acl_kernel_interface_ctrl_agent_m0_readdata;                                // acl_kernel_interface_ctrl_translator:uav_readdata -> acl_kernel_interface_ctrl_agent:m0_readdata
	wire         acl_kernel_interface_ctrl_agent_m0_waitrequest;                             // acl_kernel_interface_ctrl_translator:uav_waitrequest -> acl_kernel_interface_ctrl_agent:m0_waitrequest
	wire         acl_kernel_interface_ctrl_agent_m0_debugaccess;                             // acl_kernel_interface_ctrl_agent:m0_debugaccess -> acl_kernel_interface_ctrl_translator:uav_debugaccess
	wire  [17:0] acl_kernel_interface_ctrl_agent_m0_address;                                 // acl_kernel_interface_ctrl_agent:m0_address -> acl_kernel_interface_ctrl_translator:uav_address
	wire   [3:0] acl_kernel_interface_ctrl_agent_m0_byteenable;                              // acl_kernel_interface_ctrl_agent:m0_byteenable -> acl_kernel_interface_ctrl_translator:uav_byteenable
	wire         acl_kernel_interface_ctrl_agent_m0_read;                                    // acl_kernel_interface_ctrl_agent:m0_read -> acl_kernel_interface_ctrl_translator:uav_read
	wire         acl_kernel_interface_ctrl_agent_m0_readdatavalid;                           // acl_kernel_interface_ctrl_translator:uav_readdatavalid -> acl_kernel_interface_ctrl_agent:m0_readdatavalid
	wire         acl_kernel_interface_ctrl_agent_m0_lock;                                    // acl_kernel_interface_ctrl_agent:m0_lock -> acl_kernel_interface_ctrl_translator:uav_lock
	wire  [31:0] acl_kernel_interface_ctrl_agent_m0_writedata;                               // acl_kernel_interface_ctrl_agent:m0_writedata -> acl_kernel_interface_ctrl_translator:uav_writedata
	wire         acl_kernel_interface_ctrl_agent_m0_write;                                   // acl_kernel_interface_ctrl_agent:m0_write -> acl_kernel_interface_ctrl_translator:uav_write
	wire   [2:0] acl_kernel_interface_ctrl_agent_m0_burstcount;                              // acl_kernel_interface_ctrl_agent:m0_burstcount -> acl_kernel_interface_ctrl_translator:uav_burstcount
	wire         acl_kernel_interface_ctrl_agent_rf_source_valid;                            // acl_kernel_interface_ctrl_agent:rf_source_valid -> acl_kernel_interface_ctrl_agent_rsp_fifo:in_valid
	wire  [92:0] acl_kernel_interface_ctrl_agent_rf_source_data;                             // acl_kernel_interface_ctrl_agent:rf_source_data -> acl_kernel_interface_ctrl_agent_rsp_fifo:in_data
	wire         acl_kernel_interface_ctrl_agent_rf_source_ready;                            // acl_kernel_interface_ctrl_agent_rsp_fifo:in_ready -> acl_kernel_interface_ctrl_agent:rf_source_ready
	wire         acl_kernel_interface_ctrl_agent_rf_source_startofpacket;                    // acl_kernel_interface_ctrl_agent:rf_source_startofpacket -> acl_kernel_interface_ctrl_agent_rsp_fifo:in_startofpacket
	wire         acl_kernel_interface_ctrl_agent_rf_source_endofpacket;                      // acl_kernel_interface_ctrl_agent:rf_source_endofpacket -> acl_kernel_interface_ctrl_agent_rsp_fifo:in_endofpacket
	wire         acl_kernel_interface_ctrl_agent_rsp_fifo_out_valid;                         // acl_kernel_interface_ctrl_agent_rsp_fifo:out_valid -> acl_kernel_interface_ctrl_agent:rf_sink_valid
	wire  [92:0] acl_kernel_interface_ctrl_agent_rsp_fifo_out_data;                          // acl_kernel_interface_ctrl_agent_rsp_fifo:out_data -> acl_kernel_interface_ctrl_agent:rf_sink_data
	wire         acl_kernel_interface_ctrl_agent_rsp_fifo_out_ready;                         // acl_kernel_interface_ctrl_agent:rf_sink_ready -> acl_kernel_interface_ctrl_agent_rsp_fifo:out_ready
	wire         acl_kernel_interface_ctrl_agent_rsp_fifo_out_startofpacket;                 // acl_kernel_interface_ctrl_agent_rsp_fifo:out_startofpacket -> acl_kernel_interface_ctrl_agent:rf_sink_startofpacket
	wire         acl_kernel_interface_ctrl_agent_rsp_fifo_out_endofpacket;                   // acl_kernel_interface_ctrl_agent_rsp_fifo:out_endofpacket -> acl_kernel_interface_ctrl_agent:rf_sink_endofpacket
	wire         cmd_mux_001_src_valid;                                                      // cmd_mux_001:src_valid -> acl_kernel_interface_ctrl_agent:cp_valid
	wire  [91:0] cmd_mux_001_src_data;                                                       // cmd_mux_001:src_data -> acl_kernel_interface_ctrl_agent:cp_data
	wire         cmd_mux_001_src_ready;                                                      // acl_kernel_interface_ctrl_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [5:0] cmd_mux_001_src_channel;                                                    // cmd_mux_001:src_channel -> acl_kernel_interface_ctrl_agent:cp_channel
	wire         cmd_mux_001_src_startofpacket;                                              // cmd_mux_001:src_startofpacket -> acl_kernel_interface_ctrl_agent:cp_startofpacket
	wire         cmd_mux_001_src_endofpacket;                                                // cmd_mux_001:src_endofpacket -> acl_kernel_interface_ctrl_agent:cp_endofpacket
	wire  [31:0] version_id_s_agent_m0_readdata;                                             // version_id_s_translator:uav_readdata -> version_id_s_agent:m0_readdata
	wire         version_id_s_agent_m0_waitrequest;                                          // version_id_s_translator:uav_waitrequest -> version_id_s_agent:m0_waitrequest
	wire         version_id_s_agent_m0_debugaccess;                                          // version_id_s_agent:m0_debugaccess -> version_id_s_translator:uav_debugaccess
	wire  [17:0] version_id_s_agent_m0_address;                                              // version_id_s_agent:m0_address -> version_id_s_translator:uav_address
	wire   [3:0] version_id_s_agent_m0_byteenable;                                           // version_id_s_agent:m0_byteenable -> version_id_s_translator:uav_byteenable
	wire         version_id_s_agent_m0_read;                                                 // version_id_s_agent:m0_read -> version_id_s_translator:uav_read
	wire         version_id_s_agent_m0_readdatavalid;                                        // version_id_s_translator:uav_readdatavalid -> version_id_s_agent:m0_readdatavalid
	wire         version_id_s_agent_m0_lock;                                                 // version_id_s_agent:m0_lock -> version_id_s_translator:uav_lock
	wire  [31:0] version_id_s_agent_m0_writedata;                                            // version_id_s_agent:m0_writedata -> version_id_s_translator:uav_writedata
	wire         version_id_s_agent_m0_write;                                                // version_id_s_agent:m0_write -> version_id_s_translator:uav_write
	wire   [2:0] version_id_s_agent_m0_burstcount;                                           // version_id_s_agent:m0_burstcount -> version_id_s_translator:uav_burstcount
	wire         version_id_s_agent_rf_source_valid;                                         // version_id_s_agent:rf_source_valid -> version_id_s_agent_rsp_fifo:in_valid
	wire  [92:0] version_id_s_agent_rf_source_data;                                          // version_id_s_agent:rf_source_data -> version_id_s_agent_rsp_fifo:in_data
	wire         version_id_s_agent_rf_source_ready;                                         // version_id_s_agent_rsp_fifo:in_ready -> version_id_s_agent:rf_source_ready
	wire         version_id_s_agent_rf_source_startofpacket;                                 // version_id_s_agent:rf_source_startofpacket -> version_id_s_agent_rsp_fifo:in_startofpacket
	wire         version_id_s_agent_rf_source_endofpacket;                                   // version_id_s_agent:rf_source_endofpacket -> version_id_s_agent_rsp_fifo:in_endofpacket
	wire         version_id_s_agent_rsp_fifo_out_valid;                                      // version_id_s_agent_rsp_fifo:out_valid -> version_id_s_agent:rf_sink_valid
	wire  [92:0] version_id_s_agent_rsp_fifo_out_data;                                       // version_id_s_agent_rsp_fifo:out_data -> version_id_s_agent:rf_sink_data
	wire         version_id_s_agent_rsp_fifo_out_ready;                                      // version_id_s_agent:rf_sink_ready -> version_id_s_agent_rsp_fifo:out_ready
	wire         version_id_s_agent_rsp_fifo_out_startofpacket;                              // version_id_s_agent_rsp_fifo:out_startofpacket -> version_id_s_agent:rf_sink_startofpacket
	wire         version_id_s_agent_rsp_fifo_out_endofpacket;                                // version_id_s_agent_rsp_fifo:out_endofpacket -> version_id_s_agent:rf_sink_endofpacket
	wire         cmd_mux_002_src_valid;                                                      // cmd_mux_002:src_valid -> version_id_s_agent:cp_valid
	wire  [91:0] cmd_mux_002_src_data;                                                       // cmd_mux_002:src_data -> version_id_s_agent:cp_data
	wire         cmd_mux_002_src_ready;                                                      // version_id_s_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [5:0] cmd_mux_002_src_channel;                                                    // cmd_mux_002:src_channel -> version_id_s_agent:cp_channel
	wire         cmd_mux_002_src_startofpacket;                                              // cmd_mux_002:src_startofpacket -> version_id_s_agent:cp_startofpacket
	wire         cmd_mux_002_src_endofpacket;                                                // cmd_mux_002:src_endofpacket -> version_id_s_agent:cp_endofpacket
	wire  [31:0] button_pio_s1_agent_m0_readdata;                                            // button_pio_s1_translator:uav_readdata -> button_pio_s1_agent:m0_readdata
	wire         button_pio_s1_agent_m0_waitrequest;                                         // button_pio_s1_translator:uav_waitrequest -> button_pio_s1_agent:m0_waitrequest
	wire         button_pio_s1_agent_m0_debugaccess;                                         // button_pio_s1_agent:m0_debugaccess -> button_pio_s1_translator:uav_debugaccess
	wire  [17:0] button_pio_s1_agent_m0_address;                                             // button_pio_s1_agent:m0_address -> button_pio_s1_translator:uav_address
	wire   [3:0] button_pio_s1_agent_m0_byteenable;                                          // button_pio_s1_agent:m0_byteenable -> button_pio_s1_translator:uav_byteenable
	wire         button_pio_s1_agent_m0_read;                                                // button_pio_s1_agent:m0_read -> button_pio_s1_translator:uav_read
	wire         button_pio_s1_agent_m0_readdatavalid;                                       // button_pio_s1_translator:uav_readdatavalid -> button_pio_s1_agent:m0_readdatavalid
	wire         button_pio_s1_agent_m0_lock;                                                // button_pio_s1_agent:m0_lock -> button_pio_s1_translator:uav_lock
	wire  [31:0] button_pio_s1_agent_m0_writedata;                                           // button_pio_s1_agent:m0_writedata -> button_pio_s1_translator:uav_writedata
	wire         button_pio_s1_agent_m0_write;                                               // button_pio_s1_agent:m0_write -> button_pio_s1_translator:uav_write
	wire   [2:0] button_pio_s1_agent_m0_burstcount;                                          // button_pio_s1_agent:m0_burstcount -> button_pio_s1_translator:uav_burstcount
	wire         button_pio_s1_agent_rf_source_valid;                                        // button_pio_s1_agent:rf_source_valid -> button_pio_s1_agent_rsp_fifo:in_valid
	wire  [92:0] button_pio_s1_agent_rf_source_data;                                         // button_pio_s1_agent:rf_source_data -> button_pio_s1_agent_rsp_fifo:in_data
	wire         button_pio_s1_agent_rf_source_ready;                                        // button_pio_s1_agent_rsp_fifo:in_ready -> button_pio_s1_agent:rf_source_ready
	wire         button_pio_s1_agent_rf_source_startofpacket;                                // button_pio_s1_agent:rf_source_startofpacket -> button_pio_s1_agent_rsp_fifo:in_startofpacket
	wire         button_pio_s1_agent_rf_source_endofpacket;                                  // button_pio_s1_agent:rf_source_endofpacket -> button_pio_s1_agent_rsp_fifo:in_endofpacket
	wire         button_pio_s1_agent_rsp_fifo_out_valid;                                     // button_pio_s1_agent_rsp_fifo:out_valid -> button_pio_s1_agent:rf_sink_valid
	wire  [92:0] button_pio_s1_agent_rsp_fifo_out_data;                                      // button_pio_s1_agent_rsp_fifo:out_data -> button_pio_s1_agent:rf_sink_data
	wire         button_pio_s1_agent_rsp_fifo_out_ready;                                     // button_pio_s1_agent:rf_sink_ready -> button_pio_s1_agent_rsp_fifo:out_ready
	wire         button_pio_s1_agent_rsp_fifo_out_startofpacket;                             // button_pio_s1_agent_rsp_fifo:out_startofpacket -> button_pio_s1_agent:rf_sink_startofpacket
	wire         button_pio_s1_agent_rsp_fifo_out_endofpacket;                               // button_pio_s1_agent_rsp_fifo:out_endofpacket -> button_pio_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_003_src_valid;                                                      // cmd_mux_003:src_valid -> button_pio_s1_agent:cp_valid
	wire  [91:0] cmd_mux_003_src_data;                                                       // cmd_mux_003:src_data -> button_pio_s1_agent:cp_data
	wire         cmd_mux_003_src_ready;                                                      // button_pio_s1_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [5:0] cmd_mux_003_src_channel;                                                    // cmd_mux_003:src_channel -> button_pio_s1_agent:cp_channel
	wire         cmd_mux_003_src_startofpacket;                                              // cmd_mux_003:src_startofpacket -> button_pio_s1_agent:cp_startofpacket
	wire         cmd_mux_003_src_endofpacket;                                                // cmd_mux_003:src_endofpacket -> button_pio_s1_agent:cp_endofpacket
	wire  [31:0] dipsw_pio_s1_agent_m0_readdata;                                             // dipsw_pio_s1_translator:uav_readdata -> dipsw_pio_s1_agent:m0_readdata
	wire         dipsw_pio_s1_agent_m0_waitrequest;                                          // dipsw_pio_s1_translator:uav_waitrequest -> dipsw_pio_s1_agent:m0_waitrequest
	wire         dipsw_pio_s1_agent_m0_debugaccess;                                          // dipsw_pio_s1_agent:m0_debugaccess -> dipsw_pio_s1_translator:uav_debugaccess
	wire  [17:0] dipsw_pio_s1_agent_m0_address;                                              // dipsw_pio_s1_agent:m0_address -> dipsw_pio_s1_translator:uav_address
	wire   [3:0] dipsw_pio_s1_agent_m0_byteenable;                                           // dipsw_pio_s1_agent:m0_byteenable -> dipsw_pio_s1_translator:uav_byteenable
	wire         dipsw_pio_s1_agent_m0_read;                                                 // dipsw_pio_s1_agent:m0_read -> dipsw_pio_s1_translator:uav_read
	wire         dipsw_pio_s1_agent_m0_readdatavalid;                                        // dipsw_pio_s1_translator:uav_readdatavalid -> dipsw_pio_s1_agent:m0_readdatavalid
	wire         dipsw_pio_s1_agent_m0_lock;                                                 // dipsw_pio_s1_agent:m0_lock -> dipsw_pio_s1_translator:uav_lock
	wire  [31:0] dipsw_pio_s1_agent_m0_writedata;                                            // dipsw_pio_s1_agent:m0_writedata -> dipsw_pio_s1_translator:uav_writedata
	wire         dipsw_pio_s1_agent_m0_write;                                                // dipsw_pio_s1_agent:m0_write -> dipsw_pio_s1_translator:uav_write
	wire   [2:0] dipsw_pio_s1_agent_m0_burstcount;                                           // dipsw_pio_s1_agent:m0_burstcount -> dipsw_pio_s1_translator:uav_burstcount
	wire         dipsw_pio_s1_agent_rf_source_valid;                                         // dipsw_pio_s1_agent:rf_source_valid -> dipsw_pio_s1_agent_rsp_fifo:in_valid
	wire  [92:0] dipsw_pio_s1_agent_rf_source_data;                                          // dipsw_pio_s1_agent:rf_source_data -> dipsw_pio_s1_agent_rsp_fifo:in_data
	wire         dipsw_pio_s1_agent_rf_source_ready;                                         // dipsw_pio_s1_agent_rsp_fifo:in_ready -> dipsw_pio_s1_agent:rf_source_ready
	wire         dipsw_pio_s1_agent_rf_source_startofpacket;                                 // dipsw_pio_s1_agent:rf_source_startofpacket -> dipsw_pio_s1_agent_rsp_fifo:in_startofpacket
	wire         dipsw_pio_s1_agent_rf_source_endofpacket;                                   // dipsw_pio_s1_agent:rf_source_endofpacket -> dipsw_pio_s1_agent_rsp_fifo:in_endofpacket
	wire         dipsw_pio_s1_agent_rsp_fifo_out_valid;                                      // dipsw_pio_s1_agent_rsp_fifo:out_valid -> dipsw_pio_s1_agent:rf_sink_valid
	wire  [92:0] dipsw_pio_s1_agent_rsp_fifo_out_data;                                       // dipsw_pio_s1_agent_rsp_fifo:out_data -> dipsw_pio_s1_agent:rf_sink_data
	wire         dipsw_pio_s1_agent_rsp_fifo_out_ready;                                      // dipsw_pio_s1_agent:rf_sink_ready -> dipsw_pio_s1_agent_rsp_fifo:out_ready
	wire         dipsw_pio_s1_agent_rsp_fifo_out_startofpacket;                              // dipsw_pio_s1_agent_rsp_fifo:out_startofpacket -> dipsw_pio_s1_agent:rf_sink_startofpacket
	wire         dipsw_pio_s1_agent_rsp_fifo_out_endofpacket;                                // dipsw_pio_s1_agent_rsp_fifo:out_endofpacket -> dipsw_pio_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_004_src_valid;                                                      // cmd_mux_004:src_valid -> dipsw_pio_s1_agent:cp_valid
	wire  [91:0] cmd_mux_004_src_data;                                                       // cmd_mux_004:src_data -> dipsw_pio_s1_agent:cp_data
	wire         cmd_mux_004_src_ready;                                                      // dipsw_pio_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [5:0] cmd_mux_004_src_channel;                                                    // cmd_mux_004:src_channel -> dipsw_pio_s1_agent:cp_channel
	wire         cmd_mux_004_src_startofpacket;                                              // cmd_mux_004:src_startofpacket -> dipsw_pio_s1_agent:cp_startofpacket
	wire         cmd_mux_004_src_endofpacket;                                                // cmd_mux_004:src_endofpacket -> dipsw_pio_s1_agent:cp_endofpacket
	wire  [31:0] led_pio_s1_agent_m0_readdata;                                               // led_pio_s1_translator:uav_readdata -> led_pio_s1_agent:m0_readdata
	wire         led_pio_s1_agent_m0_waitrequest;                                            // led_pio_s1_translator:uav_waitrequest -> led_pio_s1_agent:m0_waitrequest
	wire         led_pio_s1_agent_m0_debugaccess;                                            // led_pio_s1_agent:m0_debugaccess -> led_pio_s1_translator:uav_debugaccess
	wire  [17:0] led_pio_s1_agent_m0_address;                                                // led_pio_s1_agent:m0_address -> led_pio_s1_translator:uav_address
	wire   [3:0] led_pio_s1_agent_m0_byteenable;                                             // led_pio_s1_agent:m0_byteenable -> led_pio_s1_translator:uav_byteenable
	wire         led_pio_s1_agent_m0_read;                                                   // led_pio_s1_agent:m0_read -> led_pio_s1_translator:uav_read
	wire         led_pio_s1_agent_m0_readdatavalid;                                          // led_pio_s1_translator:uav_readdatavalid -> led_pio_s1_agent:m0_readdatavalid
	wire         led_pio_s1_agent_m0_lock;                                                   // led_pio_s1_agent:m0_lock -> led_pio_s1_translator:uav_lock
	wire  [31:0] led_pio_s1_agent_m0_writedata;                                              // led_pio_s1_agent:m0_writedata -> led_pio_s1_translator:uav_writedata
	wire         led_pio_s1_agent_m0_write;                                                  // led_pio_s1_agent:m0_write -> led_pio_s1_translator:uav_write
	wire   [2:0] led_pio_s1_agent_m0_burstcount;                                             // led_pio_s1_agent:m0_burstcount -> led_pio_s1_translator:uav_burstcount
	wire         led_pio_s1_agent_rf_source_valid;                                           // led_pio_s1_agent:rf_source_valid -> led_pio_s1_agent_rsp_fifo:in_valid
	wire  [92:0] led_pio_s1_agent_rf_source_data;                                            // led_pio_s1_agent:rf_source_data -> led_pio_s1_agent_rsp_fifo:in_data
	wire         led_pio_s1_agent_rf_source_ready;                                           // led_pio_s1_agent_rsp_fifo:in_ready -> led_pio_s1_agent:rf_source_ready
	wire         led_pio_s1_agent_rf_source_startofpacket;                                   // led_pio_s1_agent:rf_source_startofpacket -> led_pio_s1_agent_rsp_fifo:in_startofpacket
	wire         led_pio_s1_agent_rf_source_endofpacket;                                     // led_pio_s1_agent:rf_source_endofpacket -> led_pio_s1_agent_rsp_fifo:in_endofpacket
	wire         led_pio_s1_agent_rsp_fifo_out_valid;                                        // led_pio_s1_agent_rsp_fifo:out_valid -> led_pio_s1_agent:rf_sink_valid
	wire  [92:0] led_pio_s1_agent_rsp_fifo_out_data;                                         // led_pio_s1_agent_rsp_fifo:out_data -> led_pio_s1_agent:rf_sink_data
	wire         led_pio_s1_agent_rsp_fifo_out_ready;                                        // led_pio_s1_agent:rf_sink_ready -> led_pio_s1_agent_rsp_fifo:out_ready
	wire         led_pio_s1_agent_rsp_fifo_out_startofpacket;                                // led_pio_s1_agent_rsp_fifo:out_startofpacket -> led_pio_s1_agent:rf_sink_startofpacket
	wire         led_pio_s1_agent_rsp_fifo_out_endofpacket;                                  // led_pio_s1_agent_rsp_fifo:out_endofpacket -> led_pio_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_005_src_valid;                                                      // cmd_mux_005:src_valid -> led_pio_s1_agent:cp_valid
	wire  [91:0] cmd_mux_005_src_data;                                                       // cmd_mux_005:src_data -> led_pio_s1_agent:cp_data
	wire         cmd_mux_005_src_ready;                                                      // led_pio_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [5:0] cmd_mux_005_src_channel;                                                    // cmd_mux_005:src_channel -> led_pio_s1_agent:cp_channel
	wire         cmd_mux_005_src_startofpacket;                                              // cmd_mux_005:src_startofpacket -> led_pio_s1_agent:cp_startofpacket
	wire         cmd_mux_005_src_endofpacket;                                                // cmd_mux_005:src_endofpacket -> led_pio_s1_agent:cp_endofpacket
	wire         pipe_stage_host_ctrl_m0_agent_cp_valid;                                     // pipe_stage_host_ctrl_m0_agent:cp_valid -> router:sink_valid
	wire  [91:0] pipe_stage_host_ctrl_m0_agent_cp_data;                                      // pipe_stage_host_ctrl_m0_agent:cp_data -> router:sink_data
	wire         pipe_stage_host_ctrl_m0_agent_cp_ready;                                     // router:sink_ready -> pipe_stage_host_ctrl_m0_agent:cp_ready
	wire         pipe_stage_host_ctrl_m0_agent_cp_startofpacket;                             // pipe_stage_host_ctrl_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire         pipe_stage_host_ctrl_m0_agent_cp_endofpacket;                               // pipe_stage_host_ctrl_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire         alt_vip_vfr_hdmi_avalon_slave_agent_rp_valid;                               // alt_vip_vfr_hdmi_avalon_slave_agent:rp_valid -> router_001:sink_valid
	wire  [91:0] alt_vip_vfr_hdmi_avalon_slave_agent_rp_data;                                // alt_vip_vfr_hdmi_avalon_slave_agent:rp_data -> router_001:sink_data
	wire         alt_vip_vfr_hdmi_avalon_slave_agent_rp_ready;                               // router_001:sink_ready -> alt_vip_vfr_hdmi_avalon_slave_agent:rp_ready
	wire         alt_vip_vfr_hdmi_avalon_slave_agent_rp_startofpacket;                       // alt_vip_vfr_hdmi_avalon_slave_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire         alt_vip_vfr_hdmi_avalon_slave_agent_rp_endofpacket;                         // alt_vip_vfr_hdmi_avalon_slave_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire         router_001_src_valid;                                                       // router_001:src_valid -> rsp_demux:sink_valid
	wire  [91:0] router_001_src_data;                                                        // router_001:src_data -> rsp_demux:sink_data
	wire         router_001_src_ready;                                                       // rsp_demux:sink_ready -> router_001:src_ready
	wire   [5:0] router_001_src_channel;                                                     // router_001:src_channel -> rsp_demux:sink_channel
	wire         router_001_src_startofpacket;                                               // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire         router_001_src_endofpacket;                                                 // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         acl_kernel_interface_ctrl_agent_rp_valid;                                   // acl_kernel_interface_ctrl_agent:rp_valid -> router_002:sink_valid
	wire  [91:0] acl_kernel_interface_ctrl_agent_rp_data;                                    // acl_kernel_interface_ctrl_agent:rp_data -> router_002:sink_data
	wire         acl_kernel_interface_ctrl_agent_rp_ready;                                   // router_002:sink_ready -> acl_kernel_interface_ctrl_agent:rp_ready
	wire         acl_kernel_interface_ctrl_agent_rp_startofpacket;                           // acl_kernel_interface_ctrl_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire         acl_kernel_interface_ctrl_agent_rp_endofpacket;                             // acl_kernel_interface_ctrl_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         router_002_src_valid;                                                       // router_002:src_valid -> rsp_demux_001:sink_valid
	wire  [91:0] router_002_src_data;                                                        // router_002:src_data -> rsp_demux_001:sink_data
	wire         router_002_src_ready;                                                       // rsp_demux_001:sink_ready -> router_002:src_ready
	wire   [5:0] router_002_src_channel;                                                     // router_002:src_channel -> rsp_demux_001:sink_channel
	wire         router_002_src_startofpacket;                                               // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire         router_002_src_endofpacket;                                                 // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         version_id_s_agent_rp_valid;                                                // version_id_s_agent:rp_valid -> router_003:sink_valid
	wire  [91:0] version_id_s_agent_rp_data;                                                 // version_id_s_agent:rp_data -> router_003:sink_data
	wire         version_id_s_agent_rp_ready;                                                // router_003:sink_ready -> version_id_s_agent:rp_ready
	wire         version_id_s_agent_rp_startofpacket;                                        // version_id_s_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire         version_id_s_agent_rp_endofpacket;                                          // version_id_s_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         router_003_src_valid;                                                       // router_003:src_valid -> rsp_demux_002:sink_valid
	wire  [91:0] router_003_src_data;                                                        // router_003:src_data -> rsp_demux_002:sink_data
	wire         router_003_src_ready;                                                       // rsp_demux_002:sink_ready -> router_003:src_ready
	wire   [5:0] router_003_src_channel;                                                     // router_003:src_channel -> rsp_demux_002:sink_channel
	wire         router_003_src_startofpacket;                                               // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire         router_003_src_endofpacket;                                                 // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire         button_pio_s1_agent_rp_valid;                                               // button_pio_s1_agent:rp_valid -> router_004:sink_valid
	wire  [91:0] button_pio_s1_agent_rp_data;                                                // button_pio_s1_agent:rp_data -> router_004:sink_data
	wire         button_pio_s1_agent_rp_ready;                                               // router_004:sink_ready -> button_pio_s1_agent:rp_ready
	wire         button_pio_s1_agent_rp_startofpacket;                                       // button_pio_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire         button_pio_s1_agent_rp_endofpacket;                                         // button_pio_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire         router_004_src_valid;                                                       // router_004:src_valid -> rsp_demux_003:sink_valid
	wire  [91:0] router_004_src_data;                                                        // router_004:src_data -> rsp_demux_003:sink_data
	wire         router_004_src_ready;                                                       // rsp_demux_003:sink_ready -> router_004:src_ready
	wire   [5:0] router_004_src_channel;                                                     // router_004:src_channel -> rsp_demux_003:sink_channel
	wire         router_004_src_startofpacket;                                               // router_004:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire         router_004_src_endofpacket;                                                 // router_004:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire         dipsw_pio_s1_agent_rp_valid;                                                // dipsw_pio_s1_agent:rp_valid -> router_005:sink_valid
	wire  [91:0] dipsw_pio_s1_agent_rp_data;                                                 // dipsw_pio_s1_agent:rp_data -> router_005:sink_data
	wire         dipsw_pio_s1_agent_rp_ready;                                                // router_005:sink_ready -> dipsw_pio_s1_agent:rp_ready
	wire         dipsw_pio_s1_agent_rp_startofpacket;                                        // dipsw_pio_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire         dipsw_pio_s1_agent_rp_endofpacket;                                          // dipsw_pio_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire         router_005_src_valid;                                                       // router_005:src_valid -> rsp_demux_004:sink_valid
	wire  [91:0] router_005_src_data;                                                        // router_005:src_data -> rsp_demux_004:sink_data
	wire         router_005_src_ready;                                                       // rsp_demux_004:sink_ready -> router_005:src_ready
	wire   [5:0] router_005_src_channel;                                                     // router_005:src_channel -> rsp_demux_004:sink_channel
	wire         router_005_src_startofpacket;                                               // router_005:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire         router_005_src_endofpacket;                                                 // router_005:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire         led_pio_s1_agent_rp_valid;                                                  // led_pio_s1_agent:rp_valid -> router_006:sink_valid
	wire  [91:0] led_pio_s1_agent_rp_data;                                                   // led_pio_s1_agent:rp_data -> router_006:sink_data
	wire         led_pio_s1_agent_rp_ready;                                                  // router_006:sink_ready -> led_pio_s1_agent:rp_ready
	wire         led_pio_s1_agent_rp_startofpacket;                                          // led_pio_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire         led_pio_s1_agent_rp_endofpacket;                                            // led_pio_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire         router_006_src_valid;                                                       // router_006:src_valid -> rsp_demux_005:sink_valid
	wire  [91:0] router_006_src_data;                                                        // router_006:src_data -> rsp_demux_005:sink_data
	wire         router_006_src_ready;                                                       // rsp_demux_005:sink_ready -> router_006:src_ready
	wire   [5:0] router_006_src_channel;                                                     // router_006:src_channel -> rsp_demux_005:sink_channel
	wire         router_006_src_startofpacket;                                               // router_006:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire         router_006_src_endofpacket;                                                 // router_006:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire         router_src_valid;                                                           // router:src_valid -> pipe_stage_host_ctrl_m0_limiter:cmd_sink_valid
	wire  [91:0] router_src_data;                                                            // router:src_data -> pipe_stage_host_ctrl_m0_limiter:cmd_sink_data
	wire         router_src_ready;                                                           // pipe_stage_host_ctrl_m0_limiter:cmd_sink_ready -> router:src_ready
	wire   [5:0] router_src_channel;                                                         // router:src_channel -> pipe_stage_host_ctrl_m0_limiter:cmd_sink_channel
	wire         router_src_startofpacket;                                                   // router:src_startofpacket -> pipe_stage_host_ctrl_m0_limiter:cmd_sink_startofpacket
	wire         router_src_endofpacket;                                                     // router:src_endofpacket -> pipe_stage_host_ctrl_m0_limiter:cmd_sink_endofpacket
	wire  [91:0] pipe_stage_host_ctrl_m0_limiter_cmd_src_data;                               // pipe_stage_host_ctrl_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire         pipe_stage_host_ctrl_m0_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> pipe_stage_host_ctrl_m0_limiter:cmd_src_ready
	wire   [5:0] pipe_stage_host_ctrl_m0_limiter_cmd_src_channel;                            // pipe_stage_host_ctrl_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire         pipe_stage_host_ctrl_m0_limiter_cmd_src_startofpacket;                      // pipe_stage_host_ctrl_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire         pipe_stage_host_ctrl_m0_limiter_cmd_src_endofpacket;                        // pipe_stage_host_ctrl_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire         rsp_mux_src_valid;                                                          // rsp_mux:src_valid -> pipe_stage_host_ctrl_m0_limiter:rsp_sink_valid
	wire  [91:0] rsp_mux_src_data;                                                           // rsp_mux:src_data -> pipe_stage_host_ctrl_m0_limiter:rsp_sink_data
	wire         rsp_mux_src_ready;                                                          // pipe_stage_host_ctrl_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [5:0] rsp_mux_src_channel;                                                        // rsp_mux:src_channel -> pipe_stage_host_ctrl_m0_limiter:rsp_sink_channel
	wire         rsp_mux_src_startofpacket;                                                  // rsp_mux:src_startofpacket -> pipe_stage_host_ctrl_m0_limiter:rsp_sink_startofpacket
	wire         rsp_mux_src_endofpacket;                                                    // rsp_mux:src_endofpacket -> pipe_stage_host_ctrl_m0_limiter:rsp_sink_endofpacket
	wire         pipe_stage_host_ctrl_m0_limiter_rsp_src_valid;                              // pipe_stage_host_ctrl_m0_limiter:rsp_src_valid -> pipe_stage_host_ctrl_m0_agent:rp_valid
	wire  [91:0] pipe_stage_host_ctrl_m0_limiter_rsp_src_data;                               // pipe_stage_host_ctrl_m0_limiter:rsp_src_data -> pipe_stage_host_ctrl_m0_agent:rp_data
	wire         pipe_stage_host_ctrl_m0_limiter_rsp_src_ready;                              // pipe_stage_host_ctrl_m0_agent:rp_ready -> pipe_stage_host_ctrl_m0_limiter:rsp_src_ready
	wire   [5:0] pipe_stage_host_ctrl_m0_limiter_rsp_src_channel;                            // pipe_stage_host_ctrl_m0_limiter:rsp_src_channel -> pipe_stage_host_ctrl_m0_agent:rp_channel
	wire         pipe_stage_host_ctrl_m0_limiter_rsp_src_startofpacket;                      // pipe_stage_host_ctrl_m0_limiter:rsp_src_startofpacket -> pipe_stage_host_ctrl_m0_agent:rp_startofpacket
	wire         pipe_stage_host_ctrl_m0_limiter_rsp_src_endofpacket;                        // pipe_stage_host_ctrl_m0_limiter:rsp_src_endofpacket -> pipe_stage_host_ctrl_m0_agent:rp_endofpacket
	wire         cmd_demux_src1_valid;                                                       // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [91:0] cmd_demux_src1_data;                                                        // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire         cmd_demux_src1_ready;                                                       // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [5:0] cmd_demux_src1_channel;                                                     // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_startofpacket;                                               // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire         cmd_demux_src1_endofpacket;                                                 // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         cmd_demux_src2_valid;                                                       // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [91:0] cmd_demux_src2_data;                                                        // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire         cmd_demux_src2_ready;                                                       // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [5:0] cmd_demux_src2_channel;                                                     // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire         cmd_demux_src2_startofpacket;                                               // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire         cmd_demux_src2_endofpacket;                                                 // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire         cmd_demux_src3_valid;                                                       // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [91:0] cmd_demux_src3_data;                                                        // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire         cmd_demux_src3_ready;                                                       // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [5:0] cmd_demux_src3_channel;                                                     // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire         cmd_demux_src3_startofpacket;                                               // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire         cmd_demux_src3_endofpacket;                                                 // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire         cmd_demux_src4_valid;                                                       // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [91:0] cmd_demux_src4_data;                                                        // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire         cmd_demux_src4_ready;                                                       // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [5:0] cmd_demux_src4_channel;                                                     // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire         cmd_demux_src4_startofpacket;                                               // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire         cmd_demux_src4_endofpacket;                                                 // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire         cmd_demux_src5_valid;                                                       // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [91:0] cmd_demux_src5_data;                                                        // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire         cmd_demux_src5_ready;                                                       // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [5:0] cmd_demux_src5_channel;                                                     // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire         cmd_demux_src5_startofpacket;                                               // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire         cmd_demux_src5_endofpacket;                                                 // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire         rsp_demux_001_src0_valid;                                                   // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [91:0] rsp_demux_001_src0_data;                                                    // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire         rsp_demux_001_src0_ready;                                                   // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [5:0] rsp_demux_001_src0_channel;                                                 // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_startofpacket;                                           // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire         rsp_demux_001_src0_endofpacket;                                             // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire         rsp_demux_002_src0_valid;                                                   // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [91:0] rsp_demux_002_src0_data;                                                    // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire         rsp_demux_002_src0_ready;                                                   // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [5:0] rsp_demux_002_src0_channel;                                                 // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire         rsp_demux_002_src0_startofpacket;                                           // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire         rsp_demux_002_src0_endofpacket;                                             // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire         rsp_demux_003_src0_valid;                                                   // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [91:0] rsp_demux_003_src0_data;                                                    // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire         rsp_demux_003_src0_ready;                                                   // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [5:0] rsp_demux_003_src0_channel;                                                 // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire         rsp_demux_003_src0_startofpacket;                                           // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire         rsp_demux_003_src0_endofpacket;                                             // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire         rsp_demux_004_src0_valid;                                                   // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [91:0] rsp_demux_004_src0_data;                                                    // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire         rsp_demux_004_src0_ready;                                                   // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [5:0] rsp_demux_004_src0_channel;                                                 // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire         rsp_demux_004_src0_startofpacket;                                           // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire         rsp_demux_004_src0_endofpacket;                                             // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire         rsp_demux_005_src0_valid;                                                   // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [91:0] rsp_demux_005_src0_data;                                                    // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire         rsp_demux_005_src0_ready;                                                   // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [5:0] rsp_demux_005_src0_channel;                                                 // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire         rsp_demux_005_src0_startofpacket;                                           // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire         rsp_demux_005_src0_endofpacket;                                             // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire         cmd_demux_src0_valid;                                                       // cmd_demux:src0_valid -> async_fifo:in_valid
	wire  [91:0] cmd_demux_src0_data;                                                        // cmd_demux:src0_data -> async_fifo:in_data
	wire         cmd_demux_src0_ready;                                                       // async_fifo:in_ready -> cmd_demux:src0_ready
	wire   [5:0] cmd_demux_src0_channel;                                                     // cmd_demux:src0_channel -> async_fifo:in_channel
	wire         cmd_demux_src0_startofpacket;                                               // cmd_demux:src0_startofpacket -> async_fifo:in_startofpacket
	wire         cmd_demux_src0_endofpacket;                                                 // cmd_demux:src0_endofpacket -> async_fifo:in_endofpacket
	wire         async_fifo_out_valid;                                                       // async_fifo:out_valid -> cmd_mux:sink0_valid
	wire  [91:0] async_fifo_out_data;                                                        // async_fifo:out_data -> cmd_mux:sink0_data
	wire         async_fifo_out_ready;                                                       // cmd_mux:sink0_ready -> async_fifo:out_ready
	wire   [5:0] async_fifo_out_channel;                                                     // async_fifo:out_channel -> cmd_mux:sink0_channel
	wire         async_fifo_out_startofpacket;                                               // async_fifo:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire         async_fifo_out_endofpacket;                                                 // async_fifo:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                                       // rsp_demux:src0_valid -> async_fifo_001:in_valid
	wire  [91:0] rsp_demux_src0_data;                                                        // rsp_demux:src0_data -> async_fifo_001:in_data
	wire         rsp_demux_src0_ready;                                                       // async_fifo_001:in_ready -> rsp_demux:src0_ready
	wire   [5:0] rsp_demux_src0_channel;                                                     // rsp_demux:src0_channel -> async_fifo_001:in_channel
	wire         rsp_demux_src0_startofpacket;                                               // rsp_demux:src0_startofpacket -> async_fifo_001:in_startofpacket
	wire         rsp_demux_src0_endofpacket;                                                 // rsp_demux:src0_endofpacket -> async_fifo_001:in_endofpacket
	wire         async_fifo_001_out_valid;                                                   // async_fifo_001:out_valid -> rsp_mux:sink0_valid
	wire  [91:0] async_fifo_001_out_data;                                                    // async_fifo_001:out_data -> rsp_mux:sink0_data
	wire         async_fifo_001_out_ready;                                                   // rsp_mux:sink0_ready -> async_fifo_001:out_ready
	wire   [5:0] async_fifo_001_out_channel;                                                 // async_fifo_001:out_channel -> rsp_mux:sink0_channel
	wire         async_fifo_001_out_startofpacket;                                           // async_fifo_001:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire         async_fifo_001_out_endofpacket;                                             // async_fifo_001:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire   [5:0] pipe_stage_host_ctrl_m0_limiter_cmd_valid_data;                             // pipe_stage_host_ctrl_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire         alt_vip_vfr_hdmi_avalon_slave_agent_rdata_fifo_out_valid;                   // alt_vip_vfr_hdmi_avalon_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire  [33:0] alt_vip_vfr_hdmi_avalon_slave_agent_rdata_fifo_out_data;                    // alt_vip_vfr_hdmi_avalon_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire         alt_vip_vfr_hdmi_avalon_slave_agent_rdata_fifo_out_ready;                   // avalon_st_adapter:in_0_ready -> alt_vip_vfr_hdmi_avalon_slave_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_out_0_valid;                                              // avalon_st_adapter:out_0_valid -> alt_vip_vfr_hdmi_avalon_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_out_0_data;                                               // avalon_st_adapter:out_0_data -> alt_vip_vfr_hdmi_avalon_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_out_0_ready;                                              // alt_vip_vfr_hdmi_avalon_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire   [0:0] avalon_st_adapter_out_0_error;                                              // avalon_st_adapter:out_0_error -> alt_vip_vfr_hdmi_avalon_slave_agent:rdata_fifo_sink_error
	wire         acl_kernel_interface_ctrl_agent_rdata_fifo_src_valid;                       // acl_kernel_interface_ctrl_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire  [33:0] acl_kernel_interface_ctrl_agent_rdata_fifo_src_data;                        // acl_kernel_interface_ctrl_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire         acl_kernel_interface_ctrl_agent_rdata_fifo_src_ready;                       // avalon_st_adapter_001:in_0_ready -> acl_kernel_interface_ctrl_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_001_out_0_valid;                                          // avalon_st_adapter_001:out_0_valid -> acl_kernel_interface_ctrl_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_001_out_0_data;                                           // avalon_st_adapter_001:out_0_data -> acl_kernel_interface_ctrl_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_001_out_0_ready;                                          // acl_kernel_interface_ctrl_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire   [0:0] avalon_st_adapter_001_out_0_error;                                          // avalon_st_adapter_001:out_0_error -> acl_kernel_interface_ctrl_agent:rdata_fifo_sink_error
	wire         version_id_s_agent_rdata_fifo_src_valid;                                    // version_id_s_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire  [33:0] version_id_s_agent_rdata_fifo_src_data;                                     // version_id_s_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire         version_id_s_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_002:in_0_ready -> version_id_s_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_002_out_0_valid;                                          // avalon_st_adapter_002:out_0_valid -> version_id_s_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_002_out_0_data;                                           // avalon_st_adapter_002:out_0_data -> version_id_s_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_002_out_0_ready;                                          // version_id_s_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire   [0:0] avalon_st_adapter_002_out_0_error;                                          // avalon_st_adapter_002:out_0_error -> version_id_s_agent:rdata_fifo_sink_error
	wire         button_pio_s1_agent_rdata_fifo_src_valid;                                   // button_pio_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire  [33:0] button_pio_s1_agent_rdata_fifo_src_data;                                    // button_pio_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire         button_pio_s1_agent_rdata_fifo_src_ready;                                   // avalon_st_adapter_003:in_0_ready -> button_pio_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_003_out_0_valid;                                          // avalon_st_adapter_003:out_0_valid -> button_pio_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_003_out_0_data;                                           // avalon_st_adapter_003:out_0_data -> button_pio_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_003_out_0_ready;                                          // button_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire   [0:0] avalon_st_adapter_003_out_0_error;                                          // avalon_st_adapter_003:out_0_error -> button_pio_s1_agent:rdata_fifo_sink_error
	wire         dipsw_pio_s1_agent_rdata_fifo_src_valid;                                    // dipsw_pio_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire  [33:0] dipsw_pio_s1_agent_rdata_fifo_src_data;                                     // dipsw_pio_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire         dipsw_pio_s1_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_004:in_0_ready -> dipsw_pio_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_004_out_0_valid;                                          // avalon_st_adapter_004:out_0_valid -> dipsw_pio_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_004_out_0_data;                                           // avalon_st_adapter_004:out_0_data -> dipsw_pio_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_004_out_0_ready;                                          // dipsw_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire   [0:0] avalon_st_adapter_004_out_0_error;                                          // avalon_st_adapter_004:out_0_error -> dipsw_pio_s1_agent:rdata_fifo_sink_error
	wire         led_pio_s1_agent_rdata_fifo_src_valid;                                      // led_pio_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire  [33:0] led_pio_s1_agent_rdata_fifo_src_data;                                       // led_pio_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire         led_pio_s1_agent_rdata_fifo_src_ready;                                      // avalon_st_adapter_005:in_0_ready -> led_pio_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_005_out_0_valid;                                          // avalon_st_adapter_005:out_0_valid -> led_pio_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_005_out_0_data;                                           // avalon_st_adapter_005:out_0_data -> led_pio_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_005_out_0_ready;                                          // led_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire   [0:0] avalon_st_adapter_005_out_0_error;                                          // avalon_st_adapter_005:out_0_error -> led_pio_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (18),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (18),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) pipe_stage_host_ctrl_m0_translator (
		.clk                    (config_clk_out_clk_clk),                                                     //                       clk.clk
		.reset                  (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),                     //                     reset.reset
		.uav_address            (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (pipe_stage_host_ctrl_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (pipe_stage_host_ctrl_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (pipe_stage_host_ctrl_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (pipe_stage_host_ctrl_m0_byteenable),                                         //                          .byteenable
		.av_read                (pipe_stage_host_ctrl_m0_read),                                               //                          .read
		.av_readdata            (pipe_stage_host_ctrl_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (pipe_stage_host_ctrl_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (pipe_stage_host_ctrl_m0_write),                                              //                          .write
		.av_writedata           (pipe_stage_host_ctrl_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (pipe_stage_host_ctrl_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                       //               (terminated)
		.av_begintransfer       (1'b0),                                                                       //               (terminated)
		.av_chipselect          (1'b0),                                                                       //               (terminated)
		.av_lock                (1'b0),                                                                       //               (terminated)
		.uav_clken              (),                                                                           //               (terminated)
		.av_clken               (1'b1),                                                                       //               (terminated)
		.uav_response           (2'b00),                                                                      //               (terminated)
		.av_response            (),                                                                           //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                       //               (terminated)
		.av_writeresponsevalid  ()                                                                            //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) alt_vip_vfr_hdmi_avalon_slave_translator (
		.clk                    (clock_bridge_0_out_clk_clk),                                     //                      clk.clk
		.reset                  (alt_vip_vfr_hdmi_clock_reset_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (alt_vip_vfr_hdmi_avalon_slave_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (alt_vip_vfr_hdmi_avalon_slave_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (alt_vip_vfr_hdmi_avalon_slave_agent_m0_read),                    //                         .read
		.uav_write              (alt_vip_vfr_hdmi_avalon_slave_agent_m0_write),                   //                         .write
		.uav_waitrequest        (alt_vip_vfr_hdmi_avalon_slave_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (alt_vip_vfr_hdmi_avalon_slave_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (alt_vip_vfr_hdmi_avalon_slave_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (alt_vip_vfr_hdmi_avalon_slave_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (alt_vip_vfr_hdmi_avalon_slave_agent_m0_writedata),               //                         .writedata
		.uav_lock               (alt_vip_vfr_hdmi_avalon_slave_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (alt_vip_vfr_hdmi_avalon_slave_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (alt_vip_vfr_hdmi_avalon_slave_address),                          //      avalon_anti_slave_0.address
		.av_write               (alt_vip_vfr_hdmi_avalon_slave_write),                            //                         .write
		.av_read                (alt_vip_vfr_hdmi_avalon_slave_read),                             //                         .read
		.av_readdata            (alt_vip_vfr_hdmi_avalon_slave_readdata),                         //                         .readdata
		.av_writedata           (alt_vip_vfr_hdmi_avalon_slave_writedata),                        //                         .writedata
		.av_begintransfer       (),                                                               //              (terminated)
		.av_beginbursttransfer  (),                                                               //              (terminated)
		.av_burstcount          (),                                                               //              (terminated)
		.av_byteenable          (),                                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                                           //              (terminated)
		.av_waitrequest         (1'b0),                                                           //              (terminated)
		.av_writebyteenable     (),                                                               //              (terminated)
		.av_lock                (),                                                               //              (terminated)
		.av_chipselect          (),                                                               //              (terminated)
		.av_clken               (),                                                               //              (terminated)
		.uav_clken              (1'b0),                                                           //              (terminated)
		.av_debugaccess         (),                                                               //              (terminated)
		.av_outputenable        (),                                                               //              (terminated)
		.uav_response           (),                                                               //              (terminated)
		.av_response            (2'b00),                                                          //              (terminated)
		.uav_writeresponsevalid (),                                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) acl_kernel_interface_ctrl_translator (
		.clk                    (config_clk_out_clk_clk),                                 //                      clk.clk
		.reset                  (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (acl_kernel_interface_ctrl_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (acl_kernel_interface_ctrl_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (acl_kernel_interface_ctrl_agent_m0_read),                //                         .read
		.uav_write              (acl_kernel_interface_ctrl_agent_m0_write),               //                         .write
		.uav_waitrequest        (acl_kernel_interface_ctrl_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (acl_kernel_interface_ctrl_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (acl_kernel_interface_ctrl_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (acl_kernel_interface_ctrl_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (acl_kernel_interface_ctrl_agent_m0_writedata),           //                         .writedata
		.uav_lock               (acl_kernel_interface_ctrl_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (acl_kernel_interface_ctrl_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (acl_kernel_interface_ctrl_address),                      //      avalon_anti_slave_0.address
		.av_write               (acl_kernel_interface_ctrl_write),                        //                         .write
		.av_read                (acl_kernel_interface_ctrl_read),                         //                         .read
		.av_readdata            (acl_kernel_interface_ctrl_readdata),                     //                         .readdata
		.av_writedata           (acl_kernel_interface_ctrl_writedata),                    //                         .writedata
		.av_burstcount          (acl_kernel_interface_ctrl_burstcount),                   //                         .burstcount
		.av_byteenable          (acl_kernel_interface_ctrl_byteenable),                   //                         .byteenable
		.av_readdatavalid       (acl_kernel_interface_ctrl_readdatavalid),                //                         .readdatavalid
		.av_waitrequest         (acl_kernel_interface_ctrl_waitrequest),                  //                         .waitrequest
		.av_debugaccess         (acl_kernel_interface_ctrl_debugaccess),                  //                         .debugaccess
		.av_begintransfer       (),                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                       //              (terminated)
		.av_writebyteenable     (),                                                       //              (terminated)
		.av_lock                (),                                                       //              (terminated)
		.av_chipselect          (),                                                       //              (terminated)
		.av_clken               (),                                                       //              (terminated)
		.uav_clken              (1'b0),                                                   //              (terminated)
		.av_outputenable        (),                                                       //              (terminated)
		.uav_response           (),                                                       //              (terminated)
		.av_response            (2'b00),                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) version_id_s_translator (
		.clk                    (config_clk_out_clk_clk),                                 //                      clk.clk
		.reset                  (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (version_id_s_agent_m0_address),                          // avalon_universal_slave_0.address
		.uav_burstcount         (version_id_s_agent_m0_burstcount),                       //                         .burstcount
		.uav_read               (version_id_s_agent_m0_read),                             //                         .read
		.uav_write              (version_id_s_agent_m0_write),                            //                         .write
		.uav_waitrequest        (version_id_s_agent_m0_waitrequest),                      //                         .waitrequest
		.uav_readdatavalid      (version_id_s_agent_m0_readdatavalid),                    //                         .readdatavalid
		.uav_byteenable         (version_id_s_agent_m0_byteenable),                       //                         .byteenable
		.uav_readdata           (version_id_s_agent_m0_readdata),                         //                         .readdata
		.uav_writedata          (version_id_s_agent_m0_writedata),                        //                         .writedata
		.uav_lock               (version_id_s_agent_m0_lock),                             //                         .lock
		.uav_debugaccess        (version_id_s_agent_m0_debugaccess),                      //                         .debugaccess
		.av_read                (version_id_s_read),                                      //      avalon_anti_slave_0.read
		.av_readdata            (version_id_s_readdata),                                  //                         .readdata
		.av_address             (),                                                       //              (terminated)
		.av_write               (),                                                       //              (terminated)
		.av_writedata           (),                                                       //              (terminated)
		.av_begintransfer       (),                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                       //              (terminated)
		.av_burstcount          (),                                                       //              (terminated)
		.av_byteenable          (),                                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                                   //              (terminated)
		.av_waitrequest         (1'b0),                                                   //              (terminated)
		.av_writebyteenable     (),                                                       //              (terminated)
		.av_lock                (),                                                       //              (terminated)
		.av_chipselect          (),                                                       //              (terminated)
		.av_clken               (),                                                       //              (terminated)
		.uav_clken              (1'b0),                                                   //              (terminated)
		.av_debugaccess         (),                                                       //              (terminated)
		.av_outputenable        (),                                                       //              (terminated)
		.uav_response           (),                                                       //              (terminated)
		.av_response            (2'b00),                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) button_pio_s1_translator (
		.clk                    (config_clk_out_clk_clk),                                 //                      clk.clk
		.reset                  (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (button_pio_s1_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (button_pio_s1_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (button_pio_s1_agent_m0_read),                            //                         .read
		.uav_write              (button_pio_s1_agent_m0_write),                           //                         .write
		.uav_waitrequest        (button_pio_s1_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (button_pio_s1_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (button_pio_s1_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (button_pio_s1_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (button_pio_s1_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (button_pio_s1_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (button_pio_s1_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (button_pio_s1_address),                                  //      avalon_anti_slave_0.address
		.av_write               (button_pio_s1_write),                                    //                         .write
		.av_readdata            (button_pio_s1_readdata),                                 //                         .readdata
		.av_writedata           (button_pio_s1_writedata),                                //                         .writedata
		.av_chipselect          (button_pio_s1_chipselect),                               //                         .chipselect
		.av_read                (),                                                       //              (terminated)
		.av_begintransfer       (),                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                       //              (terminated)
		.av_burstcount          (),                                                       //              (terminated)
		.av_byteenable          (),                                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                                   //              (terminated)
		.av_waitrequest         (1'b0),                                                   //              (terminated)
		.av_writebyteenable     (),                                                       //              (terminated)
		.av_lock                (),                                                       //              (terminated)
		.av_clken               (),                                                       //              (terminated)
		.uav_clken              (1'b0),                                                   //              (terminated)
		.av_debugaccess         (),                                                       //              (terminated)
		.av_outputenable        (),                                                       //              (terminated)
		.uav_response           (),                                                       //              (terminated)
		.av_response            (2'b00),                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dipsw_pio_s1_translator (
		.clk                    (config_clk_out_clk_clk),                                 //                      clk.clk
		.reset                  (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dipsw_pio_s1_agent_m0_address),                          // avalon_universal_slave_0.address
		.uav_burstcount         (dipsw_pio_s1_agent_m0_burstcount),                       //                         .burstcount
		.uav_read               (dipsw_pio_s1_agent_m0_read),                             //                         .read
		.uav_write              (dipsw_pio_s1_agent_m0_write),                            //                         .write
		.uav_waitrequest        (dipsw_pio_s1_agent_m0_waitrequest),                      //                         .waitrequest
		.uav_readdatavalid      (dipsw_pio_s1_agent_m0_readdatavalid),                    //                         .readdatavalid
		.uav_byteenable         (dipsw_pio_s1_agent_m0_byteenable),                       //                         .byteenable
		.uav_readdata           (dipsw_pio_s1_agent_m0_readdata),                         //                         .readdata
		.uav_writedata          (dipsw_pio_s1_agent_m0_writedata),                        //                         .writedata
		.uav_lock               (dipsw_pio_s1_agent_m0_lock),                             //                         .lock
		.uav_debugaccess        (dipsw_pio_s1_agent_m0_debugaccess),                      //                         .debugaccess
		.av_address             (dipsw_pio_s1_address),                                   //      avalon_anti_slave_0.address
		.av_write               (dipsw_pio_s1_write),                                     //                         .write
		.av_readdata            (dipsw_pio_s1_readdata),                                  //                         .readdata
		.av_writedata           (dipsw_pio_s1_writedata),                                 //                         .writedata
		.av_chipselect          (dipsw_pio_s1_chipselect),                                //                         .chipselect
		.av_read                (),                                                       //              (terminated)
		.av_begintransfer       (),                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                       //              (terminated)
		.av_burstcount          (),                                                       //              (terminated)
		.av_byteenable          (),                                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                                   //              (terminated)
		.av_waitrequest         (1'b0),                                                   //              (terminated)
		.av_writebyteenable     (),                                                       //              (terminated)
		.av_lock                (),                                                       //              (terminated)
		.av_clken               (),                                                       //              (terminated)
		.uav_clken              (1'b0),                                                   //              (terminated)
		.av_debugaccess         (),                                                       //              (terminated)
		.av_outputenable        (),                                                       //              (terminated)
		.uav_response           (),                                                       //              (terminated)
		.av_response            (2'b00),                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) led_pio_s1_translator (
		.clk                    (config_clk_out_clk_clk),                                 //                      clk.clk
		.reset                  (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (led_pio_s1_agent_m0_address),                            // avalon_universal_slave_0.address
		.uav_burstcount         (led_pio_s1_agent_m0_burstcount),                         //                         .burstcount
		.uav_read               (led_pio_s1_agent_m0_read),                               //                         .read
		.uav_write              (led_pio_s1_agent_m0_write),                              //                         .write
		.uav_waitrequest        (led_pio_s1_agent_m0_waitrequest),                        //                         .waitrequest
		.uav_readdatavalid      (led_pio_s1_agent_m0_readdatavalid),                      //                         .readdatavalid
		.uav_byteenable         (led_pio_s1_agent_m0_byteenable),                         //                         .byteenable
		.uav_readdata           (led_pio_s1_agent_m0_readdata),                           //                         .readdata
		.uav_writedata          (led_pio_s1_agent_m0_writedata),                          //                         .writedata
		.uav_lock               (led_pio_s1_agent_m0_lock),                               //                         .lock
		.uav_debugaccess        (led_pio_s1_agent_m0_debugaccess),                        //                         .debugaccess
		.av_address             (led_pio_s1_address),                                     //      avalon_anti_slave_0.address
		.av_write               (led_pio_s1_write),                                       //                         .write
		.av_readdata            (led_pio_s1_readdata),                                    //                         .readdata
		.av_writedata           (led_pio_s1_writedata),                                   //                         .writedata
		.av_chipselect          (led_pio_s1_chipselect),                                  //                         .chipselect
		.av_read                (),                                                       //              (terminated)
		.av_begintransfer       (),                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                       //              (terminated)
		.av_burstcount          (),                                                       //              (terminated)
		.av_byteenable          (),                                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                                   //              (terminated)
		.av_waitrequest         (1'b0),                                                   //              (terminated)
		.av_writebyteenable     (),                                                       //              (terminated)
		.av_lock                (),                                                       //              (terminated)
		.av_clken               (),                                                       //              (terminated)
		.uav_clken              (1'b0),                                                   //              (terminated)
		.av_debugaccess         (),                                                       //              (terminated)
		.av_outputenable        (),                                                       //              (terminated)
		.uav_response           (),                                                       //              (terminated)
		.av_response            (2'b00),                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                    //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_QOS_H                 (72),
		.PKT_QOS_L                 (72),
		.PKT_DATA_SIDEBAND_H       (70),
		.PKT_DATA_SIDEBAND_L       (70),
		.PKT_ADDR_SIDEBAND_H       (69),
		.PKT_ADDR_SIDEBAND_L       (69),
		.PKT_BURST_TYPE_H          (68),
		.PKT_BURST_TYPE_L          (67),
		.PKT_CACHE_H               (86),
		.PKT_CACHE_L               (83),
		.PKT_THREAD_ID_H           (79),
		.PKT_THREAD_ID_L           (79),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_TRANS_EXCLUSIVE       (59),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (71),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (76),
		.ST_DATA_W                 (92),
		.ST_CHANNEL_W              (6),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pipe_stage_host_ctrl_m0_agent (
		.clk                   (config_clk_out_clk_clk),                                                     //       clk.clk
		.reset                 (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.av_address            (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (pipe_stage_host_ctrl_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (pipe_stage_host_ctrl_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (pipe_stage_host_ctrl_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (pipe_stage_host_ctrl_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (pipe_stage_host_ctrl_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (pipe_stage_host_ctrl_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (pipe_stage_host_ctrl_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (pipe_stage_host_ctrl_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (pipe_stage_host_ctrl_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (pipe_stage_host_ctrl_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (pipe_stage_host_ctrl_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                           // (terminated)
		.av_writeresponsevalid ()                                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (71),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (76),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) alt_vip_vfr_hdmi_avalon_slave_agent (
		.clk                     (clock_bridge_0_out_clk_clk),                                     //             clk.clk
		.reset                   (alt_vip_vfr_hdmi_clock_reset_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (alt_vip_vfr_hdmi_avalon_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (alt_vip_vfr_hdmi_avalon_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (alt_vip_vfr_hdmi_avalon_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (alt_vip_vfr_hdmi_avalon_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (alt_vip_vfr_hdmi_avalon_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (alt_vip_vfr_hdmi_avalon_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (alt_vip_vfr_hdmi_avalon_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (alt_vip_vfr_hdmi_avalon_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (alt_vip_vfr_hdmi_avalon_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (alt_vip_vfr_hdmi_avalon_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (alt_vip_vfr_hdmi_avalon_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (alt_vip_vfr_hdmi_avalon_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (alt_vip_vfr_hdmi_avalon_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (alt_vip_vfr_hdmi_avalon_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (alt_vip_vfr_hdmi_avalon_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (alt_vip_vfr_hdmi_avalon_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                              //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                              //                .valid
		.cp_data                 (cmd_mux_src_data),                                               //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                        //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                            //                .channel
		.rf_sink_ready           (alt_vip_vfr_hdmi_avalon_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (alt_vip_vfr_hdmi_avalon_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (alt_vip_vfr_hdmi_avalon_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (alt_vip_vfr_hdmi_avalon_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (alt_vip_vfr_hdmi_avalon_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (alt_vip_vfr_hdmi_avalon_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (alt_vip_vfr_hdmi_avalon_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (alt_vip_vfr_hdmi_avalon_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (alt_vip_vfr_hdmi_avalon_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (alt_vip_vfr_hdmi_avalon_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (alt_vip_vfr_hdmi_avalon_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (alt_vip_vfr_hdmi_avalon_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (alt_vip_vfr_hdmi_avalon_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) alt_vip_vfr_hdmi_avalon_slave_agent_rsp_fifo (
		.clk               (clock_bridge_0_out_clk_clk),                                     //       clk.clk
		.reset             (alt_vip_vfr_hdmi_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (alt_vip_vfr_hdmi_avalon_slave_agent_rf_source_data),             //        in.data
		.in_valid          (alt_vip_vfr_hdmi_avalon_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (alt_vip_vfr_hdmi_avalon_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (alt_vip_vfr_hdmi_avalon_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (alt_vip_vfr_hdmi_avalon_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (alt_vip_vfr_hdmi_avalon_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (alt_vip_vfr_hdmi_avalon_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (alt_vip_vfr_hdmi_avalon_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (alt_vip_vfr_hdmi_avalon_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (alt_vip_vfr_hdmi_avalon_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) alt_vip_vfr_hdmi_avalon_slave_agent_rdata_fifo (
		.clk               (clock_bridge_0_out_clk_clk),                                     //       clk.clk
		.reset             (alt_vip_vfr_hdmi_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (alt_vip_vfr_hdmi_avalon_slave_agent_rdata_fifo_src_data),        //        in.data
		.in_valid          (alt_vip_vfr_hdmi_avalon_slave_agent_rdata_fifo_src_valid),       //          .valid
		.in_ready          (alt_vip_vfr_hdmi_avalon_slave_agent_rdata_fifo_src_ready),       //          .ready
		.out_data          (alt_vip_vfr_hdmi_avalon_slave_agent_rdata_fifo_out_data),        //       out.data
		.out_valid         (alt_vip_vfr_hdmi_avalon_slave_agent_rdata_fifo_out_valid),       //          .valid
		.out_ready         (alt_vip_vfr_hdmi_avalon_slave_agent_rdata_fifo_out_ready),       //          .ready
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_startofpacket  (1'b0),                                                           // (terminated)
		.in_endofpacket    (1'b0),                                                           // (terminated)
		.out_startofpacket (),                                                               // (terminated)
		.out_endofpacket   (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (71),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (76),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) acl_kernel_interface_ctrl_agent (
		.clk                     (config_clk_out_clk_clk),                                     //             clk.clk
		.reset                   (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (acl_kernel_interface_ctrl_agent_m0_address),                 //              m0.address
		.m0_burstcount           (acl_kernel_interface_ctrl_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (acl_kernel_interface_ctrl_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (acl_kernel_interface_ctrl_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (acl_kernel_interface_ctrl_agent_m0_lock),                    //                .lock
		.m0_readdata             (acl_kernel_interface_ctrl_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (acl_kernel_interface_ctrl_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (acl_kernel_interface_ctrl_agent_m0_read),                    //                .read
		.m0_waitrequest          (acl_kernel_interface_ctrl_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (acl_kernel_interface_ctrl_agent_m0_writedata),               //                .writedata
		.m0_write                (acl_kernel_interface_ctrl_agent_m0_write),                   //                .write
		.rp_endofpacket          (acl_kernel_interface_ctrl_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (acl_kernel_interface_ctrl_agent_rp_ready),                   //                .ready
		.rp_valid                (acl_kernel_interface_ctrl_agent_rp_valid),                   //                .valid
		.rp_data                 (acl_kernel_interface_ctrl_agent_rp_data),                    //                .data
		.rp_startofpacket        (acl_kernel_interface_ctrl_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                    //                .channel
		.rf_sink_ready           (acl_kernel_interface_ctrl_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (acl_kernel_interface_ctrl_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (acl_kernel_interface_ctrl_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (acl_kernel_interface_ctrl_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (acl_kernel_interface_ctrl_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (acl_kernel_interface_ctrl_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (acl_kernel_interface_ctrl_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (acl_kernel_interface_ctrl_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (acl_kernel_interface_ctrl_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (acl_kernel_interface_ctrl_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (acl_kernel_interface_ctrl_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (acl_kernel_interface_ctrl_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (acl_kernel_interface_ctrl_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) acl_kernel_interface_ctrl_agent_rsp_fifo (
		.clk               (config_clk_out_clk_clk),                                     //       clk.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (acl_kernel_interface_ctrl_agent_rf_source_data),             //        in.data
		.in_valid          (acl_kernel_interface_ctrl_agent_rf_source_valid),            //          .valid
		.in_ready          (acl_kernel_interface_ctrl_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (acl_kernel_interface_ctrl_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (acl_kernel_interface_ctrl_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (acl_kernel_interface_ctrl_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (acl_kernel_interface_ctrl_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (acl_kernel_interface_ctrl_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (acl_kernel_interface_ctrl_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (acl_kernel_interface_ctrl_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (71),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (76),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) version_id_s_agent (
		.clk                     (config_clk_out_clk_clk),                                 //             clk.clk
		.reset                   (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (version_id_s_agent_m0_address),                          //              m0.address
		.m0_burstcount           (version_id_s_agent_m0_burstcount),                       //                .burstcount
		.m0_byteenable           (version_id_s_agent_m0_byteenable),                       //                .byteenable
		.m0_debugaccess          (version_id_s_agent_m0_debugaccess),                      //                .debugaccess
		.m0_lock                 (version_id_s_agent_m0_lock),                             //                .lock
		.m0_readdata             (version_id_s_agent_m0_readdata),                         //                .readdata
		.m0_readdatavalid        (version_id_s_agent_m0_readdatavalid),                    //                .readdatavalid
		.m0_read                 (version_id_s_agent_m0_read),                             //                .read
		.m0_waitrequest          (version_id_s_agent_m0_waitrequest),                      //                .waitrequest
		.m0_writedata            (version_id_s_agent_m0_writedata),                        //                .writedata
		.m0_write                (version_id_s_agent_m0_write),                            //                .write
		.rp_endofpacket          (version_id_s_agent_rp_endofpacket),                      //              rp.endofpacket
		.rp_ready                (version_id_s_agent_rp_ready),                            //                .ready
		.rp_valid                (version_id_s_agent_rp_valid),                            //                .valid
		.rp_data                 (version_id_s_agent_rp_data),                             //                .data
		.rp_startofpacket        (version_id_s_agent_rp_startofpacket),                    //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                //                .channel
		.rf_sink_ready           (version_id_s_agent_rsp_fifo_out_ready),                  //         rf_sink.ready
		.rf_sink_valid           (version_id_s_agent_rsp_fifo_out_valid),                  //                .valid
		.rf_sink_startofpacket   (version_id_s_agent_rsp_fifo_out_startofpacket),          //                .startofpacket
		.rf_sink_endofpacket     (version_id_s_agent_rsp_fifo_out_endofpacket),            //                .endofpacket
		.rf_sink_data            (version_id_s_agent_rsp_fifo_out_data),                   //                .data
		.rf_source_ready         (version_id_s_agent_rf_source_ready),                     //       rf_source.ready
		.rf_source_valid         (version_id_s_agent_rf_source_valid),                     //                .valid
		.rf_source_startofpacket (version_id_s_agent_rf_source_startofpacket),             //                .startofpacket
		.rf_source_endofpacket   (version_id_s_agent_rf_source_endofpacket),               //                .endofpacket
		.rf_source_data          (version_id_s_agent_rf_source_data),                      //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (version_id_s_agent_rdata_fifo_src_ready),                //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (version_id_s_agent_rdata_fifo_src_valid),                //                .valid
		.rdata_fifo_src_data     (version_id_s_agent_rdata_fifo_src_data),                 //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) version_id_s_agent_rsp_fifo (
		.clk               (config_clk_out_clk_clk),                                 //       clk.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (version_id_s_agent_rf_source_data),                      //        in.data
		.in_valid          (version_id_s_agent_rf_source_valid),                     //          .valid
		.in_ready          (version_id_s_agent_rf_source_ready),                     //          .ready
		.in_startofpacket  (version_id_s_agent_rf_source_startofpacket),             //          .startofpacket
		.in_endofpacket    (version_id_s_agent_rf_source_endofpacket),               //          .endofpacket
		.out_data          (version_id_s_agent_rsp_fifo_out_data),                   //       out.data
		.out_valid         (version_id_s_agent_rsp_fifo_out_valid),                  //          .valid
		.out_ready         (version_id_s_agent_rsp_fifo_out_ready),                  //          .ready
		.out_startofpacket (version_id_s_agent_rsp_fifo_out_startofpacket),          //          .startofpacket
		.out_endofpacket   (version_id_s_agent_rsp_fifo_out_endofpacket),            //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (71),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (76),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) button_pio_s1_agent (
		.clk                     (config_clk_out_clk_clk),                                 //             clk.clk
		.reset                   (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (button_pio_s1_agent_m0_address),                         //              m0.address
		.m0_burstcount           (button_pio_s1_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (button_pio_s1_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (button_pio_s1_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (button_pio_s1_agent_m0_lock),                            //                .lock
		.m0_readdata             (button_pio_s1_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (button_pio_s1_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (button_pio_s1_agent_m0_read),                            //                .read
		.m0_waitrequest          (button_pio_s1_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (button_pio_s1_agent_m0_writedata),                       //                .writedata
		.m0_write                (button_pio_s1_agent_m0_write),                           //                .write
		.rp_endofpacket          (button_pio_s1_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (button_pio_s1_agent_rp_ready),                           //                .ready
		.rp_valid                (button_pio_s1_agent_rp_valid),                           //                .valid
		.rp_data                 (button_pio_s1_agent_rp_data),                            //                .data
		.rp_startofpacket        (button_pio_s1_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                //                .channel
		.rf_sink_ready           (button_pio_s1_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (button_pio_s1_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (button_pio_s1_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (button_pio_s1_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (button_pio_s1_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (button_pio_s1_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (button_pio_s1_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (button_pio_s1_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (button_pio_s1_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (button_pio_s1_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (button_pio_s1_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (button_pio_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (button_pio_s1_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) button_pio_s1_agent_rsp_fifo (
		.clk               (config_clk_out_clk_clk),                                 //       clk.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (button_pio_s1_agent_rf_source_data),                     //        in.data
		.in_valid          (button_pio_s1_agent_rf_source_valid),                    //          .valid
		.in_ready          (button_pio_s1_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (button_pio_s1_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (button_pio_s1_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (button_pio_s1_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (button_pio_s1_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (button_pio_s1_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (button_pio_s1_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (button_pio_s1_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (71),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (76),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dipsw_pio_s1_agent (
		.clk                     (config_clk_out_clk_clk),                                 //             clk.clk
		.reset                   (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (dipsw_pio_s1_agent_m0_address),                          //              m0.address
		.m0_burstcount           (dipsw_pio_s1_agent_m0_burstcount),                       //                .burstcount
		.m0_byteenable           (dipsw_pio_s1_agent_m0_byteenable),                       //                .byteenable
		.m0_debugaccess          (dipsw_pio_s1_agent_m0_debugaccess),                      //                .debugaccess
		.m0_lock                 (dipsw_pio_s1_agent_m0_lock),                             //                .lock
		.m0_readdata             (dipsw_pio_s1_agent_m0_readdata),                         //                .readdata
		.m0_readdatavalid        (dipsw_pio_s1_agent_m0_readdatavalid),                    //                .readdatavalid
		.m0_read                 (dipsw_pio_s1_agent_m0_read),                             //                .read
		.m0_waitrequest          (dipsw_pio_s1_agent_m0_waitrequest),                      //                .waitrequest
		.m0_writedata            (dipsw_pio_s1_agent_m0_writedata),                        //                .writedata
		.m0_write                (dipsw_pio_s1_agent_m0_write),                            //                .write
		.rp_endofpacket          (dipsw_pio_s1_agent_rp_endofpacket),                      //              rp.endofpacket
		.rp_ready                (dipsw_pio_s1_agent_rp_ready),                            //                .ready
		.rp_valid                (dipsw_pio_s1_agent_rp_valid),                            //                .valid
		.rp_data                 (dipsw_pio_s1_agent_rp_data),                             //                .data
		.rp_startofpacket        (dipsw_pio_s1_agent_rp_startofpacket),                    //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                //                .channel
		.rf_sink_ready           (dipsw_pio_s1_agent_rsp_fifo_out_ready),                  //         rf_sink.ready
		.rf_sink_valid           (dipsw_pio_s1_agent_rsp_fifo_out_valid),                  //                .valid
		.rf_sink_startofpacket   (dipsw_pio_s1_agent_rsp_fifo_out_startofpacket),          //                .startofpacket
		.rf_sink_endofpacket     (dipsw_pio_s1_agent_rsp_fifo_out_endofpacket),            //                .endofpacket
		.rf_sink_data            (dipsw_pio_s1_agent_rsp_fifo_out_data),                   //                .data
		.rf_source_ready         (dipsw_pio_s1_agent_rf_source_ready),                     //       rf_source.ready
		.rf_source_valid         (dipsw_pio_s1_agent_rf_source_valid),                     //                .valid
		.rf_source_startofpacket (dipsw_pio_s1_agent_rf_source_startofpacket),             //                .startofpacket
		.rf_source_endofpacket   (dipsw_pio_s1_agent_rf_source_endofpacket),               //                .endofpacket
		.rf_source_data          (dipsw_pio_s1_agent_rf_source_data),                      //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (dipsw_pio_s1_agent_rdata_fifo_src_ready),                //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dipsw_pio_s1_agent_rdata_fifo_src_valid),                //                .valid
		.rdata_fifo_src_data     (dipsw_pio_s1_agent_rdata_fifo_src_data),                 //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dipsw_pio_s1_agent_rsp_fifo (
		.clk               (config_clk_out_clk_clk),                                 //       clk.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (dipsw_pio_s1_agent_rf_source_data),                      //        in.data
		.in_valid          (dipsw_pio_s1_agent_rf_source_valid),                     //          .valid
		.in_ready          (dipsw_pio_s1_agent_rf_source_ready),                     //          .ready
		.in_startofpacket  (dipsw_pio_s1_agent_rf_source_startofpacket),             //          .startofpacket
		.in_endofpacket    (dipsw_pio_s1_agent_rf_source_endofpacket),               //          .endofpacket
		.out_data          (dipsw_pio_s1_agent_rsp_fifo_out_data),                   //       out.data
		.out_valid         (dipsw_pio_s1_agent_rsp_fifo_out_valid),                  //          .valid
		.out_ready         (dipsw_pio_s1_agent_rsp_fifo_out_ready),                  //          .ready
		.out_startofpacket (dipsw_pio_s1_agent_rsp_fifo_out_startofpacket),          //          .startofpacket
		.out_endofpacket   (dipsw_pio_s1_agent_rsp_fifo_out_endofpacket),            //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (71),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (76),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) led_pio_s1_agent (
		.clk                     (config_clk_out_clk_clk),                                 //             clk.clk
		.reset                   (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (led_pio_s1_agent_m0_address),                            //              m0.address
		.m0_burstcount           (led_pio_s1_agent_m0_burstcount),                         //                .burstcount
		.m0_byteenable           (led_pio_s1_agent_m0_byteenable),                         //                .byteenable
		.m0_debugaccess          (led_pio_s1_agent_m0_debugaccess),                        //                .debugaccess
		.m0_lock                 (led_pio_s1_agent_m0_lock),                               //                .lock
		.m0_readdata             (led_pio_s1_agent_m0_readdata),                           //                .readdata
		.m0_readdatavalid        (led_pio_s1_agent_m0_readdatavalid),                      //                .readdatavalid
		.m0_read                 (led_pio_s1_agent_m0_read),                               //                .read
		.m0_waitrequest          (led_pio_s1_agent_m0_waitrequest),                        //                .waitrequest
		.m0_writedata            (led_pio_s1_agent_m0_writedata),                          //                .writedata
		.m0_write                (led_pio_s1_agent_m0_write),                              //                .write
		.rp_endofpacket          (led_pio_s1_agent_rp_endofpacket),                        //              rp.endofpacket
		.rp_ready                (led_pio_s1_agent_rp_ready),                              //                .ready
		.rp_valid                (led_pio_s1_agent_rp_valid),                              //                .valid
		.rp_data                 (led_pio_s1_agent_rp_data),                               //                .data
		.rp_startofpacket        (led_pio_s1_agent_rp_startofpacket),                      //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                //                .channel
		.rf_sink_ready           (led_pio_s1_agent_rsp_fifo_out_ready),                    //         rf_sink.ready
		.rf_sink_valid           (led_pio_s1_agent_rsp_fifo_out_valid),                    //                .valid
		.rf_sink_startofpacket   (led_pio_s1_agent_rsp_fifo_out_startofpacket),            //                .startofpacket
		.rf_sink_endofpacket     (led_pio_s1_agent_rsp_fifo_out_endofpacket),              //                .endofpacket
		.rf_sink_data            (led_pio_s1_agent_rsp_fifo_out_data),                     //                .data
		.rf_source_ready         (led_pio_s1_agent_rf_source_ready),                       //       rf_source.ready
		.rf_source_valid         (led_pio_s1_agent_rf_source_valid),                       //                .valid
		.rf_source_startofpacket (led_pio_s1_agent_rf_source_startofpacket),               //                .startofpacket
		.rf_source_endofpacket   (led_pio_s1_agent_rf_source_endofpacket),                 //                .endofpacket
		.rf_source_data          (led_pio_s1_agent_rf_source_data),                        //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (led_pio_s1_agent_rdata_fifo_src_ready),                  //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (led_pio_s1_agent_rdata_fifo_src_valid),                  //                .valid
		.rdata_fifo_src_data     (led_pio_s1_agent_rdata_fifo_src_data),                   //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_pio_s1_agent_rsp_fifo (
		.clk               (config_clk_out_clk_clk),                                 //       clk.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (led_pio_s1_agent_rf_source_data),                        //        in.data
		.in_valid          (led_pio_s1_agent_rf_source_valid),                       //          .valid
		.in_ready          (led_pio_s1_agent_rf_source_ready),                       //          .ready
		.in_startofpacket  (led_pio_s1_agent_rf_source_startofpacket),               //          .startofpacket
		.in_endofpacket    (led_pio_s1_agent_rf_source_endofpacket),                 //          .endofpacket
		.out_data          (led_pio_s1_agent_rsp_fifo_out_data),                     //       out.data
		.out_valid         (led_pio_s1_agent_rsp_fifo_out_valid),                    //          .valid
		.out_ready         (led_pio_s1_agent_rsp_fifo_out_ready),                    //          .ready
		.out_startofpacket (led_pio_s1_agent_rsp_fifo_out_startofpacket),            //          .startofpacket
		.out_endofpacket   (led_pio_s1_agent_rsp_fifo_out_endofpacket),              //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	system_acl_iface_mm_interconnect_3_router router (
		.sink_ready         (pipe_stage_host_ctrl_m0_agent_cp_ready),                 //      sink.ready
		.sink_valid         (pipe_stage_host_ctrl_m0_agent_cp_valid),                 //          .valid
		.sink_data          (pipe_stage_host_ctrl_m0_agent_cp_data),                  //          .data
		.sink_startofpacket (pipe_stage_host_ctrl_m0_agent_cp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (pipe_stage_host_ctrl_m0_agent_cp_endofpacket),           //          .endofpacket
		.clk                (config_clk_out_clk_clk),                                 //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                       //       src.ready
		.src_valid          (router_src_valid),                                       //          .valid
		.src_data           (router_src_data),                                        //          .data
		.src_channel        (router_src_channel),                                     //          .channel
		.src_startofpacket  (router_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                  //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_router_001 router_001 (
		.sink_ready         (alt_vip_vfr_hdmi_avalon_slave_agent_rp_ready),                   //      sink.ready
		.sink_valid         (alt_vip_vfr_hdmi_avalon_slave_agent_rp_valid),                   //          .valid
		.sink_data          (alt_vip_vfr_hdmi_avalon_slave_agent_rp_data),                    //          .data
		.sink_startofpacket (alt_vip_vfr_hdmi_avalon_slave_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (alt_vip_vfr_hdmi_avalon_slave_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clock_bridge_0_out_clk_clk),                                     //       clk.clk
		.reset              (alt_vip_vfr_hdmi_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                           //       src.ready
		.src_valid          (router_001_src_valid),                                           //          .valid
		.src_data           (router_001_src_data),                                            //          .data
		.src_channel        (router_001_src_channel),                                         //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                      //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_router_001 router_002 (
		.sink_ready         (acl_kernel_interface_ctrl_agent_rp_ready),               //      sink.ready
		.sink_valid         (acl_kernel_interface_ctrl_agent_rp_valid),               //          .valid
		.sink_data          (acl_kernel_interface_ctrl_agent_rp_data),                //          .data
		.sink_startofpacket (acl_kernel_interface_ctrl_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (acl_kernel_interface_ctrl_agent_rp_endofpacket),         //          .endofpacket
		.clk                (config_clk_out_clk_clk),                                 //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                   //       src.ready
		.src_valid          (router_002_src_valid),                                   //          .valid
		.src_data           (router_002_src_data),                                    //          .data
		.src_channel        (router_002_src_channel),                                 //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                              //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_router_001 router_003 (
		.sink_ready         (version_id_s_agent_rp_ready),                            //      sink.ready
		.sink_valid         (version_id_s_agent_rp_valid),                            //          .valid
		.sink_data          (version_id_s_agent_rp_data),                             //          .data
		.sink_startofpacket (version_id_s_agent_rp_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (version_id_s_agent_rp_endofpacket),                      //          .endofpacket
		.clk                (config_clk_out_clk_clk),                                 //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                   //       src.ready
		.src_valid          (router_003_src_valid),                                   //          .valid
		.src_data           (router_003_src_data),                                    //          .data
		.src_channel        (router_003_src_channel),                                 //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                              //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_router_001 router_004 (
		.sink_ready         (button_pio_s1_agent_rp_ready),                           //      sink.ready
		.sink_valid         (button_pio_s1_agent_rp_valid),                           //          .valid
		.sink_data          (button_pio_s1_agent_rp_data),                            //          .data
		.sink_startofpacket (button_pio_s1_agent_rp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (button_pio_s1_agent_rp_endofpacket),                     //          .endofpacket
		.clk                (config_clk_out_clk_clk),                                 //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                   //       src.ready
		.src_valid          (router_004_src_valid),                                   //          .valid
		.src_data           (router_004_src_data),                                    //          .data
		.src_channel        (router_004_src_channel),                                 //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                              //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_router_001 router_005 (
		.sink_ready         (dipsw_pio_s1_agent_rp_ready),                            //      sink.ready
		.sink_valid         (dipsw_pio_s1_agent_rp_valid),                            //          .valid
		.sink_data          (dipsw_pio_s1_agent_rp_data),                             //          .data
		.sink_startofpacket (dipsw_pio_s1_agent_rp_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (dipsw_pio_s1_agent_rp_endofpacket),                      //          .endofpacket
		.clk                (config_clk_out_clk_clk),                                 //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                   //       src.ready
		.src_valid          (router_005_src_valid),                                   //          .valid
		.src_data           (router_005_src_data),                                    //          .data
		.src_channel        (router_005_src_channel),                                 //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                              //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_router_001 router_006 (
		.sink_ready         (led_pio_s1_agent_rp_ready),                              //      sink.ready
		.sink_valid         (led_pio_s1_agent_rp_valid),                              //          .valid
		.sink_data          (led_pio_s1_agent_rp_data),                               //          .data
		.sink_startofpacket (led_pio_s1_agent_rp_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (led_pio_s1_agent_rp_endofpacket),                        //          .endofpacket
		.clk                (config_clk_out_clk_clk),                                 //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                   //       src.ready
		.src_valid          (router_006_src_valid),                                   //          .valid
		.src_data           (router_006_src_data),                                    //          .data
		.src_channel        (router_006_src_channel),                                 //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                              //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (76),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (73),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.MAX_OUTSTANDING_RESPONSES (19),
		.PIPELINED                 (0),
		.ST_DATA_W                 (92),
		.ST_CHANNEL_W              (6),
		.VALID_WIDTH               (6),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) pipe_stage_host_ctrl_m0_limiter (
		.clk                    (config_clk_out_clk_clk),                                 //       clk.clk
		.reset                  (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                       //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                       //          .valid
		.cmd_sink_data          (router_src_data),                                        //          .data
		.cmd_sink_channel       (router_src_channel),                                     //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                               //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                 //          .endofpacket
		.cmd_src_ready          (pipe_stage_host_ctrl_m0_limiter_cmd_src_ready),          //   cmd_src.ready
		.cmd_src_data           (pipe_stage_host_ctrl_m0_limiter_cmd_src_data),           //          .data
		.cmd_src_channel        (pipe_stage_host_ctrl_m0_limiter_cmd_src_channel),        //          .channel
		.cmd_src_startofpacket  (pipe_stage_host_ctrl_m0_limiter_cmd_src_startofpacket),  //          .startofpacket
		.cmd_src_endofpacket    (pipe_stage_host_ctrl_m0_limiter_cmd_src_endofpacket),    //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                      //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                      //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                    //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                       //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                              //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                //          .endofpacket
		.rsp_src_ready          (pipe_stage_host_ctrl_m0_limiter_rsp_src_ready),          //   rsp_src.ready
		.rsp_src_valid          (pipe_stage_host_ctrl_m0_limiter_rsp_src_valid),          //          .valid
		.rsp_src_data           (pipe_stage_host_ctrl_m0_limiter_rsp_src_data),           //          .data
		.rsp_src_channel        (pipe_stage_host_ctrl_m0_limiter_rsp_src_channel),        //          .channel
		.rsp_src_startofpacket  (pipe_stage_host_ctrl_m0_limiter_rsp_src_startofpacket),  //          .startofpacket
		.rsp_src_endofpacket    (pipe_stage_host_ctrl_m0_limiter_rsp_src_endofpacket),    //          .endofpacket
		.cmd_src_valid          (pipe_stage_host_ctrl_m0_limiter_cmd_valid_data)          // cmd_valid.data
	);

	system_acl_iface_mm_interconnect_3_cmd_demux cmd_demux (
		.clk                (config_clk_out_clk_clk),                                 //        clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (pipe_stage_host_ctrl_m0_limiter_cmd_src_ready),          //       sink.ready
		.sink_channel       (pipe_stage_host_ctrl_m0_limiter_cmd_src_channel),        //           .channel
		.sink_data          (pipe_stage_host_ctrl_m0_limiter_cmd_src_data),           //           .data
		.sink_startofpacket (pipe_stage_host_ctrl_m0_limiter_cmd_src_startofpacket),  //           .startofpacket
		.sink_endofpacket   (pipe_stage_host_ctrl_m0_limiter_cmd_src_endofpacket),    //           .endofpacket
		.sink_valid         (pipe_stage_host_ctrl_m0_limiter_cmd_valid_data),         // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                   //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                   //           .valid
		.src0_data          (cmd_demux_src0_data),                                    //           .data
		.src0_channel       (cmd_demux_src0_channel),                                 //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                           //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                             //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                   //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                   //           .valid
		.src1_data          (cmd_demux_src1_data),                                    //           .data
		.src1_channel       (cmd_demux_src1_channel),                                 //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                           //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                             //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                   //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                   //           .valid
		.src2_data          (cmd_demux_src2_data),                                    //           .data
		.src2_channel       (cmd_demux_src2_channel),                                 //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                           //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                             //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                   //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                   //           .valid
		.src3_data          (cmd_demux_src3_data),                                    //           .data
		.src3_channel       (cmd_demux_src3_channel),                                 //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                           //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                             //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                                   //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                                   //           .valid
		.src4_data          (cmd_demux_src4_data),                                    //           .data
		.src4_channel       (cmd_demux_src4_channel),                                 //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                           //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                             //           .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                                   //       src5.ready
		.src5_valid         (cmd_demux_src5_valid),                                   //           .valid
		.src5_data          (cmd_demux_src5_data),                                    //           .data
		.src5_channel       (cmd_demux_src5_channel),                                 //           .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                           //           .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket)                              //           .endofpacket
	);

	system_acl_iface_mm_interconnect_3_cmd_mux cmd_mux (
		.clk                 (clock_bridge_0_out_clk_clk),                                     //       clk.clk
		.reset               (alt_vip_vfr_hdmi_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                              //       src.ready
		.src_valid           (cmd_mux_src_valid),                                              //          .valid
		.src_data            (cmd_mux_src_data),                                               //          .data
		.src_channel         (cmd_mux_src_channel),                                            //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                      //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                        //          .endofpacket
		.sink0_ready         (async_fifo_out_ready),                                           //     sink0.ready
		.sink0_valid         (async_fifo_out_valid),                                           //          .valid
		.sink0_channel       (async_fifo_out_channel),                                         //          .channel
		.sink0_data          (async_fifo_out_data),                                            //          .data
		.sink0_startofpacket (async_fifo_out_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket   (async_fifo_out_endofpacket)                                      //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_cmd_mux cmd_mux_001 (
		.clk                 (config_clk_out_clk_clk),                                 //       clk.clk
		.reset               (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                  //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                  //          .valid
		.src_data            (cmd_mux_001_src_data),                                   //          .data
		.src_channel         (cmd_mux_001_src_channel),                                //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                 //          .channel
		.sink0_data          (cmd_demux_src1_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                              //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_cmd_mux cmd_mux_002 (
		.clk                 (config_clk_out_clk_clk),                                 //       clk.clk
		.reset               (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                  //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                  //          .valid
		.src_data            (cmd_mux_002_src_data),                                   //          .data
		.src_channel         (cmd_mux_002_src_channel),                                //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                                 //          .channel
		.sink0_data          (cmd_demux_src2_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                              //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_cmd_mux cmd_mux_003 (
		.clk                 (config_clk_out_clk_clk),                                 //       clk.clk
		.reset               (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                  //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                  //          .valid
		.src_data            (cmd_mux_003_src_data),                                   //          .data
		.src_channel         (cmd_mux_003_src_channel),                                //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                                 //          .channel
		.sink0_data          (cmd_demux_src3_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                              //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_cmd_mux cmd_mux_004 (
		.clk                 (config_clk_out_clk_clk),                                 //       clk.clk
		.reset               (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                  //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                  //          .valid
		.src_data            (cmd_mux_004_src_data),                                   //          .data
		.src_channel         (cmd_mux_004_src_channel),                                //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                                 //          .channel
		.sink0_data          (cmd_demux_src4_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                              //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_cmd_mux cmd_mux_005 (
		.clk                 (config_clk_out_clk_clk),                                 //       clk.clk
		.reset               (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                  //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                  //          .valid
		.src_data            (cmd_mux_005_src_data),                                   //          .data
		.src_channel         (cmd_mux_005_src_channel),                                //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                                 //          .channel
		.sink0_data          (cmd_demux_src5_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                              //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_rsp_demux rsp_demux (
		.clk                (clock_bridge_0_out_clk_clk),                                     //       clk.clk
		.reset              (alt_vip_vfr_hdmi_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                           //      sink.ready
		.sink_channel       (router_001_src_channel),                                         //          .channel
		.sink_data          (router_001_src_data),                                            //          .data
		.sink_startofpacket (router_001_src_startofpacket),                                   //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                     //          .endofpacket
		.sink_valid         (router_001_src_valid),                                           //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                           //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                           //          .valid
		.src0_data          (rsp_demux_src0_data),                                            //          .data
		.src0_channel       (rsp_demux_src0_channel),                                         //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                      //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_rsp_demux_001 rsp_demux_001 (
		.clk                (config_clk_out_clk_clk),                                 //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                   //      sink.ready
		.sink_channel       (router_002_src_channel),                                 //          .channel
		.sink_data          (router_002_src_data),                                    //          .data
		.sink_startofpacket (router_002_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_002_src_valid),                                   //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                               //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                               //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                             //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                          //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_rsp_demux_001 rsp_demux_002 (
		.clk                (config_clk_out_clk_clk),                                 //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                   //      sink.ready
		.sink_channel       (router_003_src_channel),                                 //          .channel
		.sink_data          (router_003_src_data),                                    //          .data
		.sink_startofpacket (router_003_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_003_src_valid),                                   //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                               //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                               //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                             //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                          //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_rsp_demux_001 rsp_demux_003 (
		.clk                (config_clk_out_clk_clk),                                 //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                   //      sink.ready
		.sink_channel       (router_004_src_channel),                                 //          .channel
		.sink_data          (router_004_src_data),                                    //          .data
		.sink_startofpacket (router_004_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_004_src_valid),                                   //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                               //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                               //          .valid
		.src0_data          (rsp_demux_003_src0_data),                                //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                             //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                          //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_rsp_demux_001 rsp_demux_004 (
		.clk                (config_clk_out_clk_clk),                                 //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                   //      sink.ready
		.sink_channel       (router_005_src_channel),                                 //          .channel
		.sink_data          (router_005_src_data),                                    //          .data
		.sink_startofpacket (router_005_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_005_src_valid),                                   //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                               //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                               //          .valid
		.src0_data          (rsp_demux_004_src0_data),                                //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                             //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                          //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_rsp_demux_001 rsp_demux_005 (
		.clk                (config_clk_out_clk_clk),                                 //       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                   //      sink.ready
		.sink_channel       (router_006_src_channel),                                 //          .channel
		.sink_data          (router_006_src_data),                                    //          .data
		.sink_startofpacket (router_006_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_006_src_valid),                                   //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                               //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                               //          .valid
		.src0_data          (rsp_demux_005_src0_data),                                //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                             //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                          //          .endofpacket
	);

	system_acl_iface_mm_interconnect_3_rsp_mux rsp_mux (
		.clk                 (config_clk_out_clk_clk),                                 //       clk.clk
		.reset               (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                      //       src.ready
		.src_valid           (rsp_mux_src_valid),                                      //          .valid
		.src_data            (rsp_mux_src_data),                                       //          .data
		.src_channel         (rsp_mux_src_channel),                                    //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (async_fifo_001_out_ready),                               //     sink0.ready
		.sink0_valid         (async_fifo_001_out_valid),                               //          .valid
		.sink0_channel       (async_fifo_001_out_channel),                             //          .channel
		.sink0_data          (async_fifo_001_out_data),                                //          .data
		.sink0_startofpacket (async_fifo_001_out_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (async_fifo_001_out_endofpacket),                         //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                               //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                               //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                             //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                       //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                         //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                               //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                               //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                             //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                       //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                         //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                               //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                               //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                             //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                                //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                       //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),                         //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                               //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                               //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                             //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                                //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),                       //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),                         //          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),                               //     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),                               //          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),                             //          .channel
		.sink5_data          (rsp_demux_005_src0_data),                                //          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),                       //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket)                          //          .endofpacket
	);

	altera_avalon_dc_fifo #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (92),
		.FIFO_DEPTH         (8),
		.CHANNEL_WIDTH      (6),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3)
	) async_fifo (
		.in_clk            (config_clk_out_clk_clk),                                          //        in_clk.clk
		.in_reset_n        (~pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),         //  in_clk_reset.reset_n
		.out_clk           (clock_bridge_0_out_clk_clk),                                      //       out_clk.clk
		.out_reset_n       (~alt_vip_vfr_hdmi_clock_reset_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset_n
		.in_data           (cmd_demux_src0_data),                                             //            in.data
		.in_valid          (cmd_demux_src0_valid),                                            //              .valid
		.in_ready          (cmd_demux_src0_ready),                                            //              .ready
		.in_startofpacket  (cmd_demux_src0_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                          //              .channel
		.out_data          (async_fifo_out_data),                                             //           out.data
		.out_valid         (async_fifo_out_valid),                                            //              .valid
		.out_ready         (async_fifo_out_ready),                                            //              .ready
		.out_startofpacket (async_fifo_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (async_fifo_out_endofpacket),                                      //              .endofpacket
		.out_channel       (async_fifo_out_channel),                                          //              .channel
		.in_csr_address    (1'b0),                                                            //   (terminated)
		.in_csr_read       (1'b0),                                                            //   (terminated)
		.in_csr_write      (1'b0),                                                            //   (terminated)
		.in_csr_readdata   (),                                                                //   (terminated)
		.in_csr_writedata  (32'b00000000000000000000000000000000),                            //   (terminated)
		.out_csr_address   (1'b0),                                                            //   (terminated)
		.out_csr_read      (1'b0),                                                            //   (terminated)
		.out_csr_write     (1'b0),                                                            //   (terminated)
		.out_csr_readdata  (),                                                                //   (terminated)
		.out_csr_writedata (32'b00000000000000000000000000000000),                            //   (terminated)
		.in_empty          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_error         (),                                                                //   (terminated)
		.space_avail_data  ()                                                                 //   (terminated)
	);

	altera_avalon_dc_fifo #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (92),
		.FIFO_DEPTH         (8),
		.CHANNEL_WIDTH      (6),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3)
	) async_fifo_001 (
		.in_clk            (clock_bridge_0_out_clk_clk),                                      //        in_clk.clk
		.in_reset_n        (~alt_vip_vfr_hdmi_clock_reset_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset_n
		.out_clk           (config_clk_out_clk_clk),                                          //       out_clk.clk
		.out_reset_n       (~pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),         // out_clk_reset.reset_n
		.in_data           (rsp_demux_src0_data),                                             //            in.data
		.in_valid          (rsp_demux_src0_valid),                                            //              .valid
		.in_ready          (rsp_demux_src0_ready),                                            //              .ready
		.in_startofpacket  (rsp_demux_src0_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                          //              .channel
		.out_data          (async_fifo_001_out_data),                                         //           out.data
		.out_valid         (async_fifo_001_out_valid),                                        //              .valid
		.out_ready         (async_fifo_001_out_ready),                                        //              .ready
		.out_startofpacket (async_fifo_001_out_startofpacket),                                //              .startofpacket
		.out_endofpacket   (async_fifo_001_out_endofpacket),                                  //              .endofpacket
		.out_channel       (async_fifo_001_out_channel),                                      //              .channel
		.in_csr_address    (1'b0),                                                            //   (terminated)
		.in_csr_read       (1'b0),                                                            //   (terminated)
		.in_csr_write      (1'b0),                                                            //   (terminated)
		.in_csr_readdata   (),                                                                //   (terminated)
		.in_csr_writedata  (32'b00000000000000000000000000000000),                            //   (terminated)
		.out_csr_address   (1'b0),                                                            //   (terminated)
		.out_csr_read      (1'b0),                                                            //   (terminated)
		.out_csr_write     (1'b0),                                                            //   (terminated)
		.out_csr_readdata  (),                                                                //   (terminated)
		.out_csr_writedata (32'b00000000000000000000000000000000),                            //   (terminated)
		.in_empty          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_error         (),                                                                //   (terminated)
		.space_avail_data  ()                                                                 //   (terminated)
	);

	system_acl_iface_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clock_bridge_0_out_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (alt_vip_vfr_hdmi_clock_reset_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (alt_vip_vfr_hdmi_avalon_slave_agent_rdata_fifo_out_data),        //     in_0.data
		.in_0_valid     (alt_vip_vfr_hdmi_avalon_slave_agent_rdata_fifo_out_valid),       //         .valid
		.in_0_ready     (alt_vip_vfr_hdmi_avalon_slave_agent_rdata_fifo_out_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                  //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                  //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                   //         .error
	);

	system_acl_iface_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (config_clk_out_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (acl_kernel_interface_ctrl_agent_rdata_fifo_src_data),    //     in_0.data
		.in_0_valid     (acl_kernel_interface_ctrl_agent_rdata_fifo_src_valid),   //         .valid
		.in_0_ready     (acl_kernel_interface_ctrl_agent_rdata_fifo_src_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                       //         .error
	);

	system_acl_iface_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (config_clk_out_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (version_id_s_agent_rdata_fifo_src_data),                 //     in_0.data
		.in_0_valid     (version_id_s_agent_rdata_fifo_src_valid),                //         .valid
		.in_0_ready     (version_id_s_agent_rdata_fifo_src_ready),                //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                       //         .error
	);

	system_acl_iface_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (config_clk_out_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (button_pio_s1_agent_rdata_fifo_src_data),                //     in_0.data
		.in_0_valid     (button_pio_s1_agent_rdata_fifo_src_valid),               //         .valid
		.in_0_ready     (button_pio_s1_agent_rdata_fifo_src_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                       //         .error
	);

	system_acl_iface_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (config_clk_out_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (dipsw_pio_s1_agent_rdata_fifo_src_data),                 //     in_0.data
		.in_0_valid     (dipsw_pio_s1_agent_rdata_fifo_src_valid),                //         .valid
		.in_0_ready     (dipsw_pio_s1_agent_rdata_fifo_src_ready),                //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                       //         .error
	);

	system_acl_iface_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (config_clk_out_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (led_pio_s1_agent_rdata_fifo_src_data),                   //     in_0.data
		.in_0_valid     (led_pio_s1_agent_rdata_fifo_src_valid),                  //         .valid
		.in_0_ready     (led_pio_s1_agent_rdata_fifo_src_ready),                  //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                       //         .error
	);

endmodule
